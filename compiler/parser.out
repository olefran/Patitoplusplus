Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     empty -> <empty>
Rule 2     PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
Rule 3     MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
Rule 4     VARS -> VAR VAR_AUX
Rule 5     VARS -> empty
Rule 6     VAR_AUX -> TIPO IDS VAR_AUX
Rule 7     VAR_AUX -> empty
Rule 8     TIPO -> INT r_save_type
Rule 9     TIPO -> FLOAT r_save_type
Rule 10    TIPO -> CHAR r_save_type
Rule 11    TIPO -> STRING r_save_type
Rule 12    IDS -> ID r_register_var ARRDIM DOTCOMA
Rule 13    IDS -> ID r_register_var ARRDIM COMA IDS
Rule 14    ARRDIM -> LSTAPLE EXPRESION RSTAPLE
Rule 15    ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
Rule 16    ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE
Rule 17    ARRDIM -> empty
Rule 18    FUNCTIONS -> FUNCTION FUNCTIONS
Rule 19    FUNCTIONS -> empty
Rule 20    FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 21    FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 22    PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX
Rule 23    PARAM -> empty
Rule 24    PARAM_AUX -> COMA PARAM
Rule 25    PARAM_AUX -> empty
Rule 26    PARENTESIS -> LSTAPLE RSTAPLE
Rule 27    PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE
Rule 28    PARENTESIS -> empty
Rule 29    BLOQUE -> LBRACKET ESTATUTOS RBRACKET
Rule 30    ESTATUTOS -> ESTATUTO ESTATUTOS
Rule 31    ESTATUTOS -> empty
Rule 32    ESTATUTO -> ASIGNACION DOTCOMA
Rule 33    ESTATUTO -> FUN DOTCOMA
Rule 34    ESTATUTO -> COND
Rule 35    ESTATUTO -> WRITE DOTCOMA
Rule 36    ESTATUTO -> READ DOTCOMA
Rule 37    ESTATUTO -> RETURN DOTCOMA
Rule 38    ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
Rule 39    ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR
Rule 40    EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX
Rule 41    EXPRESION_AUX -> AND r_seen_operator EXPRESION
Rule 42    EXPRESION_AUX -> OR r_seen_operator EXPRESION
Rule 43    EXPRESION_AUX -> empty
Rule 44    SUBEXP -> EXP r_seen_exp SUBEXP_AUX
Rule 45    SUBEXP_AUX -> COMPARACION SUBEXP
Rule 46    SUBEXP_AUX -> empty
Rule 47    COMPARACION -> MORE r_seen_operator
Rule 48    COMPARACION -> LESS r_seen_operator
Rule 49    COMPARACION -> COMPARE r_seen_operator
Rule 50    COMPARACION -> DIFFERENT r_seen_operator
Rule 51    COMPARACION -> MOREEQUAL r_seen_operator
Rule 52    COMPARACION -> LESSEQUAL r_seen_operator
Rule 53    EXP -> TERMINO r_seen_term EXP_AUX
Rule 54    EXP_AUX -> PLUS r_seen_operator EXP
Rule 55    EXP_AUX -> MINUS r_seen_operator EXP
Rule 56    EXP_AUX -> empty
Rule 57    TERMINO -> FACTOR r_seen_factor TERMINO_AUX
Rule 58    TERMINO_AUX -> MULT r_seen_operator TERMINO
Rule 59    TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term
Rule 60    TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term
Rule 61    TERMINO_AUX -> empty
Rule 62    FACTOR -> NOT r_seen_unary_operator FACTOR_AUX
Rule 63    FACTOR -> FACTOR_AUX
Rule 64    FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
Rule 65    FACTOR_AUX -> SIGN CTE ARROP
Rule 66    SIGN -> PLUS r_seen_unary_operator
Rule 67    SIGN -> MINUS r_seen_unary_operator
Rule 68    SIGN -> empty
Rule 69    CTE -> CTE_I r_seen_operand
Rule 70    CTE -> CTE_F r_seen_operand
Rule 71    CTE -> CTE_CH r_seen_operand
Rule 72    CTE -> CTE_STRING r_seen_operand
Rule 73    CTE -> FUN
Rule 74    CTE -> ID r_seen_operand_id ARRDIM
Rule 75    ARROP -> DET_ARR r_seen_operator_mat
Rule 76    ARROP -> TRANS_ARR r_seen_operator_mat
Rule 77    ARROP -> INV_ARR r_seen_operator_mat
Rule 78    ARROP -> empty
Rule 79    FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
Rule 80    FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX
Rule 81    FUN_AUX -> EXPRESION r_check_param
Rule 82    FUN_AUX -> empty
Rule 83    COND -> IF
Rule 84    COND -> FOR
Rule 85    COND -> WHILE
Rule 86    IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
Rule 87    IF2 -> BLOQUE IF_AUX
Rule 88    IF2 -> COND
Rule 89    IF_AUX -> SINO r_else_start BLOQUE
Rule 90    IF_AUX -> empty
Rule 91    WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
Rule 92    WHILE2 -> BLOQUE
Rule 93    WHILE2 -> COND
Rule 94    WHILE_AUX -> HAZ
Rule 95    WHILE_AUX -> empty
Rule 96    FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
Rule 97    FOR2 -> BLOQUE
Rule 98    FOR2 -> COND
Rule 99    WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN r_escribe
Rule 100   WRITE_AUX -> EXPRESION WRITE_AUXSUB
Rule 101   WRITE_AUXSUB -> COMA WRITE_AUX
Rule 102   WRITE_AUXSUB -> empty
Rule 103   READ -> LEE LPAREN READ_AUX RPAREN r_lee
Rule 104   READ_AUX -> ID r_seen_operand_id ARRDIM READ_AUXSUB
Rule 105   READ_AUXSUB -> COMA READ_AUX
Rule 106   READ_AUXSUB -> empty
Rule 107   RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa
Rule 108   RETURN -> REGRESA LPAREN NULL RPAREN
Rule 109   CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET
Rule 110   CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET
Rule 111   CTE_ARR_AUX -> CTE
Rule 112   CTE_ARR_AUX -> CTE_ARR_AUXSUB
Rule 113   CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX
Rule 114   CTE_ARR_AUXSUB -> empty
Rule 115   CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
Rule 116   CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2
Rule 117   CTE_ARR_AUX2SUB -> empty
Rule 118   r_save_type -> <empty>
Rule 119   r_save_func -> <empty>
Rule 120   r_register_func -> <empty>
Rule 121   r_register_var -> <empty>
Rule 122   r_register_princ -> <empty>
Rule 123   r_end_princ -> <empty>
Rule 124   r_seen_operand -> <empty>
Rule 125   r_seen_operand_id -> <empty>
Rule 126   r_seen_operator -> <empty>
Rule 127   r_seen_unary_operator -> <empty>
Rule 128   r_seen_equal -> <empty>
Rule 129   r_seen_subexp -> <empty>
Rule 130   r_seen_exp -> <empty>
Rule 131   r_seen_term -> <empty>
Rule 132   r_seen_factor -> <empty>
Rule 133   r_seen_operator_mat -> <empty>
Rule 134   r_pop_fake_bottom -> <empty>
Rule 135   r_check_int -> <empty>
Rule 136   r_if_end -> <empty>
Rule 137   r_else_start -> <empty>
Rule 138   r_set_while -> <empty>
Rule 139   r_while_end -> <empty>
Rule 140   r_for_gen -> <empty>
Rule 141   r_for_end -> <empty>
Rule 142   r_save_param_func -> <empty>
Rule 143   r_save_vars -> <empty>
Rule 144   r_func_set -> <empty>
Rule 145   r_func_end -> <empty>
Rule 146   r_check_func -> <empty>
Rule 147   r_check_param -> <empty>
Rule 148   r_go_sub -> <empty>
Rule 149   r_goto_main -> <empty>
Rule 150   r_regresa -> <empty>
Rule 151   r_escribe -> <empty>
Rule 152   r_lee -> <empty>
Rule 153   r_print_constants -> <empty>

Terminals, with rules where they appear

AND                  : 41
CHAR                 : 10
COMA                 : 13 16 24 80 101 105 113 116
COMMENT              : 
COMPARE              : 49
CTE_CH               : 71
CTE_F                : 70
CTE_I                : 69
CTE_STRING           : 72
DESDE                : 96
DET_ARR              : 75
DIFFERENT            : 50
DIV                  : 59
DOTCOMA              : 2 12 32 33 35 36 37
ENTONCES             : 86
EQUAL                : 38 39
ESCRIBE              : 99
FLOAT                : 9
FUNCION              : 20 21
HACER                : 96
HASTA                : 96
HAZ                  : 94
ID                   : 2 12 13 20 21 22 38 39 74 79 104
INT                  : 8
INV_ARR              : 77
LBRACKET             : 29 109 110 115
LEE                  : 103
LESS                 : 48
LESSEQUAL            : 52
LPAREN               : 3 20 21 64 79 86 91 99 103 107 108
LSTAPLE              : 14 15 15 16 26 27 27
MIENTRAS             : 91
MINUS                : 55 67
MOD                  : 60
MORE                 : 47
MOREEQUAL            : 51
MULT                 : 58
NOT                  : 62
NULL                 : 108
OR                   : 42
PLUS                 : 54 66
PRINCIPAL            : 3
PROGRAMA             : 2
RBRACKET             : 29 109 110 115
REGRESA              : 107 108
RPAREN               : 3 20 21 64 79 86 91 99 103 107 108
RSTAPLE              : 14 15 15 16 26 27 27
SI                   : 86
SINO                 : 89
STRING               : 11
TRANS_ARR            : 76
VAR                  : 4
VOID                 : 21
error                : 

Nonterminals, with rules where they appear

ARRDIM               : 12 13 38 39 74 104
ARROP                : 65
ASIGNACION           : 32 96
BLOQUE               : 3 20 21 87 89 92 97
COMPARACION          : 45
COND                 : 34 88 93 98
CTE                  : 65 111
CTE_ARR              : 39
CTE_ARR_AUX          : 109 113 115
CTE_ARR_AUX2         : 110 116
CTE_ARR_AUX2SUB      : 115
CTE_ARR_AUXSUB       : 112
ESTATUTO             : 30
ESTATUTOS            : 29 30
EXP                  : 44 54 55
EXPRESION            : 14 15 15 16 16 38 41 42 64 80 81 86 91 96 100 107
EXPRESION_AUX        : 40
EXP_AUX              : 53
FACTOR               : 57
FACTOR_AUX           : 62 63
FOR                  : 84
FOR2                 : 96
FUN                  : 33 73
FUNCTION             : 18
FUNCTIONS            : 2 18
FUN_AUX              : 79 80
IDS                  : 6 13
IF                   : 83
IF2                  : 86
IF_AUX               : 87
MAIN                 : 2
PARAM                : 20 21 24
PARAM_AUX            : 22
PARENTESIS           : 22
PROGRAM              : 0
READ                 : 36
READ_AUX             : 103 105
READ_AUXSUB          : 104
RETURN               : 37
SIGN                 : 64 65
SUBEXP               : 40 45
SUBEXP_AUX           : 44
TERMINO              : 53 58 59 60
TERMINO_AUX          : 57
TIPO                 : 6 20 22
VARS                 : 2 3 20 21
VAR_AUX              : 4 6
WHILE                : 85
WHILE2               : 91
WHILE_AUX            : 91
WRITE                : 35
WRITE_AUX            : 99 101
WRITE_AUXSUB         : 100
empty                : 5 7 17 19 23 25 28 31 43 46 56 61 68 78 82 90 95 102 106 114 117
r_check_func         : 79
r_check_int          : 86 91
r_check_param        : 80 81
r_else_start         : 89
r_end_princ          : 3
r_escribe            : 99
r_for_end            : 96
r_for_gen            : 96
r_func_end           : 3 20 21
r_func_set           : 3 20 21
r_go_sub             : 79
r_goto_main          : 2
r_if_end             : 86
r_lee                : 103
r_pop_fake_bottom    : 64
r_print_constants    : 2
r_register_func      : 20 21
r_register_princ     : 3
r_register_var       : 12 13 22
r_regresa            : 107
r_save_func          : 3 20 21
r_save_param_func    : 3 20 21
r_save_type          : 8 9 10 11 21
r_save_vars          : 2 3 20 21
r_seen_equal         : 38
r_seen_exp           : 44
r_seen_factor        : 57
r_seen_operand       : 69 70 71 72
r_seen_operand_id    : 38 39 74 104
r_seen_operator      : 38 39 41 42 47 48 49 50 51 52 54 55 58 59 60 64
r_seen_operator_mat  : 75 76 77
r_seen_subexp        : 40
r_seen_term          : 53 59 60
r_seen_unary_operator : 62 66 67
r_set_while          : 91
r_while_end          : 91

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (2) PROGRAM -> . PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    PROGRAMA        shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (2) PROGRAM -> PROGRAMA . r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (149) r_goto_main -> .

    ID              reduce using rule 149 (r_goto_main -> .)

    r_goto_main                    shift and go to state 3

state 3

    (2) PROGRAM -> PROGRAMA r_goto_main . ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    ID              shift and go to state 4


state 4

    (2) PROGRAM -> PROGRAMA r_goto_main ID . DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    DOTCOMA         shift and go to state 5


state 5

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA . VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS . r_save_vars FUNCTIONS MAIN r_print_constants
    (143) r_save_vars -> .

    FUNCION         reduce using rule 143 (r_save_vars -> .)
    PRINCIPAL       reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 9

state 7

    (4) VARS -> VAR . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    VAR_AUX                        shift and go to state 10
    TIPO                           shift and go to state 11
    empty                          shift and go to state 12

state 8

    (5) VARS -> empty .

    FUNCION         reduce using rule 5 (VARS -> empty .)
    PRINCIPAL       reduce using rule 5 (VARS -> empty .)
    LBRACKET        reduce using rule 5 (VARS -> empty .)


state 9

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars . FUNCTIONS MAIN r_print_constants
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTIONS                      shift and go to state 17
    FUNCTION                       shift and go to state 18
    empty                          shift and go to state 19

state 10

    (4) VARS -> VAR VAR_AUX .

    FUNCION         reduce using rule 4 (VARS -> VAR VAR_AUX .)
    PRINCIPAL       reduce using rule 4 (VARS -> VAR VAR_AUX .)
    LBRACKET        reduce using rule 4 (VARS -> VAR VAR_AUX .)


state 11

    (6) VAR_AUX -> TIPO . IDS VAR_AUX
    (12) IDS -> . ID r_register_var ARRDIM DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 21

state 12

    (7) VAR_AUX -> empty .

    FUNCION         reduce using rule 7 (VAR_AUX -> empty .)
    PRINCIPAL       reduce using rule 7 (VAR_AUX -> empty .)
    LBRACKET        reduce using rule 7 (VAR_AUX -> empty .)


state 13

    (8) TIPO -> INT . r_save_type
    (118) r_save_type -> .

    ID              reduce using rule 118 (r_save_type -> .)

    r_save_type                    shift and go to state 23

state 14

    (9) TIPO -> FLOAT . r_save_type
    (118) r_save_type -> .

    ID              reduce using rule 118 (r_save_type -> .)

    r_save_type                    shift and go to state 24

state 15

    (10) TIPO -> CHAR . r_save_type
    (118) r_save_type -> .

    ID              reduce using rule 118 (r_save_type -> .)

    r_save_type                    shift and go to state 25

state 16

    (11) TIPO -> STRING . r_save_type
    (118) r_save_type -> .

    ID              reduce using rule 118 (r_save_type -> .)

    r_save_type                    shift and go to state 26

state 17

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS . MAIN r_print_constants
    (3) MAIN -> . PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    PRINCIPAL       shift and go to state 28

    MAIN                           shift and go to state 27

state 18

    (18) FUNCTIONS -> FUNCTION . FUNCTIONS
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 18
    FUNCTIONS                      shift and go to state 29
    empty                          shift and go to state 19

state 19

    (19) FUNCTIONS -> empty .

    PRINCIPAL       reduce using rule 19 (FUNCTIONS -> empty .)


state 20

    (20) FUNCTION -> FUNCION . TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> FUNCION . VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type

    VOID            shift and go to state 31
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16

    TIPO                           shift and go to state 30

state 21

    (6) VAR_AUX -> TIPO IDS . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 11
    VAR_AUX                        shift and go to state 32
    empty                          shift and go to state 12

state 22

    (12) IDS -> ID . r_register_var ARRDIM DOTCOMA
    (13) IDS -> ID . r_register_var ARRDIM COMA IDS
    (121) r_register_var -> .

    LSTAPLE         reduce using rule 121 (r_register_var -> .)
    DOTCOMA         reduce using rule 121 (r_register_var -> .)
    COMA            reduce using rule 121 (r_register_var -> .)

    r_register_var                 shift and go to state 33

state 23

    (8) TIPO -> INT r_save_type .

    ID              reduce using rule 8 (TIPO -> INT r_save_type .)


state 24

    (9) TIPO -> FLOAT r_save_type .

    ID              reduce using rule 9 (TIPO -> FLOAT r_save_type .)


state 25

    (10) TIPO -> CHAR r_save_type .

    ID              reduce using rule 10 (TIPO -> CHAR r_save_type .)


state 26

    (11) TIPO -> STRING r_save_type .

    ID              reduce using rule 11 (TIPO -> STRING r_save_type .)


state 27

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN . r_print_constants
    (153) r_print_constants -> .

    $end            reduce using rule 153 (r_print_constants -> .)

    r_print_constants              shift and go to state 34

state 28

    (3) MAIN -> PRINCIPAL . r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (119) r_save_func -> .

    LPAREN          reduce using rule 119 (r_save_func -> .)

    r_save_func                    shift and go to state 35

state 29

    (18) FUNCTIONS -> FUNCTION FUNCTIONS .

    PRINCIPAL       reduce using rule 18 (FUNCTIONS -> FUNCTION FUNCTIONS .)


state 30

    (20) FUNCTION -> FUNCION TIPO . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 36


state 31

    (21) FUNCTION -> FUNCION VOID . r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (118) r_save_type -> .

    ID              reduce using rule 118 (r_save_type -> .)

    r_save_type                    shift and go to state 37

state 32

    (6) VAR_AUX -> TIPO IDS VAR_AUX .

    FUNCION         reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    PRINCIPAL       reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    LBRACKET        reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)


state 33

    (12) IDS -> ID r_register_var . ARRDIM DOTCOMA
    (13) IDS -> ID r_register_var . ARRDIM COMA IDS
    (14) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE
    (15) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> . LSTAPLE EXPRESION COMA EXPRESION RSTAPLE
    (17) ARRDIM -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 39
    DOTCOMA         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 38
    empty                          shift and go to state 40

state 34

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .

    $end            reduce using rule 2 (PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .)


state 35

    (3) MAIN -> PRINCIPAL r_save_func . LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 41


state 36

    (20) FUNCTION -> FUNCION TIPO ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (119) r_save_func -> .

    LPAREN          reduce using rule 119 (r_save_func -> .)

    r_save_func                    shift and go to state 42

state 37

    (21) FUNCTION -> FUNCION VOID r_save_type . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 43


state 38

    (12) IDS -> ID r_register_var ARRDIM . DOTCOMA
    (13) IDS -> ID r_register_var ARRDIM . COMA IDS

    DOTCOMA         shift and go to state 44
    COMA            shift and go to state 45


state 39

    (14) ARRDIM -> LSTAPLE . EXPRESION RSTAPLE
    (15) ARRDIM -> LSTAPLE . EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> LSTAPLE . EXPRESION COMA EXPRESION RSTAPLE
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 46
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 40

    (17) ARRDIM -> empty .

    DOTCOMA         reduce using rule 17 (ARRDIM -> empty .)
    COMA            reduce using rule 17 (ARRDIM -> empty .)
    DET_ARR         reduce using rule 17 (ARRDIM -> empty .)
    TRANS_ARR       reduce using rule 17 (ARRDIM -> empty .)
    INV_ARR         reduce using rule 17 (ARRDIM -> empty .)
    MULT            reduce using rule 17 (ARRDIM -> empty .)
    DIV             reduce using rule 17 (ARRDIM -> empty .)
    MOD             reduce using rule 17 (ARRDIM -> empty .)
    PLUS            reduce using rule 17 (ARRDIM -> empty .)
    MINUS           reduce using rule 17 (ARRDIM -> empty .)
    MORE            reduce using rule 17 (ARRDIM -> empty .)
    LESS            reduce using rule 17 (ARRDIM -> empty .)
    COMPARE         reduce using rule 17 (ARRDIM -> empty .)
    DIFFERENT       reduce using rule 17 (ARRDIM -> empty .)
    MOREEQUAL       reduce using rule 17 (ARRDIM -> empty .)
    LESSEQUAL       reduce using rule 17 (ARRDIM -> empty .)
    AND             reduce using rule 17 (ARRDIM -> empty .)
    OR              reduce using rule 17 (ARRDIM -> empty .)
    RSTAPLE         reduce using rule 17 (ARRDIM -> empty .)
    RPAREN          reduce using rule 17 (ARRDIM -> empty .)
    HACER           reduce using rule 17 (ARRDIM -> empty .)
    HASTA           reduce using rule 17 (ARRDIM -> empty .)
    RBRACKET        reduce using rule 17 (ARRDIM -> empty .)
    EQUAL           reduce using rule 17 (ARRDIM -> empty .)


state 41

    (3) MAIN -> PRINCIPAL r_save_func LPAREN . RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 57


state 42

    (20) FUNCTION -> FUNCION TIPO ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (120) r_register_func -> .

    LPAREN          reduce using rule 120 (r_register_func -> .)

    r_register_func                shift and go to state 58

state 43

    (21) FUNCTION -> FUNCION VOID r_save_type ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (119) r_save_func -> .

    LPAREN          reduce using rule 119 (r_save_func -> .)

    r_save_func                    shift and go to state 59

state 44

    (12) IDS -> ID r_register_var ARRDIM DOTCOMA .

    INT             reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    FLOAT           reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    CHAR            reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    STRING          reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    FUNCION         reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    PRINCIPAL       reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)
    LBRACKET        reduce using rule 12 (IDS -> ID r_register_var ARRDIM DOTCOMA .)


state 45

    (13) IDS -> ID r_register_var ARRDIM COMA . IDS
    (12) IDS -> . ID r_register_var ARRDIM DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 60

state 46

    (14) ARRDIM -> LSTAPLE EXPRESION . RSTAPLE
    (15) ARRDIM -> LSTAPLE EXPRESION . RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> LSTAPLE EXPRESION . COMA EXPRESION RSTAPLE

    RSTAPLE         shift and go to state 61
    COMA            shift and go to state 62


state 47

    (40) EXPRESION -> SUBEXP . r_seen_subexp EXPRESION_AUX
    (129) r_seen_subexp -> .

    AND             reduce using rule 129 (r_seen_subexp -> .)
    OR              reduce using rule 129 (r_seen_subexp -> .)
    RSTAPLE         reduce using rule 129 (r_seen_subexp -> .)
    COMA            reduce using rule 129 (r_seen_subexp -> .)
    RPAREN          reduce using rule 129 (r_seen_subexp -> .)
    HACER           reduce using rule 129 (r_seen_subexp -> .)
    DOTCOMA         reduce using rule 129 (r_seen_subexp -> .)
    HASTA           reduce using rule 129 (r_seen_subexp -> .)

    r_seen_subexp                  shift and go to state 63

state 48

    (44) SUBEXP -> EXP . r_seen_exp SUBEXP_AUX
    (130) r_seen_exp -> .

    MORE            reduce using rule 130 (r_seen_exp -> .)
    LESS            reduce using rule 130 (r_seen_exp -> .)
    COMPARE         reduce using rule 130 (r_seen_exp -> .)
    DIFFERENT       reduce using rule 130 (r_seen_exp -> .)
    MOREEQUAL       reduce using rule 130 (r_seen_exp -> .)
    LESSEQUAL       reduce using rule 130 (r_seen_exp -> .)
    AND             reduce using rule 130 (r_seen_exp -> .)
    OR              reduce using rule 130 (r_seen_exp -> .)
    RSTAPLE         reduce using rule 130 (r_seen_exp -> .)
    COMA            reduce using rule 130 (r_seen_exp -> .)
    RPAREN          reduce using rule 130 (r_seen_exp -> .)
    HACER           reduce using rule 130 (r_seen_exp -> .)
    DOTCOMA         reduce using rule 130 (r_seen_exp -> .)
    HASTA           reduce using rule 130 (r_seen_exp -> .)

    r_seen_exp                     shift and go to state 64

state 49

    (53) EXP -> TERMINO . r_seen_term EXP_AUX
    (131) r_seen_term -> .

    PLUS            reduce using rule 131 (r_seen_term -> .)
    MINUS           reduce using rule 131 (r_seen_term -> .)
    MORE            reduce using rule 131 (r_seen_term -> .)
    LESS            reduce using rule 131 (r_seen_term -> .)
    COMPARE         reduce using rule 131 (r_seen_term -> .)
    DIFFERENT       reduce using rule 131 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_term -> .)
    AND             reduce using rule 131 (r_seen_term -> .)
    OR              reduce using rule 131 (r_seen_term -> .)
    RSTAPLE         reduce using rule 131 (r_seen_term -> .)
    COMA            reduce using rule 131 (r_seen_term -> .)
    RPAREN          reduce using rule 131 (r_seen_term -> .)
    HACER           reduce using rule 131 (r_seen_term -> .)
    DOTCOMA         reduce using rule 131 (r_seen_term -> .)
    HASTA           reduce using rule 131 (r_seen_term -> .)

    r_seen_term                    shift and go to state 65

state 50

    (57) TERMINO -> FACTOR . r_seen_factor TERMINO_AUX
    (132) r_seen_factor -> .

    MULT            reduce using rule 132 (r_seen_factor -> .)
    DIV             reduce using rule 132 (r_seen_factor -> .)
    MOD             reduce using rule 132 (r_seen_factor -> .)
    PLUS            reduce using rule 132 (r_seen_factor -> .)
    MINUS           reduce using rule 132 (r_seen_factor -> .)
    MORE            reduce using rule 132 (r_seen_factor -> .)
    LESS            reduce using rule 132 (r_seen_factor -> .)
    COMPARE         reduce using rule 132 (r_seen_factor -> .)
    DIFFERENT       reduce using rule 132 (r_seen_factor -> .)
    MOREEQUAL       reduce using rule 132 (r_seen_factor -> .)
    LESSEQUAL       reduce using rule 132 (r_seen_factor -> .)
    AND             reduce using rule 132 (r_seen_factor -> .)
    OR              reduce using rule 132 (r_seen_factor -> .)
    RSTAPLE         reduce using rule 132 (r_seen_factor -> .)
    COMA            reduce using rule 132 (r_seen_factor -> .)
    RPAREN          reduce using rule 132 (r_seen_factor -> .)
    HACER           reduce using rule 132 (r_seen_factor -> .)
    DOTCOMA         reduce using rule 132 (r_seen_factor -> .)
    HASTA           reduce using rule 132 (r_seen_factor -> .)

    r_seen_factor                  shift and go to state 66

state 51

    (62) FACTOR -> NOT . r_seen_unary_operator FACTOR_AUX
    (127) r_seen_unary_operator -> .

    PLUS            reduce using rule 127 (r_seen_unary_operator -> .)
    MINUS           reduce using rule 127 (r_seen_unary_operator -> .)
    LPAREN          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 127 (r_seen_unary_operator -> .)
    ID              reduce using rule 127 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 67

state 52

    (63) FACTOR -> FACTOR_AUX .

    MULT            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DIV             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MOD             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    PLUS            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MINUS           reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MORE            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    LESS            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    COMPARE         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DIFFERENT       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MOREEQUAL       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    LESSEQUAL       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    AND             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    OR              reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    RSTAPLE         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    COMA            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    RPAREN          reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    HACER           reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DOTCOMA         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    HASTA           reduce using rule 63 (FACTOR -> FACTOR_AUX .)


state 53

    (64) FACTOR_AUX -> SIGN . LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> SIGN . CTE ARROP
    (69) CTE -> . CTE_I r_seen_operand
    (70) CTE -> . CTE_F r_seen_operand
    (71) CTE -> . CTE_CH r_seen_operand
    (72) CTE -> . CTE_STRING r_seen_operand
    (73) CTE -> . FUN
    (74) CTE -> . ID r_seen_operand_id ARRDIM
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub

    LPAREN          shift and go to state 68
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 71
    CTE_CH          shift and go to state 72
    CTE_STRING      shift and go to state 73
    ID              shift and go to state 75

    CTE                            shift and go to state 69
    FUN                            shift and go to state 74

state 54

    (66) SIGN -> PLUS . r_seen_unary_operator
    (127) r_seen_unary_operator -> .

    LPAREN          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 127 (r_seen_unary_operator -> .)
    ID              reduce using rule 127 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 76

state 55

    (67) SIGN -> MINUS . r_seen_unary_operator
    (127) r_seen_unary_operator -> .

    LPAREN          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 127 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 127 (r_seen_unary_operator -> .)
    ID              reduce using rule 127 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 77

state 56

    (68) SIGN -> empty .

    LPAREN          reduce using rule 68 (SIGN -> empty .)
    CTE_I           reduce using rule 68 (SIGN -> empty .)
    CTE_F           reduce using rule 68 (SIGN -> empty .)
    CTE_CH          reduce using rule 68 (SIGN -> empty .)
    CTE_STRING      reduce using rule 68 (SIGN -> empty .)
    ID              reduce using rule 68 (SIGN -> empty .)


state 57

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN . r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (122) r_register_princ -> .

    VAR             reduce using rule 122 (r_register_princ -> .)
    LBRACKET        reduce using rule 122 (r_register_princ -> .)

    r_register_princ               shift and go to state 78

state 58

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 79


state 59

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (120) r_register_func -> .

    LPAREN          reduce using rule 120 (r_register_func -> .)

    r_register_func                shift and go to state 80

state 60

    (13) IDS -> ID r_register_var ARRDIM COMA IDS .

    INT             reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    FLOAT           reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    CHAR            reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    STRING          reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    FUNCION         reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    PRINCIPAL       reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)
    LBRACKET        reduce using rule 13 (IDS -> ID r_register_var ARRDIM COMA IDS .)


state 61

    (14) ARRDIM -> LSTAPLE EXPRESION RSTAPLE .
    (15) ARRDIM -> LSTAPLE EXPRESION RSTAPLE . LSTAPLE EXPRESION RSTAPLE

    DOTCOMA         reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    COMA            reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    DET_ARR         reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    TRANS_ARR       reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    INV_ARR         reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    MULT            reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    DIV             reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    MOD             reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    PLUS            reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    MINUS           reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    MORE            reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    LESS            reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    COMPARE         reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    DIFFERENT       reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    MOREEQUAL       reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    LESSEQUAL       reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    AND             reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    OR              reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    RSTAPLE         reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    RPAREN          reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    HACER           reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    HASTA           reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    RBRACKET        reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    EQUAL           reduce using rule 14 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE .)
    LSTAPLE         shift and go to state 81


state 62

    (16) ARRDIM -> LSTAPLE EXPRESION COMA . EXPRESION RSTAPLE
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 82
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 63

    (40) EXPRESION -> SUBEXP r_seen_subexp . EXPRESION_AUX
    (41) EXPRESION_AUX -> . AND r_seen_operator EXPRESION
    (42) EXPRESION_AUX -> . OR r_seen_operator EXPRESION
    (43) EXPRESION_AUX -> . empty
    (1) empty -> .

    AND             shift and go to state 84
    OR              shift and go to state 85
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXPRESION_AUX                  shift and go to state 83
    empty                          shift and go to state 86

state 64

    (44) SUBEXP -> EXP r_seen_exp . SUBEXP_AUX
    (45) SUBEXP_AUX -> . COMPARACION SUBEXP
    (46) SUBEXP_AUX -> . empty
    (47) COMPARACION -> . MORE r_seen_operator
    (48) COMPARACION -> . LESS r_seen_operator
    (49) COMPARACION -> . COMPARE r_seen_operator
    (50) COMPARACION -> . DIFFERENT r_seen_operator
    (51) COMPARACION -> . MOREEQUAL r_seen_operator
    (52) COMPARACION -> . LESSEQUAL r_seen_operator
    (1) empty -> .

    MORE            shift and go to state 90
    LESS            shift and go to state 91
    COMPARE         shift and go to state 92
    DIFFERENT       shift and go to state 93
    MOREEQUAL       shift and go to state 94
    LESSEQUAL       shift and go to state 95
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    SUBEXP_AUX                     shift and go to state 87
    COMPARACION                    shift and go to state 88
    empty                          shift and go to state 89

state 65

    (53) EXP -> TERMINO r_seen_term . EXP_AUX
    (54) EXP_AUX -> . PLUS r_seen_operator EXP
    (55) EXP_AUX -> . MINUS r_seen_operator EXP
    (56) EXP_AUX -> . empty
    (1) empty -> .

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXP_AUX                        shift and go to state 96
    empty                          shift and go to state 99

state 66

    (57) TERMINO -> FACTOR r_seen_factor . TERMINO_AUX
    (58) TERMINO_AUX -> . MULT r_seen_operator TERMINO
    (59) TERMINO_AUX -> . DIV r_seen_operator TERMINO r_seen_term
    (60) TERMINO_AUX -> . MOD r_seen_operator TERMINO r_seen_term
    (61) TERMINO_AUX -> . empty
    (1) empty -> .

    MULT            shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    TERMINO_AUX                    shift and go to state 100
    empty                          shift and go to state 104

state 67

    (62) FACTOR -> NOT r_seen_unary_operator . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    FACTOR_AUX                     shift and go to state 105
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 68

    (64) FACTOR_AUX -> SIGN LPAREN . r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 106

state 69

    (65) FACTOR_AUX -> SIGN CTE . ARROP
    (75) ARROP -> . DET_ARR r_seen_operator_mat
    (76) ARROP -> . TRANS_ARR r_seen_operator_mat
    (77) ARROP -> . INV_ARR r_seen_operator_mat
    (78) ARROP -> . empty
    (1) empty -> .

    DET_ARR         shift and go to state 108
    TRANS_ARR       shift and go to state 109
    INV_ARR         shift and go to state 110
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    ARROP                          shift and go to state 107
    empty                          shift and go to state 111

state 70

    (69) CTE -> CTE_I . r_seen_operand
    (124) r_seen_operand -> .

    DET_ARR         reduce using rule 124 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 124 (r_seen_operand -> .)
    INV_ARR         reduce using rule 124 (r_seen_operand -> .)
    MULT            reduce using rule 124 (r_seen_operand -> .)
    DIV             reduce using rule 124 (r_seen_operand -> .)
    MOD             reduce using rule 124 (r_seen_operand -> .)
    PLUS            reduce using rule 124 (r_seen_operand -> .)
    MINUS           reduce using rule 124 (r_seen_operand -> .)
    MORE            reduce using rule 124 (r_seen_operand -> .)
    LESS            reduce using rule 124 (r_seen_operand -> .)
    COMPARE         reduce using rule 124 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 124 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 124 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 124 (r_seen_operand -> .)
    AND             reduce using rule 124 (r_seen_operand -> .)
    OR              reduce using rule 124 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 124 (r_seen_operand -> .)
    COMA            reduce using rule 124 (r_seen_operand -> .)
    RPAREN          reduce using rule 124 (r_seen_operand -> .)
    HACER           reduce using rule 124 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 124 (r_seen_operand -> .)
    HASTA           reduce using rule 124 (r_seen_operand -> .)
    RBRACKET        reduce using rule 124 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 112

state 71

    (70) CTE -> CTE_F . r_seen_operand
    (124) r_seen_operand -> .

    DET_ARR         reduce using rule 124 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 124 (r_seen_operand -> .)
    INV_ARR         reduce using rule 124 (r_seen_operand -> .)
    MULT            reduce using rule 124 (r_seen_operand -> .)
    DIV             reduce using rule 124 (r_seen_operand -> .)
    MOD             reduce using rule 124 (r_seen_operand -> .)
    PLUS            reduce using rule 124 (r_seen_operand -> .)
    MINUS           reduce using rule 124 (r_seen_operand -> .)
    MORE            reduce using rule 124 (r_seen_operand -> .)
    LESS            reduce using rule 124 (r_seen_operand -> .)
    COMPARE         reduce using rule 124 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 124 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 124 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 124 (r_seen_operand -> .)
    AND             reduce using rule 124 (r_seen_operand -> .)
    OR              reduce using rule 124 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 124 (r_seen_operand -> .)
    COMA            reduce using rule 124 (r_seen_operand -> .)
    RPAREN          reduce using rule 124 (r_seen_operand -> .)
    HACER           reduce using rule 124 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 124 (r_seen_operand -> .)
    HASTA           reduce using rule 124 (r_seen_operand -> .)
    RBRACKET        reduce using rule 124 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 113

state 72

    (71) CTE -> CTE_CH . r_seen_operand
    (124) r_seen_operand -> .

    DET_ARR         reduce using rule 124 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 124 (r_seen_operand -> .)
    INV_ARR         reduce using rule 124 (r_seen_operand -> .)
    MULT            reduce using rule 124 (r_seen_operand -> .)
    DIV             reduce using rule 124 (r_seen_operand -> .)
    MOD             reduce using rule 124 (r_seen_operand -> .)
    PLUS            reduce using rule 124 (r_seen_operand -> .)
    MINUS           reduce using rule 124 (r_seen_operand -> .)
    MORE            reduce using rule 124 (r_seen_operand -> .)
    LESS            reduce using rule 124 (r_seen_operand -> .)
    COMPARE         reduce using rule 124 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 124 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 124 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 124 (r_seen_operand -> .)
    AND             reduce using rule 124 (r_seen_operand -> .)
    OR              reduce using rule 124 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 124 (r_seen_operand -> .)
    COMA            reduce using rule 124 (r_seen_operand -> .)
    RPAREN          reduce using rule 124 (r_seen_operand -> .)
    HACER           reduce using rule 124 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 124 (r_seen_operand -> .)
    HASTA           reduce using rule 124 (r_seen_operand -> .)
    RBRACKET        reduce using rule 124 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 114

state 73

    (72) CTE -> CTE_STRING . r_seen_operand
    (124) r_seen_operand -> .

    DET_ARR         reduce using rule 124 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 124 (r_seen_operand -> .)
    INV_ARR         reduce using rule 124 (r_seen_operand -> .)
    MULT            reduce using rule 124 (r_seen_operand -> .)
    DIV             reduce using rule 124 (r_seen_operand -> .)
    MOD             reduce using rule 124 (r_seen_operand -> .)
    PLUS            reduce using rule 124 (r_seen_operand -> .)
    MINUS           reduce using rule 124 (r_seen_operand -> .)
    MORE            reduce using rule 124 (r_seen_operand -> .)
    LESS            reduce using rule 124 (r_seen_operand -> .)
    COMPARE         reduce using rule 124 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 124 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 124 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 124 (r_seen_operand -> .)
    AND             reduce using rule 124 (r_seen_operand -> .)
    OR              reduce using rule 124 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 124 (r_seen_operand -> .)
    COMA            reduce using rule 124 (r_seen_operand -> .)
    RPAREN          reduce using rule 124 (r_seen_operand -> .)
    HACER           reduce using rule 124 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 124 (r_seen_operand -> .)
    HASTA           reduce using rule 124 (r_seen_operand -> .)
    RBRACKET        reduce using rule 124 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 115

state 74

    (73) CTE -> FUN .

    DET_ARR         reduce using rule 73 (CTE -> FUN .)
    TRANS_ARR       reduce using rule 73 (CTE -> FUN .)
    INV_ARR         reduce using rule 73 (CTE -> FUN .)
    MULT            reduce using rule 73 (CTE -> FUN .)
    DIV             reduce using rule 73 (CTE -> FUN .)
    MOD             reduce using rule 73 (CTE -> FUN .)
    PLUS            reduce using rule 73 (CTE -> FUN .)
    MINUS           reduce using rule 73 (CTE -> FUN .)
    MORE            reduce using rule 73 (CTE -> FUN .)
    LESS            reduce using rule 73 (CTE -> FUN .)
    COMPARE         reduce using rule 73 (CTE -> FUN .)
    DIFFERENT       reduce using rule 73 (CTE -> FUN .)
    MOREEQUAL       reduce using rule 73 (CTE -> FUN .)
    LESSEQUAL       reduce using rule 73 (CTE -> FUN .)
    AND             reduce using rule 73 (CTE -> FUN .)
    OR              reduce using rule 73 (CTE -> FUN .)
    RSTAPLE         reduce using rule 73 (CTE -> FUN .)
    COMA            reduce using rule 73 (CTE -> FUN .)
    RPAREN          reduce using rule 73 (CTE -> FUN .)
    HACER           reduce using rule 73 (CTE -> FUN .)
    DOTCOMA         reduce using rule 73 (CTE -> FUN .)
    HASTA           reduce using rule 73 (CTE -> FUN .)
    RBRACKET        reduce using rule 73 (CTE -> FUN .)


state 75

    (74) CTE -> ID . r_seen_operand_id ARRDIM
    (79) FUN -> ID . r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (125) r_seen_operand_id -> .
    (146) r_check_func -> .

    LSTAPLE         reduce using rule 125 (r_seen_operand_id -> .)
    DET_ARR         reduce using rule 125 (r_seen_operand_id -> .)
    TRANS_ARR       reduce using rule 125 (r_seen_operand_id -> .)
    INV_ARR         reduce using rule 125 (r_seen_operand_id -> .)
    MULT            reduce using rule 125 (r_seen_operand_id -> .)
    DIV             reduce using rule 125 (r_seen_operand_id -> .)
    MOD             reduce using rule 125 (r_seen_operand_id -> .)
    PLUS            reduce using rule 125 (r_seen_operand_id -> .)
    MINUS           reduce using rule 125 (r_seen_operand_id -> .)
    MORE            reduce using rule 125 (r_seen_operand_id -> .)
    LESS            reduce using rule 125 (r_seen_operand_id -> .)
    COMPARE         reduce using rule 125 (r_seen_operand_id -> .)
    DIFFERENT       reduce using rule 125 (r_seen_operand_id -> .)
    MOREEQUAL       reduce using rule 125 (r_seen_operand_id -> .)
    LESSEQUAL       reduce using rule 125 (r_seen_operand_id -> .)
    AND             reduce using rule 125 (r_seen_operand_id -> .)
    OR              reduce using rule 125 (r_seen_operand_id -> .)
    RSTAPLE         reduce using rule 125 (r_seen_operand_id -> .)
    COMA            reduce using rule 125 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 125 (r_seen_operand_id -> .)
    HACER           reduce using rule 125 (r_seen_operand_id -> .)
    DOTCOMA         reduce using rule 125 (r_seen_operand_id -> .)
    HASTA           reduce using rule 125 (r_seen_operand_id -> .)
    RBRACKET        reduce using rule 125 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 146 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 116
    r_check_func                   shift and go to state 117

state 76

    (66) SIGN -> PLUS r_seen_unary_operator .

    LPAREN          reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_I           reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_F           reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    ID              reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)


state 77

    (67) SIGN -> MINUS r_seen_unary_operator .

    LPAREN          reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_I           reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_F           reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    ID              reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)


state 78

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ . r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 118

state 79

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 119
    PARAM                          shift and go to state 120
    empty                          shift and go to state 121

state 80

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 122


state 81

    (15) ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE . EXPRESION RSTAPLE
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 123
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 82

    (16) ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION . RSTAPLE

    RSTAPLE         shift and go to state 124


state 83

    (40) EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .

    RSTAPLE         reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    COMA            reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    RPAREN          reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HACER           reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    DOTCOMA         reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HASTA           reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)


state 84

    (41) EXPRESION_AUX -> AND . r_seen_operator EXPRESION
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 125

state 85

    (42) EXPRESION_AUX -> OR . r_seen_operator EXPRESION
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 126

state 86

    (43) EXPRESION_AUX -> empty .

    RSTAPLE         reduce using rule 43 (EXPRESION_AUX -> empty .)
    COMA            reduce using rule 43 (EXPRESION_AUX -> empty .)
    RPAREN          reduce using rule 43 (EXPRESION_AUX -> empty .)
    HACER           reduce using rule 43 (EXPRESION_AUX -> empty .)
    DOTCOMA         reduce using rule 43 (EXPRESION_AUX -> empty .)
    HASTA           reduce using rule 43 (EXPRESION_AUX -> empty .)


state 87

    (44) SUBEXP -> EXP r_seen_exp SUBEXP_AUX .

    AND             reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    OR              reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    RSTAPLE         reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    COMA            reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    RPAREN          reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HACER           reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    DOTCOMA         reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HASTA           reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)


state 88

    (45) SUBEXP_AUX -> COMPARACION . SUBEXP
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SUBEXP                         shift and go to state 127
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 89

    (46) SUBEXP_AUX -> empty .

    AND             reduce using rule 46 (SUBEXP_AUX -> empty .)
    OR              reduce using rule 46 (SUBEXP_AUX -> empty .)
    RSTAPLE         reduce using rule 46 (SUBEXP_AUX -> empty .)
    COMA            reduce using rule 46 (SUBEXP_AUX -> empty .)
    RPAREN          reduce using rule 46 (SUBEXP_AUX -> empty .)
    HACER           reduce using rule 46 (SUBEXP_AUX -> empty .)
    DOTCOMA         reduce using rule 46 (SUBEXP_AUX -> empty .)
    HASTA           reduce using rule 46 (SUBEXP_AUX -> empty .)


state 90

    (47) COMPARACION -> MORE . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 128

state 91

    (48) COMPARACION -> LESS . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 129

state 92

    (49) COMPARACION -> COMPARE . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 130

state 93

    (50) COMPARACION -> DIFFERENT . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 131

state 94

    (51) COMPARACION -> MOREEQUAL . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 132

state 95

    (52) COMPARACION -> LESSEQUAL . r_seen_operator
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 133

state 96

    (53) EXP -> TERMINO r_seen_term EXP_AUX .

    MORE            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESS            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMPARE         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DIFFERENT       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    MOREEQUAL       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESSEQUAL       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    AND             reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    OR              reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    RSTAPLE         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMA            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    RPAREN          reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HACER           reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DOTCOMA         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HASTA           reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)


state 97

    (54) EXP_AUX -> PLUS . r_seen_operator EXP
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 134

state 98

    (55) EXP_AUX -> MINUS . r_seen_operator EXP
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 135

state 99

    (56) EXP_AUX -> empty .

    MORE            reduce using rule 56 (EXP_AUX -> empty .)
    LESS            reduce using rule 56 (EXP_AUX -> empty .)
    COMPARE         reduce using rule 56 (EXP_AUX -> empty .)
    DIFFERENT       reduce using rule 56 (EXP_AUX -> empty .)
    MOREEQUAL       reduce using rule 56 (EXP_AUX -> empty .)
    LESSEQUAL       reduce using rule 56 (EXP_AUX -> empty .)
    AND             reduce using rule 56 (EXP_AUX -> empty .)
    OR              reduce using rule 56 (EXP_AUX -> empty .)
    RSTAPLE         reduce using rule 56 (EXP_AUX -> empty .)
    COMA            reduce using rule 56 (EXP_AUX -> empty .)
    RPAREN          reduce using rule 56 (EXP_AUX -> empty .)
    HACER           reduce using rule 56 (EXP_AUX -> empty .)
    DOTCOMA         reduce using rule 56 (EXP_AUX -> empty .)
    HASTA           reduce using rule 56 (EXP_AUX -> empty .)


state 100

    (57) TERMINO -> FACTOR r_seen_factor TERMINO_AUX .

    PLUS            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MINUS           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MORE            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESS            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMPARE         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DIFFERENT       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MOREEQUAL       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESSEQUAL       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    AND             reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    OR              reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    RSTAPLE         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMA            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    RPAREN          reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HACER           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DOTCOMA         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HASTA           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)


state 101

    (58) TERMINO_AUX -> MULT . r_seen_operator TERMINO
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 136

state 102

    (59) TERMINO_AUX -> DIV . r_seen_operator TERMINO r_seen_term
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 137

state 103

    (60) TERMINO_AUX -> MOD . r_seen_operator TERMINO r_seen_term
    (126) r_seen_operator -> .

    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 138

state 104

    (61) TERMINO_AUX -> empty .

    PLUS            reduce using rule 61 (TERMINO_AUX -> empty .)
    MINUS           reduce using rule 61 (TERMINO_AUX -> empty .)
    MORE            reduce using rule 61 (TERMINO_AUX -> empty .)
    LESS            reduce using rule 61 (TERMINO_AUX -> empty .)
    COMPARE         reduce using rule 61 (TERMINO_AUX -> empty .)
    DIFFERENT       reduce using rule 61 (TERMINO_AUX -> empty .)
    MOREEQUAL       reduce using rule 61 (TERMINO_AUX -> empty .)
    LESSEQUAL       reduce using rule 61 (TERMINO_AUX -> empty .)
    AND             reduce using rule 61 (TERMINO_AUX -> empty .)
    OR              reduce using rule 61 (TERMINO_AUX -> empty .)
    RSTAPLE         reduce using rule 61 (TERMINO_AUX -> empty .)
    COMA            reduce using rule 61 (TERMINO_AUX -> empty .)
    RPAREN          reduce using rule 61 (TERMINO_AUX -> empty .)
    HACER           reduce using rule 61 (TERMINO_AUX -> empty .)
    DOTCOMA         reduce using rule 61 (TERMINO_AUX -> empty .)
    HASTA           reduce using rule 61 (TERMINO_AUX -> empty .)


state 105

    (62) FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .

    MULT            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIV             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOD             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    PLUS            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MINUS           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MORE            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESS            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMPARE         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIFFERENT       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOREEQUAL       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESSEQUAL       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    AND             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    OR              reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    RSTAPLE         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMA            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    RPAREN          reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HACER           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DOTCOMA         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HASTA           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)


state 106

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator . EXPRESION RPAREN r_pop_fake_bottom
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SIGN                           shift and go to state 53
    EXPRESION                      shift and go to state 139
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    empty                          shift and go to state 56

state 107

    (65) FACTOR_AUX -> SIGN CTE ARROP .

    MULT            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIV             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOD             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    PLUS            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MINUS           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MORE            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESS            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMPARE         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIFFERENT       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOREEQUAL       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESSEQUAL       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    AND             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    OR              reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    RSTAPLE         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMA            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    RPAREN          reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    HACER           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DOTCOMA         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    HASTA           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)


state 108

    (75) ARROP -> DET_ARR . r_seen_operator_mat
    (133) r_seen_operator_mat -> .

    MULT            reduce using rule 133 (r_seen_operator_mat -> .)
    DIV             reduce using rule 133 (r_seen_operator_mat -> .)
    MOD             reduce using rule 133 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 133 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 133 (r_seen_operator_mat -> .)
    MORE            reduce using rule 133 (r_seen_operator_mat -> .)
    LESS            reduce using rule 133 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 133 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 133 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    AND             reduce using rule 133 (r_seen_operator_mat -> .)
    OR              reduce using rule 133 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 133 (r_seen_operator_mat -> .)
    COMA            reduce using rule 133 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 133 (r_seen_operator_mat -> .)
    HACER           reduce using rule 133 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 133 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 133 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 140

state 109

    (76) ARROP -> TRANS_ARR . r_seen_operator_mat
    (133) r_seen_operator_mat -> .

    MULT            reduce using rule 133 (r_seen_operator_mat -> .)
    DIV             reduce using rule 133 (r_seen_operator_mat -> .)
    MOD             reduce using rule 133 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 133 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 133 (r_seen_operator_mat -> .)
    MORE            reduce using rule 133 (r_seen_operator_mat -> .)
    LESS            reduce using rule 133 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 133 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 133 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    AND             reduce using rule 133 (r_seen_operator_mat -> .)
    OR              reduce using rule 133 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 133 (r_seen_operator_mat -> .)
    COMA            reduce using rule 133 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 133 (r_seen_operator_mat -> .)
    HACER           reduce using rule 133 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 133 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 133 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 141

state 110

    (77) ARROP -> INV_ARR . r_seen_operator_mat
    (133) r_seen_operator_mat -> .

    MULT            reduce using rule 133 (r_seen_operator_mat -> .)
    DIV             reduce using rule 133 (r_seen_operator_mat -> .)
    MOD             reduce using rule 133 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 133 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 133 (r_seen_operator_mat -> .)
    MORE            reduce using rule 133 (r_seen_operator_mat -> .)
    LESS            reduce using rule 133 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 133 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 133 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 133 (r_seen_operator_mat -> .)
    AND             reduce using rule 133 (r_seen_operator_mat -> .)
    OR              reduce using rule 133 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 133 (r_seen_operator_mat -> .)
    COMA            reduce using rule 133 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 133 (r_seen_operator_mat -> .)
    HACER           reduce using rule 133 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 133 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 133 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 142

state 111

    (78) ARROP -> empty .

    MULT            reduce using rule 78 (ARROP -> empty .)
    DIV             reduce using rule 78 (ARROP -> empty .)
    MOD             reduce using rule 78 (ARROP -> empty .)
    PLUS            reduce using rule 78 (ARROP -> empty .)
    MINUS           reduce using rule 78 (ARROP -> empty .)
    MORE            reduce using rule 78 (ARROP -> empty .)
    LESS            reduce using rule 78 (ARROP -> empty .)
    COMPARE         reduce using rule 78 (ARROP -> empty .)
    DIFFERENT       reduce using rule 78 (ARROP -> empty .)
    MOREEQUAL       reduce using rule 78 (ARROP -> empty .)
    LESSEQUAL       reduce using rule 78 (ARROP -> empty .)
    AND             reduce using rule 78 (ARROP -> empty .)
    OR              reduce using rule 78 (ARROP -> empty .)
    RSTAPLE         reduce using rule 78 (ARROP -> empty .)
    COMA            reduce using rule 78 (ARROP -> empty .)
    RPAREN          reduce using rule 78 (ARROP -> empty .)
    HACER           reduce using rule 78 (ARROP -> empty .)
    DOTCOMA         reduce using rule 78 (ARROP -> empty .)
    HASTA           reduce using rule 78 (ARROP -> empty .)


state 112

    (69) CTE -> CTE_I r_seen_operand .

    DET_ARR         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    TRANS_ARR       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    INV_ARR         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MULT            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DIV             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MOD             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    PLUS            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MINUS           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MORE            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    LESS            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    COMPARE         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DIFFERENT       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MOREEQUAL       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    LESSEQUAL       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    AND             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    OR              reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    RSTAPLE         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    COMA            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    RPAREN          reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    HACER           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DOTCOMA         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    HASTA           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    RBRACKET        reduce using rule 69 (CTE -> CTE_I r_seen_operand .)


state 113

    (70) CTE -> CTE_F r_seen_operand .

    DET_ARR         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    TRANS_ARR       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    INV_ARR         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MULT            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DIV             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MOD             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    PLUS            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MINUS           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MORE            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    LESS            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    COMPARE         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DIFFERENT       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MOREEQUAL       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    LESSEQUAL       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    AND             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    OR              reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    RSTAPLE         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    COMA            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    RPAREN          reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    HACER           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DOTCOMA         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    HASTA           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    RBRACKET        reduce using rule 70 (CTE -> CTE_F r_seen_operand .)


state 114

    (71) CTE -> CTE_CH r_seen_operand .

    DET_ARR         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    TRANS_ARR       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    INV_ARR         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MULT            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DIV             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MOD             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    PLUS            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MINUS           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MORE            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    LESS            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    COMPARE         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DIFFERENT       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MOREEQUAL       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    LESSEQUAL       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    AND             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    OR              reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    RSTAPLE         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    COMA            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    RPAREN          reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    HACER           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DOTCOMA         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    HASTA           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    RBRACKET        reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)


state 115

    (72) CTE -> CTE_STRING r_seen_operand .

    DET_ARR         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    TRANS_ARR       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    INV_ARR         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MULT            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DIV             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MOD             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    PLUS            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MINUS           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MORE            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    LESS            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    COMPARE         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DIFFERENT       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MOREEQUAL       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    LESSEQUAL       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    AND             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    OR              reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    RSTAPLE         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    COMA            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    RPAREN          reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    HACER           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DOTCOMA         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    HASTA           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    RBRACKET        reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)


state 116

    (74) CTE -> ID r_seen_operand_id . ARRDIM
    (14) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE
    (15) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> . LSTAPLE EXPRESION COMA EXPRESION RSTAPLE
    (17) ARRDIM -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 39
    DET_ARR         reduce using rule 1 (empty -> .)
    TRANS_ARR       reduce using rule 1 (empty -> .)
    INV_ARR         reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 143
    empty                          shift and go to state 40

state 117

    (79) FUN -> ID r_check_func . LPAREN FUN_AUX RPAREN r_go_sub

    LPAREN          shift and go to state 144


state 118

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func . VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 145
    empty                          shift and go to state 8

state 119

    (22) PARAM -> TIPO . ID r_register_var PARENTESIS PARAM_AUX

    ID              shift and go to state 146


state 120

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 147


state 121

    (23) PARAM -> empty .

    RPAREN          reduce using rule 23 (PARAM -> empty .)


state 122

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 148
    TIPO                           shift and go to state 119
    empty                          shift and go to state 121

state 123

    (15) ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION . RSTAPLE

    RSTAPLE         shift and go to state 149


state 124

    (16) ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .

    DOTCOMA         reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    COMA            reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    DET_ARR         reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    TRANS_ARR       reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    INV_ARR         reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    MULT            reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    DIV             reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    MOD             reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    PLUS            reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    MINUS           reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    MORE            reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    LESS            reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    COMPARE         reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    DIFFERENT       reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    MOREEQUAL       reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    LESSEQUAL       reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    AND             reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    OR              reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    RSTAPLE         reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    RPAREN          reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    HACER           reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    HASTA           reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    RBRACKET        reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)
    EQUAL           reduce using rule 16 (ARRDIM -> LSTAPLE EXPRESION COMA EXPRESION RSTAPLE .)


state 125

    (41) EXPRESION_AUX -> AND r_seen_operator . EXPRESION
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 150
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 126

    (42) EXPRESION_AUX -> OR r_seen_operator . EXPRESION
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 151
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 127

    (45) SUBEXP_AUX -> COMPARACION SUBEXP .

    AND             reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    OR              reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    RSTAPLE         reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    COMA            reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    RPAREN          reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HACER           reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    DOTCOMA         reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HASTA           reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)


state 128

    (47) COMPARACION -> MORE r_seen_operator .

    NOT             reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    PLUS            reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    MINUS           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    LPAREN          reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_I           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_F           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_CH          reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_STRING      reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    ID              reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)


state 129

    (48) COMPARACION -> LESS r_seen_operator .

    NOT             reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    PLUS            reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    MINUS           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    LPAREN          reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_I           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_F           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_CH          reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_STRING      reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    ID              reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)


state 130

    (49) COMPARACION -> COMPARE r_seen_operator .

    NOT             reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    PLUS            reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    MINUS           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    LPAREN          reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_I           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_F           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_CH          reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_STRING      reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    ID              reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)


state 131

    (50) COMPARACION -> DIFFERENT r_seen_operator .

    NOT             reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    PLUS            reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    MINUS           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    LPAREN          reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_I           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_F           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_CH          reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_STRING      reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    ID              reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)


state 132

    (51) COMPARACION -> MOREEQUAL r_seen_operator .

    NOT             reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    PLUS            reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    MINUS           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    LPAREN          reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_I           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_F           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    ID              reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)


state 133

    (52) COMPARACION -> LESSEQUAL r_seen_operator .

    NOT             reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    PLUS            reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    MINUS           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    LPAREN          reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_I           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_F           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    ID              reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)


state 134

    (54) EXP_AUX -> PLUS r_seen_operator . EXP
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 152
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 135

    (55) EXP_AUX -> MINUS r_seen_operator . EXP
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 153
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 136

    (58) TERMINO_AUX -> MULT r_seen_operator . TERMINO
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 154
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 137

    (59) TERMINO_AUX -> DIV r_seen_operator . TERMINO r_seen_term
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 155
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 138

    (60) TERMINO_AUX -> MOD r_seen_operator . TERMINO r_seen_term
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 156
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 139

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION . RPAREN r_pop_fake_bottom

    RPAREN          shift and go to state 157


state 140

    (75) ARROP -> DET_ARR r_seen_operator_mat .

    MULT            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIV             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOD             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MORE            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESS            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    AND             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    OR              reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMA            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    HACER           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)


state 141

    (76) ARROP -> TRANS_ARR r_seen_operator_mat .

    MULT            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIV             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOD             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MORE            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESS            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    AND             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    OR              reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMA            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HACER           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)


state 142

    (77) ARROP -> INV_ARR r_seen_operator_mat .

    MULT            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIV             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOD             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MORE            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESS            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    AND             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    OR              reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMA            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    HACER           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)


state 143

    (74) CTE -> ID r_seen_operand_id ARRDIM .

    DET_ARR         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    TRANS_ARR       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    INV_ARR         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    MULT            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    DIV             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    MOD             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    PLUS            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    MINUS           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    MORE            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    LESS            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    COMPARE         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    DIFFERENT       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    MOREEQUAL       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    LESSEQUAL       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    AND             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    OR              reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    RSTAPLE         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    COMA            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    RPAREN          reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    HACER           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    DOTCOMA         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    HASTA           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)
    RBRACKET        reduce using rule 74 (CTE -> ID r_seen_operand_id ARRDIM .)


state 144

    (79) FUN -> ID r_check_func LPAREN . FUN_AUX RPAREN r_go_sub
    (80) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (81) FUN_AUX -> . EXPRESION r_check_param
    (82) FUN_AUX -> . empty
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55

    FUN_AUX                        shift and go to state 158
    EXPRESION                      shift and go to state 159
    empty                          shift and go to state 160
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53

state 145

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS . r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 161

state 146

    (22) PARAM -> TIPO ID . r_register_var PARENTESIS PARAM_AUX
    (121) r_register_var -> .

    LSTAPLE         reduce using rule 121 (r_register_var -> .)
    COMA            reduce using rule 121 (r_register_var -> .)
    RPAREN          reduce using rule 121 (r_register_var -> .)

    r_register_var                 shift and go to state 162

state 147

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 163

state 148

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 164


state 149

    (15) ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .

    DOTCOMA         reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    COMA            reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    DET_ARR         reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    TRANS_ARR       reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    INV_ARR         reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    MULT            reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    DIV             reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    MOD             reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    PLUS            reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    MINUS           reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    MORE            reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    LESS            reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    COMPARE         reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    DIFFERENT       reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    MOREEQUAL       reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    LESSEQUAL       reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    AND             reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    OR              reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    RSTAPLE         reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    RPAREN          reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    HACER           reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    HASTA           reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    RBRACKET        reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)
    EQUAL           reduce using rule 15 (ARRDIM -> LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE .)


state 150

    (41) EXPRESION_AUX -> AND r_seen_operator EXPRESION .

    RSTAPLE         reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    COMA            reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HACER           reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HASTA           reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)


state 151

    (42) EXPRESION_AUX -> OR r_seen_operator EXPRESION .

    RSTAPLE         reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    COMA            reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HACER           reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HASTA           reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)


state 152

    (54) EXP_AUX -> PLUS r_seen_operator EXP .

    MORE            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESS            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMPARE         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    AND             reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    OR              reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    RSTAPLE         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMA            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    RPAREN          reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HACER           reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HASTA           reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)


state 153

    (55) EXP_AUX -> MINUS r_seen_operator EXP .

    MORE            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESS            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMPARE         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    AND             reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    OR              reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    RSTAPLE         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMA            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    RPAREN          reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HACER           reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HASTA           reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)


state 154

    (58) TERMINO_AUX -> MULT r_seen_operator TERMINO .

    PLUS            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MINUS           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MORE            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    LESS            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    COMPARE         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    DIFFERENT       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MOREEQUAL       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    LESSEQUAL       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    AND             reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    OR              reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    RSTAPLE         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    COMA            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    RPAREN          reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    HACER           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    DOTCOMA         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    HASTA           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)


state 155

    (59) TERMINO_AUX -> DIV r_seen_operator TERMINO . r_seen_term
    (131) r_seen_term -> .

    PLUS            reduce using rule 131 (r_seen_term -> .)
    MINUS           reduce using rule 131 (r_seen_term -> .)
    MORE            reduce using rule 131 (r_seen_term -> .)
    LESS            reduce using rule 131 (r_seen_term -> .)
    COMPARE         reduce using rule 131 (r_seen_term -> .)
    DIFFERENT       reduce using rule 131 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_term -> .)
    AND             reduce using rule 131 (r_seen_term -> .)
    OR              reduce using rule 131 (r_seen_term -> .)
    RSTAPLE         reduce using rule 131 (r_seen_term -> .)
    COMA            reduce using rule 131 (r_seen_term -> .)
    RPAREN          reduce using rule 131 (r_seen_term -> .)
    HACER           reduce using rule 131 (r_seen_term -> .)
    DOTCOMA         reduce using rule 131 (r_seen_term -> .)
    HASTA           reduce using rule 131 (r_seen_term -> .)

    r_seen_term                    shift and go to state 165

state 156

    (60) TERMINO_AUX -> MOD r_seen_operator TERMINO . r_seen_term
    (131) r_seen_term -> .

    PLUS            reduce using rule 131 (r_seen_term -> .)
    MINUS           reduce using rule 131 (r_seen_term -> .)
    MORE            reduce using rule 131 (r_seen_term -> .)
    LESS            reduce using rule 131 (r_seen_term -> .)
    COMPARE         reduce using rule 131 (r_seen_term -> .)
    DIFFERENT       reduce using rule 131 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_term -> .)
    AND             reduce using rule 131 (r_seen_term -> .)
    OR              reduce using rule 131 (r_seen_term -> .)
    RSTAPLE         reduce using rule 131 (r_seen_term -> .)
    COMA            reduce using rule 131 (r_seen_term -> .)
    RPAREN          reduce using rule 131 (r_seen_term -> .)
    HACER           reduce using rule 131 (r_seen_term -> .)
    DOTCOMA         reduce using rule 131 (r_seen_term -> .)
    HASTA           reduce using rule 131 (r_seen_term -> .)

    r_seen_term                    shift and go to state 166

state 157

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN . r_pop_fake_bottom
    (134) r_pop_fake_bottom -> .

    MULT            reduce using rule 134 (r_pop_fake_bottom -> .)
    DIV             reduce using rule 134 (r_pop_fake_bottom -> .)
    MOD             reduce using rule 134 (r_pop_fake_bottom -> .)
    PLUS            reduce using rule 134 (r_pop_fake_bottom -> .)
    MINUS           reduce using rule 134 (r_pop_fake_bottom -> .)
    MORE            reduce using rule 134 (r_pop_fake_bottom -> .)
    LESS            reduce using rule 134 (r_pop_fake_bottom -> .)
    COMPARE         reduce using rule 134 (r_pop_fake_bottom -> .)
    DIFFERENT       reduce using rule 134 (r_pop_fake_bottom -> .)
    MOREEQUAL       reduce using rule 134 (r_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 134 (r_pop_fake_bottom -> .)
    AND             reduce using rule 134 (r_pop_fake_bottom -> .)
    OR              reduce using rule 134 (r_pop_fake_bottom -> .)
    RSTAPLE         reduce using rule 134 (r_pop_fake_bottom -> .)
    COMA            reduce using rule 134 (r_pop_fake_bottom -> .)
    RPAREN          reduce using rule 134 (r_pop_fake_bottom -> .)
    HACER           reduce using rule 134 (r_pop_fake_bottom -> .)
    DOTCOMA         reduce using rule 134 (r_pop_fake_bottom -> .)
    HASTA           reduce using rule 134 (r_pop_fake_bottom -> .)

    r_pop_fake_bottom              shift and go to state 167

state 158

    (79) FUN -> ID r_check_func LPAREN FUN_AUX . RPAREN r_go_sub

    RPAREN          shift and go to state 168


state 159

    (80) FUN_AUX -> EXPRESION . r_check_param COMA FUN_AUX
    (81) FUN_AUX -> EXPRESION . r_check_param
    (147) r_check_param -> .

    COMA            reduce using rule 147 (r_check_param -> .)
    RPAREN          reduce using rule 147 (r_check_param -> .)

    r_check_param                  shift and go to state 169

state 160

    (82) FUN_AUX -> empty .
    (68) SIGN -> empty .

    RPAREN          reduce using rule 82 (FUN_AUX -> empty .)
    LPAREN          reduce using rule 68 (SIGN -> empty .)
    CTE_I           reduce using rule 68 (SIGN -> empty .)
    CTE_F           reduce using rule 68 (SIGN -> empty .)
    CTE_CH          reduce using rule 68 (SIGN -> empty .)
    CTE_STRING      reduce using rule 68 (SIGN -> empty .)
    ID              reduce using rule 68 (SIGN -> empty .)


state 161

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars . r_end_princ r_func_set BLOQUE r_func_end
    (123) r_end_princ -> .

    LBRACKET        reduce using rule 123 (r_end_princ -> .)

    r_end_princ                    shift and go to state 170

state 162

    (22) PARAM -> TIPO ID r_register_var . PARENTESIS PARAM_AUX
    (26) PARENTESIS -> . LSTAPLE RSTAPLE
    (27) PARENTESIS -> . LSTAPLE RSTAPLE LSTAPLE RSTAPLE
    (28) PARENTESIS -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 172
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    PARENTESIS                     shift and go to state 171
    empty                          shift and go to state 173

state 163

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 174
    empty                          shift and go to state 8

state 164

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 175

state 165

    (59) TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    RSTAPLE         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)


state 166

    (60) TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    RSTAPLE         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)


state 167

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .

    MULT            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIV             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOD             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    PLUS            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MINUS           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MORE            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESS            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMPARE         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIFFERENT       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOREEQUAL       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESSEQUAL       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    AND             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    OR              reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    RSTAPLE         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMA            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    RPAREN          reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HACER           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DOTCOMA         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HASTA           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)


state 168

    (79) FUN -> ID r_check_func LPAREN FUN_AUX RPAREN . r_go_sub
    (148) r_go_sub -> .

    DET_ARR         reduce using rule 148 (r_go_sub -> .)
    TRANS_ARR       reduce using rule 148 (r_go_sub -> .)
    INV_ARR         reduce using rule 148 (r_go_sub -> .)
    MULT            reduce using rule 148 (r_go_sub -> .)
    DIV             reduce using rule 148 (r_go_sub -> .)
    MOD             reduce using rule 148 (r_go_sub -> .)
    PLUS            reduce using rule 148 (r_go_sub -> .)
    MINUS           reduce using rule 148 (r_go_sub -> .)
    MORE            reduce using rule 148 (r_go_sub -> .)
    LESS            reduce using rule 148 (r_go_sub -> .)
    COMPARE         reduce using rule 148 (r_go_sub -> .)
    DIFFERENT       reduce using rule 148 (r_go_sub -> .)
    MOREEQUAL       reduce using rule 148 (r_go_sub -> .)
    LESSEQUAL       reduce using rule 148 (r_go_sub -> .)
    AND             reduce using rule 148 (r_go_sub -> .)
    OR              reduce using rule 148 (r_go_sub -> .)
    RSTAPLE         reduce using rule 148 (r_go_sub -> .)
    COMA            reduce using rule 148 (r_go_sub -> .)
    RPAREN          reduce using rule 148 (r_go_sub -> .)
    HACER           reduce using rule 148 (r_go_sub -> .)
    DOTCOMA         reduce using rule 148 (r_go_sub -> .)
    HASTA           reduce using rule 148 (r_go_sub -> .)
    RBRACKET        reduce using rule 148 (r_go_sub -> .)

    r_go_sub                       shift and go to state 176

state 169

    (80) FUN_AUX -> EXPRESION r_check_param . COMA FUN_AUX
    (81) FUN_AUX -> EXPRESION r_check_param .

    COMA            shift and go to state 177
    RPAREN          reduce using rule 81 (FUN_AUX -> EXPRESION r_check_param .)


state 170

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 178

state 171

    (22) PARAM -> TIPO ID r_register_var PARENTESIS . PARAM_AUX
    (24) PARAM_AUX -> . COMA PARAM
    (25) PARAM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 180
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM_AUX                      shift and go to state 179
    empty                          shift and go to state 181

state 172

    (26) PARENTESIS -> LSTAPLE . RSTAPLE
    (27) PARENTESIS -> LSTAPLE . RSTAPLE LSTAPLE RSTAPLE

    RSTAPLE         shift and go to state 182


state 173

    (28) PARENTESIS -> empty .

    COMA            reduce using rule 28 (PARENTESIS -> empty .)
    RPAREN          reduce using rule 28 (PARENTESIS -> empty .)


state 174

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 183

state 175

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 184
    empty                          shift and go to state 8

state 176

    (79) FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .

    DET_ARR         reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    TRANS_ARR       reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    INV_ARR         reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MULT            reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DIV             reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MOD             reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    PLUS            reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MINUS           reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MORE            reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    LESS            reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    COMPARE         reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DIFFERENT       reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MOREEQUAL       reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    LESSEQUAL       reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    AND             reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    OR              reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    RSTAPLE         reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    COMA            reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    RPAREN          reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    HACER           reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DOTCOMA         reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    HASTA           reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    RBRACKET        reduce using rule 79 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)


state 177

    (80) FUN_AUX -> EXPRESION r_check_param COMA . FUN_AUX
    (80) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (81) FUN_AUX -> . EXPRESION r_check_param
    (82) FUN_AUX -> . empty
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55

    EXPRESION                      shift and go to state 159
    FUN_AUX                        shift and go to state 185
    empty                          shift and go to state 160
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53

state 178

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 187

    BLOQUE                         shift and go to state 186

state 179

    (22) PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX .

    RPAREN          reduce using rule 22 (PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX .)


state 180

    (24) PARAM_AUX -> COMA . PARAM
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 188
    TIPO                           shift and go to state 119
    empty                          shift and go to state 121

state 181

    (25) PARAM_AUX -> empty .

    RPAREN          reduce using rule 25 (PARAM_AUX -> empty .)


state 182

    (26) PARENTESIS -> LSTAPLE RSTAPLE .
    (27) PARENTESIS -> LSTAPLE RSTAPLE . LSTAPLE RSTAPLE

    COMA            reduce using rule 26 (PARENTESIS -> LSTAPLE RSTAPLE .)
    RPAREN          reduce using rule 26 (PARENTESIS -> LSTAPLE RSTAPLE .)
    LSTAPLE         shift and go to state 189


state 183

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 190

state 184

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 191

state 185

    (80) FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .

    RPAREN          reduce using rule 80 (FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .)


state 186

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    $end            reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 192

state 187

    (29) BLOQUE -> LBRACKET . ESTATUTOS RBRACKET
    (30) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (31) ESTATUTOS -> . empty
    (32) ESTATUTO -> . ASIGNACION DOTCOMA
    (33) ESTATUTO -> . FUN DOTCOMA
    (34) ESTATUTO -> . COND
    (35) ESTATUTO -> . WRITE DOTCOMA
    (36) ESTATUTO -> . READ DOTCOMA
    (37) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (38) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (99) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN r_escribe
    (103) READ -> . LEE LPAREN READ_AUX RPAREN r_lee
    (107) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> . REGRESA LPAREN NULL RPAREN
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 202
    ESCRIBE         shift and go to state 206
    LEE             shift and go to state 207
    REGRESA         shift and go to state 208
    SI              shift and go to state 209
    DESDE           shift and go to state 210
    MIENTRAS        shift and go to state 211

    ESTATUTOS                      shift and go to state 193
    ESTATUTO                       shift and go to state 194
    empty                          shift and go to state 195
    ASIGNACION                     shift and go to state 196
    FUN                            shift and go to state 197
    COND                           shift and go to state 198
    WRITE                          shift and go to state 199
    READ                           shift and go to state 200
    RETURN                         shift and go to state 201
    IF                             shift and go to state 203
    FOR                            shift and go to state 204
    WHILE                          shift and go to state 205

state 188

    (24) PARAM_AUX -> COMA PARAM .

    RPAREN          reduce using rule 24 (PARAM_AUX -> COMA PARAM .)


state 189

    (27) PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE . RSTAPLE

    RSTAPLE         shift and go to state 212


state 190

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 187

    BLOQUE                         shift and go to state 213

state 191

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 214

state 192

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .

    $end            reduce using rule 3 (MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .)


state 193

    (29) BLOQUE -> LBRACKET ESTATUTOS . RBRACKET

    RBRACKET        shift and go to state 215


state 194

    (30) ESTATUTOS -> ESTATUTO . ESTATUTOS
    (30) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (31) ESTATUTOS -> . empty
    (32) ESTATUTO -> . ASIGNACION DOTCOMA
    (33) ESTATUTO -> . FUN DOTCOMA
    (34) ESTATUTO -> . COND
    (35) ESTATUTO -> . WRITE DOTCOMA
    (36) ESTATUTO -> . READ DOTCOMA
    (37) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (38) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (99) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN r_escribe
    (103) READ -> . LEE LPAREN READ_AUX RPAREN r_lee
    (107) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> . REGRESA LPAREN NULL RPAREN
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 202
    ESCRIBE         shift and go to state 206
    LEE             shift and go to state 207
    REGRESA         shift and go to state 208
    SI              shift and go to state 209
    DESDE           shift and go to state 210
    MIENTRAS        shift and go to state 211

    ESTATUTO                       shift and go to state 194
    ESTATUTOS                      shift and go to state 216
    empty                          shift and go to state 195
    ASIGNACION                     shift and go to state 196
    FUN                            shift and go to state 197
    COND                           shift and go to state 198
    WRITE                          shift and go to state 199
    READ                           shift and go to state 200
    RETURN                         shift and go to state 201
    IF                             shift and go to state 203
    FOR                            shift and go to state 204
    WHILE                          shift and go to state 205

state 195

    (31) ESTATUTOS -> empty .

    RBRACKET        reduce using rule 31 (ESTATUTOS -> empty .)


state 196

    (32) ESTATUTO -> ASIGNACION . DOTCOMA

    DOTCOMA         shift and go to state 217


state 197

    (33) ESTATUTO -> FUN . DOTCOMA

    DOTCOMA         shift and go to state 218


state 198

    (34) ESTATUTO -> COND .

    ID              reduce using rule 34 (ESTATUTO -> COND .)
    ESCRIBE         reduce using rule 34 (ESTATUTO -> COND .)
    LEE             reduce using rule 34 (ESTATUTO -> COND .)
    REGRESA         reduce using rule 34 (ESTATUTO -> COND .)
    SI              reduce using rule 34 (ESTATUTO -> COND .)
    DESDE           reduce using rule 34 (ESTATUTO -> COND .)
    MIENTRAS        reduce using rule 34 (ESTATUTO -> COND .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> COND .)


state 199

    (35) ESTATUTO -> WRITE . DOTCOMA

    DOTCOMA         shift and go to state 219


state 200

    (36) ESTATUTO -> READ . DOTCOMA

    DOTCOMA         shift and go to state 220


state 201

    (37) ESTATUTO -> RETURN . DOTCOMA

    DOTCOMA         shift and go to state 221


state 202

    (38) ASIGNACION -> ID . r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID . r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR
    (79) FUN -> ID . r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (125) r_seen_operand_id -> .
    (146) r_check_func -> .

    LSTAPLE         reduce using rule 125 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 125 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 146 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 222
    r_check_func                   shift and go to state 117

state 203

    (83) COND -> IF .

    ID              reduce using rule 83 (COND -> IF .)
    ESCRIBE         reduce using rule 83 (COND -> IF .)
    LEE             reduce using rule 83 (COND -> IF .)
    REGRESA         reduce using rule 83 (COND -> IF .)
    SI              reduce using rule 83 (COND -> IF .)
    DESDE           reduce using rule 83 (COND -> IF .)
    MIENTRAS        reduce using rule 83 (COND -> IF .)
    RBRACKET        reduce using rule 83 (COND -> IF .)


state 204

    (84) COND -> FOR .

    ID              reduce using rule 84 (COND -> FOR .)
    ESCRIBE         reduce using rule 84 (COND -> FOR .)
    LEE             reduce using rule 84 (COND -> FOR .)
    REGRESA         reduce using rule 84 (COND -> FOR .)
    SI              reduce using rule 84 (COND -> FOR .)
    DESDE           reduce using rule 84 (COND -> FOR .)
    MIENTRAS        reduce using rule 84 (COND -> FOR .)
    RBRACKET        reduce using rule 84 (COND -> FOR .)


state 205

    (85) COND -> WHILE .

    ID              reduce using rule 85 (COND -> WHILE .)
    ESCRIBE         reduce using rule 85 (COND -> WHILE .)
    LEE             reduce using rule 85 (COND -> WHILE .)
    REGRESA         reduce using rule 85 (COND -> WHILE .)
    SI              reduce using rule 85 (COND -> WHILE .)
    DESDE           reduce using rule 85 (COND -> WHILE .)
    MIENTRAS        reduce using rule 85 (COND -> WHILE .)
    RBRACKET        reduce using rule 85 (COND -> WHILE .)


state 206

    (99) WRITE -> ESCRIBE . LPAREN WRITE_AUX RPAREN r_escribe

    LPAREN          shift and go to state 223


state 207

    (103) READ -> LEE . LPAREN READ_AUX RPAREN r_lee

    LPAREN          shift and go to state 224


state 208

    (107) RETURN -> REGRESA . LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> REGRESA . LPAREN NULL RPAREN

    LPAREN          shift and go to state 225


state 209

    (86) IF -> SI . LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end

    LPAREN          shift and go to state 226


state 210

    (96) FOR -> DESDE . ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (38) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR

    ID              shift and go to state 228

    ASIGNACION                     shift and go to state 227

state 211

    (91) WHILE -> MIENTRAS . r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (138) r_set_while -> .

    LPAREN          reduce using rule 138 (r_set_while -> .)

    r_set_while                    shift and go to state 229

state 212

    (27) PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .

    COMA            reduce using rule 27 (PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .)
    RPAREN          reduce using rule 27 (PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .)


state 213

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    FUNCION         reduce using rule 145 (r_func_end -> .)
    PRINCIPAL       reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 230

state 214

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 187

    BLOQUE                         shift and go to state 231

state 215

    (29) BLOQUE -> LBRACKET ESTATUTOS RBRACKET .

    $end            reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    FUNCION         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    PRINCIPAL       reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SINO            reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ID              reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ESCRIBE         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    LEE             reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    REGRESA         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SI              reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    DESDE           reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    MIENTRAS        reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    RBRACKET        reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)


state 216

    (30) ESTATUTOS -> ESTATUTO ESTATUTOS .

    RBRACKET        reduce using rule 30 (ESTATUTOS -> ESTATUTO ESTATUTOS .)


state 217

    (32) ESTATUTO -> ASIGNACION DOTCOMA .

    ID              reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    ESCRIBE         reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    LEE             reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    REGRESA         reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    SI              reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    DESDE           reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    MIENTRAS        reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    RBRACKET        reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)


state 218

    (33) ESTATUTO -> FUN DOTCOMA .

    ID              reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    ESCRIBE         reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    LEE             reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    REGRESA         reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    SI              reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    DESDE           reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    MIENTRAS        reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)


state 219

    (35) ESTATUTO -> WRITE DOTCOMA .

    ID              reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    ESCRIBE         reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    LEE             reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    REGRESA         reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    SI              reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    DESDE           reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    MIENTRAS        reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)


state 220

    (36) ESTATUTO -> READ DOTCOMA .

    ID              reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    ESCRIBE         reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    LEE             reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    REGRESA         reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    SI              reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    DESDE           reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    MIENTRAS        reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)


state 221

    (37) ESTATUTO -> RETURN DOTCOMA .

    ID              reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    ESCRIBE         reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    LEE             reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    REGRESA         reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    SI              reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    DESDE           reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    MIENTRAS        reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)


state 222

    (38) ASIGNACION -> ID r_seen_operand_id . ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id . ARRDIM EQUAL r_seen_operator CTE_ARR
    (14) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE
    (15) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> . LSTAPLE EXPRESION COMA EXPRESION RSTAPLE
    (17) ARRDIM -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 39
    EQUAL           reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 232
    empty                          shift and go to state 40

state 223

    (99) WRITE -> ESCRIBE LPAREN . WRITE_AUX RPAREN r_escribe
    (100) WRITE_AUX -> . EXPRESION WRITE_AUXSUB
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 233
    EXPRESION                      shift and go to state 234
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 224

    (103) READ -> LEE LPAREN . READ_AUX RPAREN r_lee
    (104) READ_AUX -> . ID r_seen_operand_id ARRDIM READ_AUXSUB

    ID              shift and go to state 236

    READ_AUX                       shift and go to state 235

state 225

    (107) RETURN -> REGRESA LPAREN . EXPRESION RPAREN r_regresa
    (108) RETURN -> REGRESA LPAREN . NULL RPAREN
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NULL            shift and go to state 238
    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 237
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 226

    (86) IF -> SI LPAREN . EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 239
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 227

    (96) FOR -> DESDE ASIGNACION . HASTA EXPRESION r_for_gen HACER FOR2 r_for_end

    HASTA           shift and go to state 240


state 228

    (38) ASIGNACION -> ID . r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID . r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR
    (125) r_seen_operand_id -> .

    LSTAPLE         reduce using rule 125 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 125 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 222

state 229

    (91) WHILE -> MIENTRAS r_set_while . LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LPAREN          shift and go to state 241


state 230

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 231

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    FUNCION         reduce using rule 145 (r_func_end -> .)
    PRINCIPAL       reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 242

state 232

    (38) ASIGNACION -> ID r_seen_operand_id ARRDIM . EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRDIM . EQUAL r_seen_operator CTE_ARR

    EQUAL           shift and go to state 243


state 233

    (99) WRITE -> ESCRIBE LPAREN WRITE_AUX . RPAREN r_escribe

    RPAREN          shift and go to state 244


state 234

    (100) WRITE_AUX -> EXPRESION . WRITE_AUXSUB
    (101) WRITE_AUXSUB -> . COMA WRITE_AUX
    (102) WRITE_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 246
    RPAREN          reduce using rule 1 (empty -> .)

    WRITE_AUXSUB                   shift and go to state 245
    empty                          shift and go to state 247

state 235

    (103) READ -> LEE LPAREN READ_AUX . RPAREN r_lee

    RPAREN          shift and go to state 248


state 236

    (104) READ_AUX -> ID . r_seen_operand_id ARRDIM READ_AUXSUB
    (125) r_seen_operand_id -> .

    LSTAPLE         reduce using rule 125 (r_seen_operand_id -> .)
    COMA            reduce using rule 125 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 125 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 249

state 237

    (107) RETURN -> REGRESA LPAREN EXPRESION . RPAREN r_regresa

    RPAREN          shift and go to state 250


state 238

    (108) RETURN -> REGRESA LPAREN NULL . RPAREN

    RPAREN          shift and go to state 251


state 239

    (86) IF -> SI LPAREN EXPRESION . r_check_int RPAREN ENTONCES IF2 r_if_end
    (135) r_check_int -> .

    RPAREN          reduce using rule 135 (r_check_int -> .)

    r_check_int                    shift and go to state 252

state 240

    (96) FOR -> DESDE ASIGNACION HASTA . EXPRESION r_for_gen HACER FOR2 r_for_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 253
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 241

    (91) WHILE -> MIENTRAS r_set_while LPAREN . EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 254
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 242

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 243

    (38) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL . r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL . r_seen_operator CTE_ARR
    (126) r_seen_operator -> .

    LBRACKET        reduce using rule 126 (r_seen_operator -> .)
    NOT             reduce using rule 126 (r_seen_operator -> .)
    PLUS            reduce using rule 126 (r_seen_operator -> .)
    MINUS           reduce using rule 126 (r_seen_operator -> .)
    LPAREN          reduce using rule 126 (r_seen_operator -> .)
    CTE_I           reduce using rule 126 (r_seen_operator -> .)
    CTE_F           reduce using rule 126 (r_seen_operator -> .)
    CTE_CH          reduce using rule 126 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 126 (r_seen_operator -> .)
    ID              reduce using rule 126 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 255

state 244

    (99) WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN . r_escribe
    (151) r_escribe -> .

    DOTCOMA         reduce using rule 151 (r_escribe -> .)

    r_escribe                      shift and go to state 256

state 245

    (100) WRITE_AUX -> EXPRESION WRITE_AUXSUB .

    RPAREN          reduce using rule 100 (WRITE_AUX -> EXPRESION WRITE_AUXSUB .)


state 246

    (101) WRITE_AUXSUB -> COMA . WRITE_AUX
    (100) WRITE_AUX -> . EXPRESION WRITE_AUXSUB
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 257
    EXPRESION                      shift and go to state 234
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 247

    (102) WRITE_AUXSUB -> empty .

    RPAREN          reduce using rule 102 (WRITE_AUXSUB -> empty .)


state 248

    (103) READ -> LEE LPAREN READ_AUX RPAREN . r_lee
    (152) r_lee -> .

    DOTCOMA         reduce using rule 152 (r_lee -> .)

    r_lee                          shift and go to state 258

state 249

    (104) READ_AUX -> ID r_seen_operand_id . ARRDIM READ_AUXSUB
    (14) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE
    (15) ARRDIM -> . LSTAPLE EXPRESION RSTAPLE LSTAPLE EXPRESION RSTAPLE
    (16) ARRDIM -> . LSTAPLE EXPRESION COMA EXPRESION RSTAPLE
    (17) ARRDIM -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 39
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 259
    empty                          shift and go to state 40

state 250

    (107) RETURN -> REGRESA LPAREN EXPRESION RPAREN . r_regresa
    (150) r_regresa -> .

    DOTCOMA         reduce using rule 150 (r_regresa -> .)

    r_regresa                      shift and go to state 260

state 251

    (108) RETURN -> REGRESA LPAREN NULL RPAREN .

    DOTCOMA         reduce using rule 108 (RETURN -> REGRESA LPAREN NULL RPAREN .)


state 252

    (86) IF -> SI LPAREN EXPRESION r_check_int . RPAREN ENTONCES IF2 r_if_end

    RPAREN          shift and go to state 261


state 253

    (96) FOR -> DESDE ASIGNACION HASTA EXPRESION . r_for_gen HACER FOR2 r_for_end
    (140) r_for_gen -> .

    HACER           reduce using rule 140 (r_for_gen -> .)

    r_for_gen                      shift and go to state 262

state 254

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION . r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (135) r_check_int -> .

    RPAREN          reduce using rule 135 (r_check_int -> .)

    r_check_int                    shift and go to state 263

state 255

    (38) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator . EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator . CTE_ARR
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (109) CTE_ARR -> . LBRACKET CTE_ARR_AUX RBRACKET
    (110) CTE_ARR -> . LBRACKET CTE_ARR_AUX2 RBRACKET
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    LBRACKET        shift and go to state 266
    NOT             shift and go to state 51
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 264
    CTE_ARR                        shift and go to state 265
    SUBEXP                         shift and go to state 47
    EXP                            shift and go to state 48
    TERMINO                        shift and go to state 49
    FACTOR                         shift and go to state 50
    FACTOR_AUX                     shift and go to state 52
    SIGN                           shift and go to state 53
    empty                          shift and go to state 56

state 256

    (99) WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN r_escribe .

    DOTCOMA         reduce using rule 99 (WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN r_escribe .)


state 257

    (101) WRITE_AUXSUB -> COMA WRITE_AUX .

    RPAREN          reduce using rule 101 (WRITE_AUXSUB -> COMA WRITE_AUX .)


state 258

    (103) READ -> LEE LPAREN READ_AUX RPAREN r_lee .

    DOTCOMA         reduce using rule 103 (READ -> LEE LPAREN READ_AUX RPAREN r_lee .)


state 259

    (104) READ_AUX -> ID r_seen_operand_id ARRDIM . READ_AUXSUB
    (105) READ_AUXSUB -> . COMA READ_AUX
    (106) READ_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 268
    RPAREN          reduce using rule 1 (empty -> .)

    READ_AUXSUB                    shift and go to state 267
    empty                          shift and go to state 269

state 260

    (107) RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .

    DOTCOMA         reduce using rule 107 (RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .)


state 261

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN . ENTONCES IF2 r_if_end

    ENTONCES        shift and go to state 270


state 262

    (96) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen . HACER FOR2 r_for_end

    HACER           shift and go to state 271


state 263

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int . RPAREN WHILE_AUX WHILE2 r_while_end

    RPAREN          shift and go to state 272


state 264

    (38) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION . r_seen_equal
    (128) r_seen_equal -> .

    DOTCOMA         reduce using rule 128 (r_seen_equal -> .)
    HASTA           reduce using rule 128 (r_seen_equal -> .)

    r_seen_equal                   shift and go to state 273

state 265

    (39) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR .

    DOTCOMA         reduce using rule 39 (ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR .)
    HASTA           reduce using rule 39 (ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator CTE_ARR .)


state 266

    (109) CTE_ARR -> LBRACKET . CTE_ARR_AUX RBRACKET
    (110) CTE_ARR -> LBRACKET . CTE_ARR_AUX2 RBRACKET
    (111) CTE_ARR_AUX -> . CTE
    (112) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (115) CTE_ARR_AUX2 -> . LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
    (69) CTE -> . CTE_I r_seen_operand
    (70) CTE -> . CTE_F r_seen_operand
    (71) CTE -> . CTE_CH r_seen_operand
    (72) CTE -> . CTE_STRING r_seen_operand
    (73) CTE -> . FUN
    (74) CTE -> . ID r_seen_operand_id ARRDIM
    (113) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (114) CTE_ARR_AUXSUB -> . empty
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    LBRACKET        shift and go to state 274
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 71
    CTE_CH          shift and go to state 72
    CTE_STRING      shift and go to state 73
    ID              shift and go to state 75
    COMA            shift and go to state 279
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 275
    CTE_ARR_AUX2                   shift and go to state 276
    CTE                            shift and go to state 277
    CTE_ARR_AUXSUB                 shift and go to state 278
    FUN                            shift and go to state 74
    empty                          shift and go to state 280

state 267

    (104) READ_AUX -> ID r_seen_operand_id ARRDIM READ_AUXSUB .

    RPAREN          reduce using rule 104 (READ_AUX -> ID r_seen_operand_id ARRDIM READ_AUXSUB .)


state 268

    (105) READ_AUXSUB -> COMA . READ_AUX
    (104) READ_AUX -> . ID r_seen_operand_id ARRDIM READ_AUXSUB

    ID              shift and go to state 236

    READ_AUX                       shift and go to state 281

state 269

    (106) READ_AUXSUB -> empty .

    RPAREN          reduce using rule 106 (READ_AUXSUB -> empty .)


state 270

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES . IF2 r_if_end
    (87) IF2 -> . BLOQUE IF_AUX
    (88) IF2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 187
    SI              shift and go to state 209
    DESDE           shift and go to state 210
    MIENTRAS        shift and go to state 211

    IF2                            shift and go to state 282
    BLOQUE                         shift and go to state 283
    COND                           shift and go to state 284
    IF                             shift and go to state 203
    FOR                            shift and go to state 204
    WHILE                          shift and go to state 205

state 271

    (96) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER . FOR2 r_for_end
    (97) FOR2 -> . BLOQUE
    (98) FOR2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 187
    SI              shift and go to state 209
    DESDE           shift and go to state 210
    MIENTRAS        shift and go to state 211

    FOR2                           shift and go to state 285
    BLOQUE                         shift and go to state 286
    COND                           shift and go to state 287
    IF                             shift and go to state 203
    FOR                            shift and go to state 204
    WHILE                          shift and go to state 205

state 272

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN . WHILE_AUX WHILE2 r_while_end
    (94) WHILE_AUX -> . HAZ
    (95) WHILE_AUX -> . empty
    (1) empty -> .

    HAZ             shift and go to state 289
    LBRACKET        reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)

    WHILE_AUX                      shift and go to state 288
    empty                          shift and go to state 290

state 273

    (38) ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal .

    DOTCOMA         reduce using rule 38 (ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal .)
    HASTA           reduce using rule 38 (ASIGNACION -> ID r_seen_operand_id ARRDIM EQUAL r_seen_operator EXPRESION r_seen_equal .)


state 274

    (115) CTE_ARR_AUX2 -> LBRACKET . CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
    (111) CTE_ARR_AUX -> . CTE
    (112) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (69) CTE -> . CTE_I r_seen_operand
    (70) CTE -> . CTE_F r_seen_operand
    (71) CTE -> . CTE_CH r_seen_operand
    (72) CTE -> . CTE_STRING r_seen_operand
    (73) CTE -> . FUN
    (74) CTE -> . ID r_seen_operand_id ARRDIM
    (113) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (114) CTE_ARR_AUXSUB -> . empty
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 71
    CTE_CH          shift and go to state 72
    CTE_STRING      shift and go to state 73
    ID              shift and go to state 75
    COMA            shift and go to state 279
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 291
    CTE                            shift and go to state 277
    CTE_ARR_AUXSUB                 shift and go to state 278
    FUN                            shift and go to state 74
    empty                          shift and go to state 280

state 275

    (109) CTE_ARR -> LBRACKET CTE_ARR_AUX . RBRACKET

    RBRACKET        shift and go to state 292


state 276

    (110) CTE_ARR -> LBRACKET CTE_ARR_AUX2 . RBRACKET

    RBRACKET        shift and go to state 293


state 277

    (111) CTE_ARR_AUX -> CTE .

    RBRACKET        reduce using rule 111 (CTE_ARR_AUX -> CTE .)


state 278

    (112) CTE_ARR_AUX -> CTE_ARR_AUXSUB .

    RBRACKET        reduce using rule 112 (CTE_ARR_AUX -> CTE_ARR_AUXSUB .)


state 279

    (113) CTE_ARR_AUXSUB -> COMA . CTE_ARR_AUX
    (111) CTE_ARR_AUX -> . CTE
    (112) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (69) CTE -> . CTE_I r_seen_operand
    (70) CTE -> . CTE_F r_seen_operand
    (71) CTE -> . CTE_CH r_seen_operand
    (72) CTE -> . CTE_STRING r_seen_operand
    (73) CTE -> . FUN
    (74) CTE -> . ID r_seen_operand_id ARRDIM
    (113) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (114) CTE_ARR_AUXSUB -> . empty
    (79) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 71
    CTE_CH          shift and go to state 72
    CTE_STRING      shift and go to state 73
    ID              shift and go to state 75
    COMA            shift and go to state 279
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 294
    CTE                            shift and go to state 277
    CTE_ARR_AUXSUB                 shift and go to state 278
    FUN                            shift and go to state 74
    empty                          shift and go to state 280

state 280

    (114) CTE_ARR_AUXSUB -> empty .

    RBRACKET        reduce using rule 114 (CTE_ARR_AUXSUB -> empty .)


state 281

    (105) READ_AUXSUB -> COMA READ_AUX .

    RPAREN          reduce using rule 105 (READ_AUXSUB -> COMA READ_AUX .)


state 282

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 . r_if_end
    (136) r_if_end -> .

    ID              reduce using rule 136 (r_if_end -> .)
    ESCRIBE         reduce using rule 136 (r_if_end -> .)
    LEE             reduce using rule 136 (r_if_end -> .)
    REGRESA         reduce using rule 136 (r_if_end -> .)
    SI              reduce using rule 136 (r_if_end -> .)
    DESDE           reduce using rule 136 (r_if_end -> .)
    MIENTRAS        reduce using rule 136 (r_if_end -> .)
    RBRACKET        reduce using rule 136 (r_if_end -> .)

    r_if_end                       shift and go to state 295

state 283

    (87) IF2 -> BLOQUE . IF_AUX
    (89) IF_AUX -> . SINO r_else_start BLOQUE
    (90) IF_AUX -> . empty
    (1) empty -> .

    SINO            shift and go to state 297
    ID              reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    IF_AUX                         shift and go to state 296
    empty                          shift and go to state 298

state 284

    (88) IF2 -> COND .

    ID              reduce using rule 88 (IF2 -> COND .)
    ESCRIBE         reduce using rule 88 (IF2 -> COND .)
    LEE             reduce using rule 88 (IF2 -> COND .)
    REGRESA         reduce using rule 88 (IF2 -> COND .)
    SI              reduce using rule 88 (IF2 -> COND .)
    DESDE           reduce using rule 88 (IF2 -> COND .)
    MIENTRAS        reduce using rule 88 (IF2 -> COND .)
    RBRACKET        reduce using rule 88 (IF2 -> COND .)


state 285

    (96) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 . r_for_end
    (141) r_for_end -> .

    ID              reduce using rule 141 (r_for_end -> .)
    ESCRIBE         reduce using rule 141 (r_for_end -> .)
    LEE             reduce using rule 141 (r_for_end -> .)
    REGRESA         reduce using rule 141 (r_for_end -> .)
    SI              reduce using rule 141 (r_for_end -> .)
    DESDE           reduce using rule 141 (r_for_end -> .)
    MIENTRAS        reduce using rule 141 (r_for_end -> .)
    RBRACKET        reduce using rule 141 (r_for_end -> .)

    r_for_end                      shift and go to state 299

state 286

    (97) FOR2 -> BLOQUE .

    ID              reduce using rule 97 (FOR2 -> BLOQUE .)
    ESCRIBE         reduce using rule 97 (FOR2 -> BLOQUE .)
    LEE             reduce using rule 97 (FOR2 -> BLOQUE .)
    REGRESA         reduce using rule 97 (FOR2 -> BLOQUE .)
    SI              reduce using rule 97 (FOR2 -> BLOQUE .)
    DESDE           reduce using rule 97 (FOR2 -> BLOQUE .)
    MIENTRAS        reduce using rule 97 (FOR2 -> BLOQUE .)
    RBRACKET        reduce using rule 97 (FOR2 -> BLOQUE .)


state 287

    (98) FOR2 -> COND .

    ID              reduce using rule 98 (FOR2 -> COND .)
    ESCRIBE         reduce using rule 98 (FOR2 -> COND .)
    LEE             reduce using rule 98 (FOR2 -> COND .)
    REGRESA         reduce using rule 98 (FOR2 -> COND .)
    SI              reduce using rule 98 (FOR2 -> COND .)
    DESDE           reduce using rule 98 (FOR2 -> COND .)
    MIENTRAS        reduce using rule 98 (FOR2 -> COND .)
    RBRACKET        reduce using rule 98 (FOR2 -> COND .)


state 288

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX . WHILE2 r_while_end
    (92) WHILE2 -> . BLOQUE
    (93) WHILE2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 187
    SI              shift and go to state 209
    DESDE           shift and go to state 210
    MIENTRAS        shift and go to state 211

    WHILE2                         shift and go to state 300
    BLOQUE                         shift and go to state 301
    COND                           shift and go to state 302
    IF                             shift and go to state 203
    FOR                            shift and go to state 204
    WHILE                          shift and go to state 205

state 289

    (94) WHILE_AUX -> HAZ .

    LBRACKET        reduce using rule 94 (WHILE_AUX -> HAZ .)
    SI              reduce using rule 94 (WHILE_AUX -> HAZ .)
    DESDE           reduce using rule 94 (WHILE_AUX -> HAZ .)
    MIENTRAS        reduce using rule 94 (WHILE_AUX -> HAZ .)


state 290

    (95) WHILE_AUX -> empty .

    LBRACKET        reduce using rule 95 (WHILE_AUX -> empty .)
    SI              reduce using rule 95 (WHILE_AUX -> empty .)
    DESDE           reduce using rule 95 (WHILE_AUX -> empty .)
    MIENTRAS        reduce using rule 95 (WHILE_AUX -> empty .)


state 291

    (115) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX . RBRACKET CTE_ARR_AUX2SUB

    RBRACKET        shift and go to state 303


state 292

    (109) CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .

    DOTCOMA         reduce using rule 109 (CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .)
    HASTA           reduce using rule 109 (CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .)


state 293

    (110) CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .

    DOTCOMA         reduce using rule 110 (CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .)
    HASTA           reduce using rule 110 (CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .)


state 294

    (113) CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX .

    RBRACKET        reduce using rule 113 (CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX .)


state 295

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .

    ID              reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    ESCRIBE         reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    LEE             reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    REGRESA         reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    SI              reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    DESDE           reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    MIENTRAS        reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    RBRACKET        reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)


state 296

    (87) IF2 -> BLOQUE IF_AUX .

    ID              reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    ESCRIBE         reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    LEE             reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    REGRESA         reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    SI              reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    DESDE           reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    MIENTRAS        reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    RBRACKET        reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)


state 297

    (89) IF_AUX -> SINO . r_else_start BLOQUE
    (137) r_else_start -> .

    LBRACKET        reduce using rule 137 (r_else_start -> .)

    r_else_start                   shift and go to state 304

state 298

    (90) IF_AUX -> empty .

    ID              reduce using rule 90 (IF_AUX -> empty .)
    ESCRIBE         reduce using rule 90 (IF_AUX -> empty .)
    LEE             reduce using rule 90 (IF_AUX -> empty .)
    REGRESA         reduce using rule 90 (IF_AUX -> empty .)
    SI              reduce using rule 90 (IF_AUX -> empty .)
    DESDE           reduce using rule 90 (IF_AUX -> empty .)
    MIENTRAS        reduce using rule 90 (IF_AUX -> empty .)
    RBRACKET        reduce using rule 90 (IF_AUX -> empty .)


state 299

    (96) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .

    ID              reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    ESCRIBE         reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    LEE             reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    REGRESA         reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    SI              reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    DESDE           reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    MIENTRAS        reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    RBRACKET        reduce using rule 96 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)


state 300

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 . r_while_end
    (139) r_while_end -> .

    ID              reduce using rule 139 (r_while_end -> .)
    ESCRIBE         reduce using rule 139 (r_while_end -> .)
    LEE             reduce using rule 139 (r_while_end -> .)
    REGRESA         reduce using rule 139 (r_while_end -> .)
    SI              reduce using rule 139 (r_while_end -> .)
    DESDE           reduce using rule 139 (r_while_end -> .)
    MIENTRAS        reduce using rule 139 (r_while_end -> .)
    RBRACKET        reduce using rule 139 (r_while_end -> .)

    r_while_end                    shift and go to state 305

state 301

    (92) WHILE2 -> BLOQUE .

    ID              reduce using rule 92 (WHILE2 -> BLOQUE .)
    ESCRIBE         reduce using rule 92 (WHILE2 -> BLOQUE .)
    LEE             reduce using rule 92 (WHILE2 -> BLOQUE .)
    REGRESA         reduce using rule 92 (WHILE2 -> BLOQUE .)
    SI              reduce using rule 92 (WHILE2 -> BLOQUE .)
    DESDE           reduce using rule 92 (WHILE2 -> BLOQUE .)
    MIENTRAS        reduce using rule 92 (WHILE2 -> BLOQUE .)
    RBRACKET        reduce using rule 92 (WHILE2 -> BLOQUE .)


state 302

    (93) WHILE2 -> COND .

    ID              reduce using rule 93 (WHILE2 -> COND .)
    ESCRIBE         reduce using rule 93 (WHILE2 -> COND .)
    LEE             reduce using rule 93 (WHILE2 -> COND .)
    REGRESA         reduce using rule 93 (WHILE2 -> COND .)
    SI              reduce using rule 93 (WHILE2 -> COND .)
    DESDE           reduce using rule 93 (WHILE2 -> COND .)
    MIENTRAS        reduce using rule 93 (WHILE2 -> COND .)
    RBRACKET        reduce using rule 93 (WHILE2 -> COND .)


state 303

    (115) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET . CTE_ARR_AUX2SUB
    (116) CTE_ARR_AUX2SUB -> . COMA CTE_ARR_AUX2
    (117) CTE_ARR_AUX2SUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 307
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX2SUB                shift and go to state 306
    empty                          shift and go to state 308

state 304

    (89) IF_AUX -> SINO r_else_start . BLOQUE
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 187

    BLOQUE                         shift and go to state 309

state 305

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .

    ID              reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    ESCRIBE         reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    LEE             reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    REGRESA         reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    SI              reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    DESDE           reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    MIENTRAS        reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    RBRACKET        reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)


state 306

    (115) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB .

    RBRACKET        reduce using rule 115 (CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB .)


state 307

    (116) CTE_ARR_AUX2SUB -> COMA . CTE_ARR_AUX2
    (115) CTE_ARR_AUX2 -> . LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB

    LBRACKET        shift and go to state 274

    CTE_ARR_AUX2                   shift and go to state 310

state 308

    (117) CTE_ARR_AUX2SUB -> empty .

    RBRACKET        reduce using rule 117 (CTE_ARR_AUX2SUB -> empty .)


state 309

    (89) IF_AUX -> SINO r_else_start BLOQUE .

    ID              reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    ESCRIBE         reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    LEE             reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    REGRESA         reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    SI              reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    DESDE           reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    MIENTRAS        reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    RBRACKET        reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)


state 310

    (116) CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2 .

    RBRACKET        reduce using rule 116 (CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2 .)

