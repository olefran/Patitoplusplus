Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     empty -> <empty>
Rule 2     PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
Rule 3     MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
Rule 4     VARS -> VAR VAR_AUX
Rule 5     VARS -> empty
Rule 6     VAR_AUX -> TIPO IDS VAR_AUX
Rule 7     VAR_AUX -> empty
Rule 8     TIPO -> INT r_save_type
Rule 9     TIPO -> FLOAT r_save_type
Rule 10    TIPO -> CHAR r_save_type
Rule 11    TIPO -> STRING r_save_type
Rule 12    IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA
Rule 13    IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS
Rule 14    ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
Rule 15    ARRDIM -> empty
Rule 16    ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX
Rule 17    ARRDIM_AUX -> empty
Rule 18    FUNCTIONS -> FUNCTION FUNCTIONS
Rule 19    FUNCTIONS -> empty
Rule 20    FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 21    FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 22    PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX
Rule 23    PARAM -> empty
Rule 24    PARAM_AUX -> COMA PARAM
Rule 25    PARAM_AUX -> empty
Rule 26    PARENTESIS -> LSTAPLE RSTAPLE
Rule 27    PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE
Rule 28    PARENTESIS -> empty
Rule 29    BLOQUE -> LBRACKET ESTATUTOS RBRACKET
Rule 30    ESTATUTOS -> ESTATUTO ESTATUTOS
Rule 31    ESTATUTOS -> empty
Rule 32    ESTATUTO -> ASIGNACION DOTCOMA
Rule 33    ESTATUTO -> FUN DOTCOMA
Rule 34    ESTATUTO -> COND
Rule 35    ESTATUTO -> WRITE DOTCOMA
Rule 36    ESTATUTO -> READ DOTCOMA
Rule 37    ESTATUTO -> RETURN DOTCOMA
Rule 38    ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
Rule 39    ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR
Rule 40    ARRACC -> LSTAPLE CTE_I ARRACC_AUX RSTAPLE ARRACC_AUX
Rule 41    ARRACC -> empty
Rule 42    ARRACC_AUX -> COMA CTE_I ARRACC_AUX
Rule 43    ARRACC_AUX -> empty
Rule 44    EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX
Rule 45    EXPRESION_AUX -> AND r_seen_operator EXPRESION
Rule 46    EXPRESION_AUX -> OR r_seen_operator EXPRESION
Rule 47    EXPRESION_AUX -> empty
Rule 48    SUBEXP -> EXP r_seen_exp SUBEXP_AUX
Rule 49    SUBEXP_AUX -> COMPARACION SUBEXP
Rule 50    SUBEXP_AUX -> empty
Rule 51    COMPARACION -> MORE r_seen_operator
Rule 52    COMPARACION -> LESS r_seen_operator
Rule 53    COMPARACION -> COMPARE r_seen_operator
Rule 54    COMPARACION -> DIFFERENT r_seen_operator
Rule 55    COMPARACION -> MOREEQUAL r_seen_operator
Rule 56    COMPARACION -> LESSEQUAL r_seen_operator
Rule 57    EXP -> TERMINO r_seen_term EXP_AUX
Rule 58    EXP_AUX -> PLUS r_seen_operator EXP
Rule 59    EXP_AUX -> MINUS r_seen_operator EXP
Rule 60    EXP_AUX -> empty
Rule 61    TERMINO -> FACTOR r_seen_factor TERMINO_AUX
Rule 62    TERMINO_AUX -> MULT r_seen_operator TERMINO
Rule 63    TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term
Rule 64    TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term
Rule 65    TERMINO_AUX -> empty
Rule 66    FACTOR -> NOT r_seen_unary_operator FACTOR_AUX
Rule 67    FACTOR -> FACTOR_AUX
Rule 68    FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
Rule 69    FACTOR_AUX -> SIGN CTE ARROP
Rule 70    SIGN -> PLUS r_seen_unary_operator
Rule 71    SIGN -> MINUS r_seen_unary_operator
Rule 72    SIGN -> empty
Rule 73    CTE -> CTE_I r_seen_operand
Rule 74    CTE -> CTE_F r_seen_operand
Rule 75    CTE -> CTE_CH r_seen_operand
Rule 76    CTE -> CTE_STRING r_seen_operand
Rule 77    CTE -> FUN
Rule 78    CTE -> ID r_seen_operand_id ARRDIM
Rule 79    ARROP -> DET_ARR r_seen_operator_mat
Rule 80    ARROP -> TRANS_ARR r_seen_operator_mat
Rule 81    ARROP -> INV_ARR r_seen_operator_mat
Rule 82    ARROP -> empty
Rule 83    FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
Rule 84    FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX
Rule 85    FUN_AUX -> EXPRESION r_check_param
Rule 86    FUN_AUX -> empty
Rule 87    COND -> IF
Rule 88    COND -> FOR
Rule 89    COND -> WHILE
Rule 90    IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
Rule 91    IF2 -> BLOQUE IF_AUX
Rule 92    IF2 -> COND
Rule 93    IF_AUX -> SINO r_else_start BLOQUE
Rule 94    IF_AUX -> empty
Rule 95    WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
Rule 96    WHILE2 -> BLOQUE
Rule 97    WHILE2 -> COND
Rule 98    WHILE_AUX -> HAZ
Rule 99    WHILE_AUX -> empty
Rule 100   FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
Rule 101   FOR2 -> BLOQUE
Rule 102   FOR2 -> COND
Rule 103   WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN
Rule 104   WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB
Rule 105   WRITE_AUXSUB -> COMA WRITE_AUX
Rule 106   WRITE_AUXSUB -> empty
Rule 107   READ -> LEE LPAREN READ_AUX RPAREN
Rule 108   READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB
Rule 109   READ_AUXSUB -> COMA READ_AUX
Rule 110   READ_AUXSUB -> empty
Rule 111   RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa
Rule 112   RETURN -> REGRESA LPAREN NULL RPAREN
Rule 113   CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET
Rule 114   CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET
Rule 115   CTE_ARR_AUX -> CTE
Rule 116   CTE_ARR_AUX -> CTE_ARR_AUXSUB
Rule 117   CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX
Rule 118   CTE_ARR_AUXSUB -> empty
Rule 119   CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
Rule 120   CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2
Rule 121   CTE_ARR_AUX2SUB -> empty
Rule 122   r_save_type -> <empty>
Rule 123   r_save_func -> <empty>
Rule 124   r_register_func -> <empty>
Rule 125   r_register_var -> <empty>
Rule 126   r_register_arr -> <empty>
Rule 127   r_register_dim -> <empty>
Rule 128   r_populate_r -> <empty>
Rule 129   r_register_princ -> <empty>
Rule 130   r_end_princ -> <empty>
Rule 131   r_seen_operand -> <empty>
Rule 132   r_seen_operand_id -> <empty>
Rule 133   r_seen_operator -> <empty>
Rule 134   r_seen_unary_operator -> <empty>
Rule 135   r_seen_equal -> <empty>
Rule 136   r_seen_subexp -> <empty>
Rule 137   r_seen_exp -> <empty>
Rule 138   r_seen_term -> <empty>
Rule 139   r_seen_factor -> <empty>
Rule 140   r_seen_operator_mat -> <empty>
Rule 141   r_pop_fake_bottom -> <empty>
Rule 142   r_check_int -> <empty>
Rule 143   r_if_end -> <empty>
Rule 144   r_else_start -> <empty>
Rule 145   r_set_while -> <empty>
Rule 146   r_while_end -> <empty>
Rule 147   r_for_gen -> <empty>
Rule 148   r_for_end -> <empty>
Rule 149   r_save_param_func -> <empty>
Rule 150   r_save_vars -> <empty>
Rule 151   r_func_set -> <empty>
Rule 152   r_func_end -> <empty>
Rule 153   r_check_func -> <empty>
Rule 154   r_check_param -> <empty>
Rule 155   r_go_sub -> <empty>
Rule 156   r_goto_main -> <empty>
Rule 157   r_regresa -> <empty>
Rule 158   r_escribe -> <empty>
Rule 159   r_lee -> <empty>
Rule 160   r_print_constants -> <empty>

Terminals, with rules where they appear

AND                  : 45
CHAR                 : 10
COMA                 : 13 16 24 42 84 105 109 117 120
COMMENT              : 
COMPARE              : 53
CTE_CH               : 75
CTE_F                : 74
CTE_I                : 14 16 40 42 73
CTE_STRING           : 76
DESDE                : 100
DET_ARR              : 79
DIFFERENT            : 54
DIV                  : 63
DOTCOMA              : 2 12 32 33 35 36 37
ENTONCES             : 90
EQUAL                : 38 39
ESCRIBE              : 103
FLOAT                : 9
FUNCION              : 20 21
HACER                : 100
HASTA                : 100
HAZ                  : 98
ID                   : 2 12 13 20 21 22 38 39 78 83 108
INT                  : 8
INV_ARR              : 81
LBRACKET             : 29 113 114 119
LEE                  : 107
LESS                 : 52
LESSEQUAL            : 56
LPAREN               : 3 20 21 68 83 90 95 103 107 111 112
LSTAPLE              : 14 26 27 27 40
MIENTRAS             : 95
MINUS                : 59 71
MOD                  : 64
MORE                 : 51
MOREEQUAL            : 55
MULT                 : 62
NOT                  : 66
NULL                 : 112
OR                   : 46
PLUS                 : 58 70
PRINCIPAL            : 3
PROGRAMA             : 2
RBRACKET             : 29 113 114 119
REGRESA              : 111 112
RPAREN               : 3 20 21 68 83 90 95 103 107 111 112
RSTAPLE              : 14 26 27 27 40
SI                   : 90
SINO                 : 93
STRING               : 11
TRANS_ARR            : 80
VAR                  : 4
VOID                 : 21
error                : 

Nonterminals, with rules where they appear

ARRACC               : 38 39
ARRACC_AUX           : 40 40 42
ARRDIM               : 12 13 14 78 108
ARRDIM_AUX           : 14 16
ARROP                : 69
ASIGNACION           : 32 100
BLOQUE               : 3 20 21 91 93 96 101
COMPARACION          : 49
COND                 : 34 92 97 102
CTE                  : 69 115
CTE_ARR              : 39
CTE_ARR_AUX          : 113 117 119
CTE_ARR_AUX2         : 114 120
CTE_ARR_AUX2SUB      : 119
CTE_ARR_AUXSUB       : 116
ESTATUTO             : 30
ESTATUTOS            : 29 30
EXP                  : 48 58 59
EXPRESION            : 38 45 46 68 84 85 90 95 100 104 111
EXPRESION_AUX        : 44
EXP_AUX              : 57
FACTOR               : 61
FACTOR_AUX           : 66 67
FOR                  : 88
FOR2                 : 100
FUN                  : 33 77
FUNCTION             : 18
FUNCTIONS            : 2 18
FUN_AUX              : 83 84
IDS                  : 6 13
IF                   : 87
IF2                  : 90
IF_AUX               : 91
MAIN                 : 2
PARAM                : 20 21 24
PARAM_AUX            : 22
PARENTESIS           : 22
PROGRAM              : 0
READ                 : 36
READ_AUX             : 107 109
READ_AUXSUB          : 108
RETURN               : 37
SIGN                 : 68 69
SUBEXP               : 44 49
SUBEXP_AUX           : 48
TERMINO              : 57 62 63 64
TERMINO_AUX          : 61
TIPO                 : 6 20 22
VARS                 : 2 3 20 21
VAR_AUX              : 4 6
WHILE                : 89
WHILE2               : 95
WHILE_AUX            : 95
WRITE                : 35
WRITE_AUX            : 103 105
WRITE_AUXSUB         : 104
empty                : 5 7 15 17 19 23 25 28 31 41 43 47 50 60 65 72 82 86 94 99 106 110 118 121
r_check_func         : 83
r_check_int          : 90 95
r_check_param        : 84 85
r_else_start         : 93
r_end_princ          : 3
r_escribe            : 104
r_for_end            : 100
r_for_gen            : 100
r_func_end           : 3 20 21
r_func_set           : 3 20 21
r_go_sub             : 83
r_goto_main          : 2
r_if_end             : 90
r_lee                : 108
r_pop_fake_bottom    : 68
r_populate_r         : 12 13
r_print_constants    : 2
r_register_arr       : 14
r_register_dim       : 14 16
r_register_func      : 20 21
r_register_princ     : 3
r_register_var       : 12 13 22
r_regresa            : 111
r_save_func          : 3 20 21
r_save_param_func    : 3 20 21
r_save_type          : 8 9 10 11 21
r_save_vars          : 2 3 20 21
r_seen_equal         : 38
r_seen_exp           : 48
r_seen_factor        : 61
r_seen_operand       : 73 74 75 76
r_seen_operand_id    : 38 39 78 108
r_seen_operator      : 38 39 45 46 51 52 53 54 55 56 58 59 62 63 64 68
r_seen_operator_mat  : 79 80 81
r_seen_subexp        : 44
r_seen_term          : 57 63 64
r_seen_unary_operator : 66 70 71
r_set_while          : 95
r_while_end          : 95

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (2) PROGRAM -> . PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    PROGRAMA        shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (2) PROGRAM -> PROGRAMA . r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (156) r_goto_main -> .

    ID              reduce using rule 156 (r_goto_main -> .)

    r_goto_main                    shift and go to state 3

state 3

    (2) PROGRAM -> PROGRAMA r_goto_main . ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    ID              shift and go to state 4


state 4

    (2) PROGRAM -> PROGRAMA r_goto_main ID . DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    DOTCOMA         shift and go to state 5


state 5

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA . VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS . r_save_vars FUNCTIONS MAIN r_print_constants
    (150) r_save_vars -> .

    FUNCION         reduce using rule 150 (r_save_vars -> .)
    PRINCIPAL       reduce using rule 150 (r_save_vars -> .)

    r_save_vars                    shift and go to state 9

state 7

    (4) VARS -> VAR . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    VAR_AUX                        shift and go to state 10
    TIPO                           shift and go to state 11
    empty                          shift and go to state 12

state 8

    (5) VARS -> empty .

    FUNCION         reduce using rule 5 (VARS -> empty .)
    PRINCIPAL       reduce using rule 5 (VARS -> empty .)
    LBRACKET        reduce using rule 5 (VARS -> empty .)


state 9

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars . FUNCTIONS MAIN r_print_constants
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTIONS                      shift and go to state 17
    FUNCTION                       shift and go to state 18
    empty                          shift and go to state 19

state 10

    (4) VARS -> VAR VAR_AUX .

    FUNCION         reduce using rule 4 (VARS -> VAR VAR_AUX .)
    PRINCIPAL       reduce using rule 4 (VARS -> VAR VAR_AUX .)
    LBRACKET        reduce using rule 4 (VARS -> VAR VAR_AUX .)


state 11

    (6) VAR_AUX -> TIPO . IDS VAR_AUX
    (12) IDS -> . ID r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM r_populate_r COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 21

state 12

    (7) VAR_AUX -> empty .

    FUNCION         reduce using rule 7 (VAR_AUX -> empty .)
    PRINCIPAL       reduce using rule 7 (VAR_AUX -> empty .)
    LBRACKET        reduce using rule 7 (VAR_AUX -> empty .)


state 13

    (8) TIPO -> INT . r_save_type
    (122) r_save_type -> .

    ID              reduce using rule 122 (r_save_type -> .)

    r_save_type                    shift and go to state 23

state 14

    (9) TIPO -> FLOAT . r_save_type
    (122) r_save_type -> .

    ID              reduce using rule 122 (r_save_type -> .)

    r_save_type                    shift and go to state 24

state 15

    (10) TIPO -> CHAR . r_save_type
    (122) r_save_type -> .

    ID              reduce using rule 122 (r_save_type -> .)

    r_save_type                    shift and go to state 25

state 16

    (11) TIPO -> STRING . r_save_type
    (122) r_save_type -> .

    ID              reduce using rule 122 (r_save_type -> .)

    r_save_type                    shift and go to state 26

state 17

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS . MAIN r_print_constants
    (3) MAIN -> . PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    PRINCIPAL       shift and go to state 28

    MAIN                           shift and go to state 27

state 18

    (18) FUNCTIONS -> FUNCTION . FUNCTIONS
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 18
    FUNCTIONS                      shift and go to state 29
    empty                          shift and go to state 19

state 19

    (19) FUNCTIONS -> empty .

    PRINCIPAL       reduce using rule 19 (FUNCTIONS -> empty .)


state 20

    (20) FUNCTION -> FUNCION . TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> FUNCION . VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type

    VOID            shift and go to state 31
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16

    TIPO                           shift and go to state 30

state 21

    (6) VAR_AUX -> TIPO IDS . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 11
    VAR_AUX                        shift and go to state 32
    empty                          shift and go to state 12

state 22

    (12) IDS -> ID . r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> ID . r_register_var ARRDIM r_populate_r COMA IDS
    (125) r_register_var -> .

    DOTCOMA         reduce using rule 125 (r_register_var -> .)
    COMA            reduce using rule 125 (r_register_var -> .)
    LSTAPLE         reduce using rule 125 (r_register_var -> .)

    r_register_var                 shift and go to state 33

state 23

    (8) TIPO -> INT r_save_type .

    ID              reduce using rule 8 (TIPO -> INT r_save_type .)


state 24

    (9) TIPO -> FLOAT r_save_type .

    ID              reduce using rule 9 (TIPO -> FLOAT r_save_type .)


state 25

    (10) TIPO -> CHAR r_save_type .

    ID              reduce using rule 10 (TIPO -> CHAR r_save_type .)


state 26

    (11) TIPO -> STRING r_save_type .

    ID              reduce using rule 11 (TIPO -> STRING r_save_type .)


state 27

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN . r_print_constants
    (160) r_print_constants -> .

    $end            reduce using rule 160 (r_print_constants -> .)

    r_print_constants              shift and go to state 34

state 28

    (3) MAIN -> PRINCIPAL . r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (123) r_save_func -> .

    LPAREN          reduce using rule 123 (r_save_func -> .)

    r_save_func                    shift and go to state 35

state 29

    (18) FUNCTIONS -> FUNCTION FUNCTIONS .

    PRINCIPAL       reduce using rule 18 (FUNCTIONS -> FUNCTION FUNCTIONS .)


state 30

    (20) FUNCTION -> FUNCION TIPO . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 36


state 31

    (21) FUNCTION -> FUNCION VOID . r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (122) r_save_type -> .

    ID              reduce using rule 122 (r_save_type -> .)

    r_save_type                    shift and go to state 37

state 32

    (6) VAR_AUX -> TIPO IDS VAR_AUX .

    FUNCION         reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    PRINCIPAL       reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    LBRACKET        reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)


state 33

    (12) IDS -> ID r_register_var . ARRDIM r_populate_r DOTCOMA
    (13) IDS -> ID r_register_var . ARRDIM r_populate_r COMA IDS
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (126) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 126 (r_register_arr -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 38
    r_register_arr                 shift and go to state 39
    empty                          shift and go to state 40

state 34

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .

    $end            reduce using rule 2 (PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .)


state 35

    (3) MAIN -> PRINCIPAL r_save_func . LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 41


state 36

    (20) FUNCTION -> FUNCION TIPO ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (123) r_save_func -> .

    LPAREN          reduce using rule 123 (r_save_func -> .)

    r_save_func                    shift and go to state 42

state 37

    (21) FUNCTION -> FUNCION VOID r_save_type . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 43


state 38

    (12) IDS -> ID r_register_var ARRDIM . r_populate_r DOTCOMA
    (13) IDS -> ID r_register_var ARRDIM . r_populate_r COMA IDS
    (128) r_populate_r -> .

    DOTCOMA         reduce using rule 128 (r_populate_r -> .)
    COMA            reduce using rule 128 (r_populate_r -> .)

    r_populate_r                   shift and go to state 44

state 39

    (14) ARRDIM -> r_register_arr . LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM

    LSTAPLE         shift and go to state 45


state 40

    (15) ARRDIM -> empty .

    DOTCOMA         reduce using rule 15 (ARRDIM -> empty .)
    COMA            reduce using rule 15 (ARRDIM -> empty .)
    RPAREN          reduce using rule 15 (ARRDIM -> empty .)
    DET_ARR         reduce using rule 15 (ARRDIM -> empty .)
    TRANS_ARR       reduce using rule 15 (ARRDIM -> empty .)
    INV_ARR         reduce using rule 15 (ARRDIM -> empty .)
    MULT            reduce using rule 15 (ARRDIM -> empty .)
    DIV             reduce using rule 15 (ARRDIM -> empty .)
    MOD             reduce using rule 15 (ARRDIM -> empty .)
    PLUS            reduce using rule 15 (ARRDIM -> empty .)
    MINUS           reduce using rule 15 (ARRDIM -> empty .)
    MORE            reduce using rule 15 (ARRDIM -> empty .)
    LESS            reduce using rule 15 (ARRDIM -> empty .)
    COMPARE         reduce using rule 15 (ARRDIM -> empty .)
    DIFFERENT       reduce using rule 15 (ARRDIM -> empty .)
    MOREEQUAL       reduce using rule 15 (ARRDIM -> empty .)
    LESSEQUAL       reduce using rule 15 (ARRDIM -> empty .)
    AND             reduce using rule 15 (ARRDIM -> empty .)
    OR              reduce using rule 15 (ARRDIM -> empty .)
    HACER           reduce using rule 15 (ARRDIM -> empty .)
    HASTA           reduce using rule 15 (ARRDIM -> empty .)
    RBRACKET        reduce using rule 15 (ARRDIM -> empty .)


state 41

    (3) MAIN -> PRINCIPAL r_save_func LPAREN . RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 46


state 42

    (20) FUNCTION -> FUNCION TIPO ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (124) r_register_func -> .

    LPAREN          reduce using rule 124 (r_register_func -> .)

    r_register_func                shift and go to state 47

state 43

    (21) FUNCTION -> FUNCION VOID r_save_type ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (123) r_save_func -> .

    LPAREN          reduce using rule 123 (r_save_func -> .)

    r_save_func                    shift and go to state 48

state 44

    (12) IDS -> ID r_register_var ARRDIM r_populate_r . DOTCOMA
    (13) IDS -> ID r_register_var ARRDIM r_populate_r . COMA IDS

    DOTCOMA         shift and go to state 49
    COMA            shift and go to state 50


state 45

    (14) ARRDIM -> r_register_arr LSTAPLE . CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM

    CTE_I           shift and go to state 51


state 46

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN . r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (129) r_register_princ -> .

    VAR             reduce using rule 129 (r_register_princ -> .)
    LBRACKET        reduce using rule 129 (r_register_princ -> .)

    r_register_princ               shift and go to state 52

state 47

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 53


state 48

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (124) r_register_func -> .

    LPAREN          reduce using rule 124 (r_register_func -> .)

    r_register_func                shift and go to state 54

state 49

    (12) IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .

    INT             reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    FLOAT           reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    CHAR            reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    STRING          reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    FUNCION         reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    PRINCIPAL       reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    LBRACKET        reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)


state 50

    (13) IDS -> ID r_register_var ARRDIM r_populate_r COMA . IDS
    (12) IDS -> . ID r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM r_populate_r COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 55

state 51

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I . r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (127) r_register_dim -> .

    COMA            reduce using rule 127 (r_register_dim -> .)
    RSTAPLE         reduce using rule 127 (r_register_dim -> .)

    r_register_dim                 shift and go to state 56

state 52

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ . r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (149) r_save_param_func -> .

    VAR             reduce using rule 149 (r_save_param_func -> .)
    LBRACKET        reduce using rule 149 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 57

state 53

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 58
    PARAM                          shift and go to state 59
    empty                          shift and go to state 60

state 54

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 61


state 55

    (13) IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .

    INT             reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    FLOAT           reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    CHAR            reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    STRING          reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    FUNCION         reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    PRINCIPAL       reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    LBRACKET        reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)


state 56

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim . ARRDIM_AUX RSTAPLE ARRDIM
    (16) ARRDIM_AUX -> . COMA CTE_I r_register_dim ARRDIM_AUX
    (17) ARRDIM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 63
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRDIM_AUX                     shift and go to state 62
    empty                          shift and go to state 64

state 57

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func . VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 65
    empty                          shift and go to state 8

state 58

    (22) PARAM -> TIPO . ID r_register_var PARENTESIS PARAM_AUX

    ID              shift and go to state 66


state 59

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 67


state 60

    (23) PARAM -> empty .

    RPAREN          reduce using rule 23 (PARAM -> empty .)


state 61

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 68
    TIPO                           shift and go to state 58
    empty                          shift and go to state 60

state 62

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX . RSTAPLE ARRDIM

    RSTAPLE         shift and go to state 69


state 63

    (16) ARRDIM_AUX -> COMA . CTE_I r_register_dim ARRDIM_AUX

    CTE_I           shift and go to state 70


state 64

    (17) ARRDIM_AUX -> empty .

    RSTAPLE         reduce using rule 17 (ARRDIM_AUX -> empty .)


state 65

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS . r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (150) r_save_vars -> .

    LBRACKET        reduce using rule 150 (r_save_vars -> .)

    r_save_vars                    shift and go to state 71

state 66

    (22) PARAM -> TIPO ID . r_register_var PARENTESIS PARAM_AUX
    (125) r_register_var -> .

    LSTAPLE         reduce using rule 125 (r_register_var -> .)
    COMA            reduce using rule 125 (r_register_var -> .)
    RPAREN          reduce using rule 125 (r_register_var -> .)

    r_register_var                 shift and go to state 72

state 67

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (149) r_save_param_func -> .

    VAR             reduce using rule 149 (r_save_param_func -> .)
    LBRACKET        reduce using rule 149 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 73

state 68

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 74


state 69

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE . ARRDIM
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (126) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 126 (r_register_arr -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    DET_ARR         reduce using rule 1 (empty -> .)
    TRANS_ARR       reduce using rule 1 (empty -> .)
    INV_ARR         reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    r_register_arr                 shift and go to state 39
    ARRDIM                         shift and go to state 75
    empty                          shift and go to state 40

state 70

    (16) ARRDIM_AUX -> COMA CTE_I . r_register_dim ARRDIM_AUX
    (127) r_register_dim -> .

    COMA            reduce using rule 127 (r_register_dim -> .)
    RSTAPLE         reduce using rule 127 (r_register_dim -> .)

    r_register_dim                 shift and go to state 76

state 71

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars . r_end_princ r_func_set BLOQUE r_func_end
    (130) r_end_princ -> .

    LBRACKET        reduce using rule 130 (r_end_princ -> .)

    r_end_princ                    shift and go to state 77

state 72

    (22) PARAM -> TIPO ID r_register_var . PARENTESIS PARAM_AUX
    (26) PARENTESIS -> . LSTAPLE RSTAPLE
    (27) PARENTESIS -> . LSTAPLE RSTAPLE LSTAPLE RSTAPLE
    (28) PARENTESIS -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 79
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    PARENTESIS                     shift and go to state 78
    empty                          shift and go to state 80

state 73

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 81
    empty                          shift and go to state 8

state 74

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (149) r_save_param_func -> .

    VAR             reduce using rule 149 (r_save_param_func -> .)
    LBRACKET        reduce using rule 149 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 82

state 75

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .

    DOTCOMA         reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    COMA            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    RPAREN          reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    DET_ARR         reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    TRANS_ARR       reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    INV_ARR         reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    MULT            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    DIV             reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    MOD             reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    PLUS            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    MINUS           reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    MORE            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    LESS            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    COMPARE         reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    DIFFERENT       reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    MOREEQUAL       reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    LESSEQUAL       reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    AND             reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    OR              reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    HACER           reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    HASTA           reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    RBRACKET        reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)


state 76

    (16) ARRDIM_AUX -> COMA CTE_I r_register_dim . ARRDIM_AUX
    (16) ARRDIM_AUX -> . COMA CTE_I r_register_dim ARRDIM_AUX
    (17) ARRDIM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 63
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRDIM_AUX                     shift and go to state 83
    empty                          shift and go to state 64

state 77

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ . r_func_set BLOQUE r_func_end
    (151) r_func_set -> .

    LBRACKET        reduce using rule 151 (r_func_set -> .)

    r_func_set                     shift and go to state 84

state 78

    (22) PARAM -> TIPO ID r_register_var PARENTESIS . PARAM_AUX
    (24) PARAM_AUX -> . COMA PARAM
    (25) PARAM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 86
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM_AUX                      shift and go to state 85
    empty                          shift and go to state 87

state 79

    (26) PARENTESIS -> LSTAPLE . RSTAPLE
    (27) PARENTESIS -> LSTAPLE . RSTAPLE LSTAPLE RSTAPLE

    RSTAPLE         shift and go to state 88


state 80

    (28) PARENTESIS -> empty .

    COMA            reduce using rule 28 (PARENTESIS -> empty .)
    RPAREN          reduce using rule 28 (PARENTESIS -> empty .)


state 81

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (150) r_save_vars -> .

    LBRACKET        reduce using rule 150 (r_save_vars -> .)

    r_save_vars                    shift and go to state 89

state 82

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 90
    empty                          shift and go to state 8

state 83

    (16) ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX .

    RSTAPLE         reduce using rule 16 (ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX .)


state 84

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 92

    BLOQUE                         shift and go to state 91

state 85

    (22) PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX .

    RPAREN          reduce using rule 22 (PARAM -> TIPO ID r_register_var PARENTESIS PARAM_AUX .)


state 86

    (24) PARAM_AUX -> COMA . PARAM
    (22) PARAM -> . TIPO ID r_register_var PARENTESIS PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 93
    TIPO                           shift and go to state 58
    empty                          shift and go to state 60

state 87

    (25) PARAM_AUX -> empty .

    RPAREN          reduce using rule 25 (PARAM_AUX -> empty .)


state 88

    (26) PARENTESIS -> LSTAPLE RSTAPLE .
    (27) PARENTESIS -> LSTAPLE RSTAPLE . LSTAPLE RSTAPLE

    COMA            reduce using rule 26 (PARENTESIS -> LSTAPLE RSTAPLE .)
    RPAREN          reduce using rule 26 (PARENTESIS -> LSTAPLE RSTAPLE .)
    LSTAPLE         shift and go to state 94


state 89

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (151) r_func_set -> .

    LBRACKET        reduce using rule 151 (r_func_set -> .)

    r_func_set                     shift and go to state 95

state 90

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (150) r_save_vars -> .

    LBRACKET        reduce using rule 150 (r_save_vars -> .)

    r_save_vars                    shift and go to state 96

state 91

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE . r_func_end
    (152) r_func_end -> .

    $end            reduce using rule 152 (r_func_end -> .)

    r_func_end                     shift and go to state 97

state 92

    (29) BLOQUE -> LBRACKET . ESTATUTOS RBRACKET
    (30) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (31) ESTATUTOS -> . empty
    (32) ESTATUTO -> . ASIGNACION DOTCOMA
    (33) ESTATUTO -> . FUN DOTCOMA
    (34) ESTATUTO -> . COND
    (35) ESTATUTO -> . WRITE DOTCOMA
    (36) ESTATUTO -> . READ DOTCOMA
    (37) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (38) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (87) COND -> . IF
    (88) COND -> . FOR
    (89) COND -> . WHILE
    (103) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN
    (107) READ -> . LEE LPAREN READ_AUX RPAREN
    (111) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (112) RETURN -> . REGRESA LPAREN NULL RPAREN
    (90) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (100) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (95) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 107
    ESCRIBE         shift and go to state 111
    LEE             shift and go to state 112
    REGRESA         shift and go to state 113
    SI              shift and go to state 114
    DESDE           shift and go to state 115
    MIENTRAS        shift and go to state 116

    ESTATUTOS                      shift and go to state 98
    ESTATUTO                       shift and go to state 99
    empty                          shift and go to state 100
    ASIGNACION                     shift and go to state 101
    FUN                            shift and go to state 102
    COND                           shift and go to state 103
    WRITE                          shift and go to state 104
    READ                           shift and go to state 105
    RETURN                         shift and go to state 106
    IF                             shift and go to state 108
    FOR                            shift and go to state 109
    WHILE                          shift and go to state 110

state 93

    (24) PARAM_AUX -> COMA PARAM .

    RPAREN          reduce using rule 24 (PARAM_AUX -> COMA PARAM .)


state 94

    (27) PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE . RSTAPLE

    RSTAPLE         shift and go to state 117


state 95

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 92

    BLOQUE                         shift and go to state 118

state 96

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (151) r_func_set -> .

    LBRACKET        reduce using rule 151 (r_func_set -> .)

    r_func_set                     shift and go to state 119

state 97

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .

    $end            reduce using rule 3 (MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .)


state 98

    (29) BLOQUE -> LBRACKET ESTATUTOS . RBRACKET

    RBRACKET        shift and go to state 120


state 99

    (30) ESTATUTOS -> ESTATUTO . ESTATUTOS
    (30) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (31) ESTATUTOS -> . empty
    (32) ESTATUTO -> . ASIGNACION DOTCOMA
    (33) ESTATUTO -> . FUN DOTCOMA
    (34) ESTATUTO -> . COND
    (35) ESTATUTO -> . WRITE DOTCOMA
    (36) ESTATUTO -> . READ DOTCOMA
    (37) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (38) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (87) COND -> . IF
    (88) COND -> . FOR
    (89) COND -> . WHILE
    (103) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN
    (107) READ -> . LEE LPAREN READ_AUX RPAREN
    (111) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (112) RETURN -> . REGRESA LPAREN NULL RPAREN
    (90) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (100) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (95) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 107
    ESCRIBE         shift and go to state 111
    LEE             shift and go to state 112
    REGRESA         shift and go to state 113
    SI              shift and go to state 114
    DESDE           shift and go to state 115
    MIENTRAS        shift and go to state 116

    ESTATUTO                       shift and go to state 99
    ESTATUTOS                      shift and go to state 121
    empty                          shift and go to state 100
    ASIGNACION                     shift and go to state 101
    FUN                            shift and go to state 102
    COND                           shift and go to state 103
    WRITE                          shift and go to state 104
    READ                           shift and go to state 105
    RETURN                         shift and go to state 106
    IF                             shift and go to state 108
    FOR                            shift and go to state 109
    WHILE                          shift and go to state 110

state 100

    (31) ESTATUTOS -> empty .

    RBRACKET        reduce using rule 31 (ESTATUTOS -> empty .)


state 101

    (32) ESTATUTO -> ASIGNACION . DOTCOMA

    DOTCOMA         shift and go to state 122


state 102

    (33) ESTATUTO -> FUN . DOTCOMA

    DOTCOMA         shift and go to state 123


state 103

    (34) ESTATUTO -> COND .

    ID              reduce using rule 34 (ESTATUTO -> COND .)
    ESCRIBE         reduce using rule 34 (ESTATUTO -> COND .)
    LEE             reduce using rule 34 (ESTATUTO -> COND .)
    REGRESA         reduce using rule 34 (ESTATUTO -> COND .)
    SI              reduce using rule 34 (ESTATUTO -> COND .)
    DESDE           reduce using rule 34 (ESTATUTO -> COND .)
    MIENTRAS        reduce using rule 34 (ESTATUTO -> COND .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> COND .)


state 104

    (35) ESTATUTO -> WRITE . DOTCOMA

    DOTCOMA         shift and go to state 124


state 105

    (36) ESTATUTO -> READ . DOTCOMA

    DOTCOMA         shift and go to state 125


state 106

    (37) ESTATUTO -> RETURN . DOTCOMA

    DOTCOMA         shift and go to state 126


state 107

    (38) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR
    (83) FUN -> ID . r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (132) r_seen_operand_id -> .
    (153) r_check_func -> .

    LSTAPLE         reduce using rule 132 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 132 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 153 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 127
    r_check_func                   shift and go to state 128

state 108

    (87) COND -> IF .

    ID              reduce using rule 87 (COND -> IF .)
    ESCRIBE         reduce using rule 87 (COND -> IF .)
    LEE             reduce using rule 87 (COND -> IF .)
    REGRESA         reduce using rule 87 (COND -> IF .)
    SI              reduce using rule 87 (COND -> IF .)
    DESDE           reduce using rule 87 (COND -> IF .)
    MIENTRAS        reduce using rule 87 (COND -> IF .)
    RBRACKET        reduce using rule 87 (COND -> IF .)


state 109

    (88) COND -> FOR .

    ID              reduce using rule 88 (COND -> FOR .)
    ESCRIBE         reduce using rule 88 (COND -> FOR .)
    LEE             reduce using rule 88 (COND -> FOR .)
    REGRESA         reduce using rule 88 (COND -> FOR .)
    SI              reduce using rule 88 (COND -> FOR .)
    DESDE           reduce using rule 88 (COND -> FOR .)
    MIENTRAS        reduce using rule 88 (COND -> FOR .)
    RBRACKET        reduce using rule 88 (COND -> FOR .)


state 110

    (89) COND -> WHILE .

    ID              reduce using rule 89 (COND -> WHILE .)
    ESCRIBE         reduce using rule 89 (COND -> WHILE .)
    LEE             reduce using rule 89 (COND -> WHILE .)
    REGRESA         reduce using rule 89 (COND -> WHILE .)
    SI              reduce using rule 89 (COND -> WHILE .)
    DESDE           reduce using rule 89 (COND -> WHILE .)
    MIENTRAS        reduce using rule 89 (COND -> WHILE .)
    RBRACKET        reduce using rule 89 (COND -> WHILE .)


state 111

    (103) WRITE -> ESCRIBE . LPAREN WRITE_AUX RPAREN

    LPAREN          shift and go to state 129


state 112

    (107) READ -> LEE . LPAREN READ_AUX RPAREN

    LPAREN          shift and go to state 130


state 113

    (111) RETURN -> REGRESA . LPAREN EXPRESION RPAREN r_regresa
    (112) RETURN -> REGRESA . LPAREN NULL RPAREN

    LPAREN          shift and go to state 131


state 114

    (90) IF -> SI . LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end

    LPAREN          shift and go to state 132


state 115

    (100) FOR -> DESDE . ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (38) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR

    ID              shift and go to state 134

    ASIGNACION                     shift and go to state 133

state 116

    (95) WHILE -> MIENTRAS . r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (145) r_set_while -> .

    LPAREN          reduce using rule 145 (r_set_while -> .)

    r_set_while                    shift and go to state 135

state 117

    (27) PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .

    COMA            reduce using rule 27 (PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .)
    RPAREN          reduce using rule 27 (PARENTESIS -> LSTAPLE RSTAPLE LSTAPLE RSTAPLE .)


state 118

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (152) r_func_end -> .

    FUNCION         reduce using rule 152 (r_func_end -> .)
    PRINCIPAL       reduce using rule 152 (r_func_end -> .)

    r_func_end                     shift and go to state 136

state 119

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 92

    BLOQUE                         shift and go to state 137

state 120

    (29) BLOQUE -> LBRACKET ESTATUTOS RBRACKET .

    $end            reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    FUNCION         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    PRINCIPAL       reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SINO            reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ID              reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ESCRIBE         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    LEE             reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    REGRESA         reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SI              reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    DESDE           reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    MIENTRAS        reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    RBRACKET        reduce using rule 29 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)


state 121

    (30) ESTATUTOS -> ESTATUTO ESTATUTOS .

    RBRACKET        reduce using rule 30 (ESTATUTOS -> ESTATUTO ESTATUTOS .)


state 122

    (32) ESTATUTO -> ASIGNACION DOTCOMA .

    ID              reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    ESCRIBE         reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    LEE             reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    REGRESA         reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    SI              reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    DESDE           reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    MIENTRAS        reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)
    RBRACKET        reduce using rule 32 (ESTATUTO -> ASIGNACION DOTCOMA .)


state 123

    (33) ESTATUTO -> FUN DOTCOMA .

    ID              reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    ESCRIBE         reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    LEE             reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    REGRESA         reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    SI              reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    DESDE           reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    MIENTRAS        reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> FUN DOTCOMA .)


state 124

    (35) ESTATUTO -> WRITE DOTCOMA .

    ID              reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    ESCRIBE         reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    LEE             reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    REGRESA         reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    SI              reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    DESDE           reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    MIENTRAS        reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> WRITE DOTCOMA .)


state 125

    (36) ESTATUTO -> READ DOTCOMA .

    ID              reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    ESCRIBE         reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    LEE             reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    REGRESA         reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    SI              reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    DESDE           reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    MIENTRAS        reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> READ DOTCOMA .)


state 126

    (37) ESTATUTO -> RETURN DOTCOMA .

    ID              reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    ESCRIBE         reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    LEE             reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    REGRESA         reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    SI              reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    DESDE           reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    MIENTRAS        reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> RETURN DOTCOMA .)


state 127

    (38) ASIGNACION -> ID r_seen_operand_id . ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id . ARRACC EQUAL r_seen_operator CTE_ARR
    (40) ARRACC -> . LSTAPLE CTE_I ARRACC_AUX RSTAPLE ARRACC_AUX
    (41) ARRACC -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 139
    EQUAL           reduce using rule 1 (empty -> .)

    ARRACC                         shift and go to state 138
    empty                          shift and go to state 140

state 128

    (83) FUN -> ID r_check_func . LPAREN FUN_AUX RPAREN r_go_sub

    LPAREN          shift and go to state 141


state 129

    (103) WRITE -> ESCRIBE LPAREN . WRITE_AUX RPAREN
    (104) WRITE_AUX -> . EXPRESION r_escribe WRITE_AUXSUB
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 142
    EXPRESION                      shift and go to state 143
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 130

    (107) READ -> LEE LPAREN . READ_AUX RPAREN
    (108) READ_AUX -> . ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB

    ID              shift and go to state 155

    READ_AUX                       shift and go to state 154

state 131

    (111) RETURN -> REGRESA LPAREN . EXPRESION RPAREN r_regresa
    (112) RETURN -> REGRESA LPAREN . NULL RPAREN
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NULL            shift and go to state 157
    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 156
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 132

    (90) IF -> SI LPAREN . EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 158
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 133

    (100) FOR -> DESDE ASIGNACION . HASTA EXPRESION r_for_gen HACER FOR2 r_for_end

    HASTA           shift and go to state 159


state 134

    (38) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR
    (132) r_seen_operand_id -> .

    LSTAPLE         reduce using rule 132 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 132 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 127

state 135

    (95) WHILE -> MIENTRAS r_set_while . LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LPAREN          shift and go to state 160


state 136

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 137

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (152) r_func_end -> .

    FUNCION         reduce using rule 152 (r_func_end -> .)
    PRINCIPAL       reduce using rule 152 (r_func_end -> .)

    r_func_end                     shift and go to state 161

state 138

    (38) ASIGNACION -> ID r_seen_operand_id ARRACC . EQUAL r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRACC . EQUAL r_seen_operator CTE_ARR

    EQUAL           shift and go to state 162


state 139

    (40) ARRACC -> LSTAPLE . CTE_I ARRACC_AUX RSTAPLE ARRACC_AUX

    CTE_I           shift and go to state 163


state 140

    (41) ARRACC -> empty .

    EQUAL           reduce using rule 41 (ARRACC -> empty .)


state 141

    (83) FUN -> ID r_check_func LPAREN . FUN_AUX RPAREN r_go_sub
    (84) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (85) FUN_AUX -> . EXPRESION r_check_param
    (86) FUN_AUX -> . empty
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152

    FUN_AUX                        shift and go to state 164
    EXPRESION                      shift and go to state 165
    empty                          shift and go to state 166
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150

state 142

    (103) WRITE -> ESCRIBE LPAREN WRITE_AUX . RPAREN

    RPAREN          shift and go to state 167


state 143

    (104) WRITE_AUX -> EXPRESION . r_escribe WRITE_AUXSUB
    (158) r_escribe -> .

    COMA            reduce using rule 158 (r_escribe -> .)
    RPAREN          reduce using rule 158 (r_escribe -> .)

    r_escribe                      shift and go to state 168

state 144

    (44) EXPRESION -> SUBEXP . r_seen_subexp EXPRESION_AUX
    (136) r_seen_subexp -> .

    AND             reduce using rule 136 (r_seen_subexp -> .)
    OR              reduce using rule 136 (r_seen_subexp -> .)
    COMA            reduce using rule 136 (r_seen_subexp -> .)
    RPAREN          reduce using rule 136 (r_seen_subexp -> .)
    HACER           reduce using rule 136 (r_seen_subexp -> .)
    DOTCOMA         reduce using rule 136 (r_seen_subexp -> .)
    HASTA           reduce using rule 136 (r_seen_subexp -> .)

    r_seen_subexp                  shift and go to state 169

state 145

    (48) SUBEXP -> EXP . r_seen_exp SUBEXP_AUX
    (137) r_seen_exp -> .

    MORE            reduce using rule 137 (r_seen_exp -> .)
    LESS            reduce using rule 137 (r_seen_exp -> .)
    COMPARE         reduce using rule 137 (r_seen_exp -> .)
    DIFFERENT       reduce using rule 137 (r_seen_exp -> .)
    MOREEQUAL       reduce using rule 137 (r_seen_exp -> .)
    LESSEQUAL       reduce using rule 137 (r_seen_exp -> .)
    AND             reduce using rule 137 (r_seen_exp -> .)
    OR              reduce using rule 137 (r_seen_exp -> .)
    COMA            reduce using rule 137 (r_seen_exp -> .)
    RPAREN          reduce using rule 137 (r_seen_exp -> .)
    HACER           reduce using rule 137 (r_seen_exp -> .)
    DOTCOMA         reduce using rule 137 (r_seen_exp -> .)
    HASTA           reduce using rule 137 (r_seen_exp -> .)

    r_seen_exp                     shift and go to state 170

state 146

    (57) EXP -> TERMINO . r_seen_term EXP_AUX
    (138) r_seen_term -> .

    PLUS            reduce using rule 138 (r_seen_term -> .)
    MINUS           reduce using rule 138 (r_seen_term -> .)
    MORE            reduce using rule 138 (r_seen_term -> .)
    LESS            reduce using rule 138 (r_seen_term -> .)
    COMPARE         reduce using rule 138 (r_seen_term -> .)
    DIFFERENT       reduce using rule 138 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 138 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 138 (r_seen_term -> .)
    AND             reduce using rule 138 (r_seen_term -> .)
    OR              reduce using rule 138 (r_seen_term -> .)
    COMA            reduce using rule 138 (r_seen_term -> .)
    RPAREN          reduce using rule 138 (r_seen_term -> .)
    HACER           reduce using rule 138 (r_seen_term -> .)
    DOTCOMA         reduce using rule 138 (r_seen_term -> .)
    HASTA           reduce using rule 138 (r_seen_term -> .)

    r_seen_term                    shift and go to state 171

state 147

    (61) TERMINO -> FACTOR . r_seen_factor TERMINO_AUX
    (139) r_seen_factor -> .

    MULT            reduce using rule 139 (r_seen_factor -> .)
    DIV             reduce using rule 139 (r_seen_factor -> .)
    MOD             reduce using rule 139 (r_seen_factor -> .)
    PLUS            reduce using rule 139 (r_seen_factor -> .)
    MINUS           reduce using rule 139 (r_seen_factor -> .)
    MORE            reduce using rule 139 (r_seen_factor -> .)
    LESS            reduce using rule 139 (r_seen_factor -> .)
    COMPARE         reduce using rule 139 (r_seen_factor -> .)
    DIFFERENT       reduce using rule 139 (r_seen_factor -> .)
    MOREEQUAL       reduce using rule 139 (r_seen_factor -> .)
    LESSEQUAL       reduce using rule 139 (r_seen_factor -> .)
    AND             reduce using rule 139 (r_seen_factor -> .)
    OR              reduce using rule 139 (r_seen_factor -> .)
    COMA            reduce using rule 139 (r_seen_factor -> .)
    RPAREN          reduce using rule 139 (r_seen_factor -> .)
    HACER           reduce using rule 139 (r_seen_factor -> .)
    DOTCOMA         reduce using rule 139 (r_seen_factor -> .)
    HASTA           reduce using rule 139 (r_seen_factor -> .)

    r_seen_factor                  shift and go to state 172

state 148

    (66) FACTOR -> NOT . r_seen_unary_operator FACTOR_AUX
    (134) r_seen_unary_operator -> .

    PLUS            reduce using rule 134 (r_seen_unary_operator -> .)
    MINUS           reduce using rule 134 (r_seen_unary_operator -> .)
    LPAREN          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 134 (r_seen_unary_operator -> .)
    ID              reduce using rule 134 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 173

state 149

    (67) FACTOR -> FACTOR_AUX .

    MULT            reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    DIV             reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    MOD             reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    PLUS            reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    MINUS           reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    MORE            reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    LESS            reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    COMPARE         reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    DIFFERENT       reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    MOREEQUAL       reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    LESSEQUAL       reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    AND             reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    OR              reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    COMA            reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    RPAREN          reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    HACER           reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    DOTCOMA         reduce using rule 67 (FACTOR -> FACTOR_AUX .)
    HASTA           reduce using rule 67 (FACTOR -> FACTOR_AUX .)


state 150

    (68) FACTOR_AUX -> SIGN . LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> SIGN . CTE ARROP
    (73) CTE -> . CTE_I r_seen_operand
    (74) CTE -> . CTE_F r_seen_operand
    (75) CTE -> . CTE_CH r_seen_operand
    (76) CTE -> . CTE_STRING r_seen_operand
    (77) CTE -> . FUN
    (78) CTE -> . ID r_seen_operand_id ARRDIM
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub

    LPAREN          shift and go to state 174
    CTE_I           shift and go to state 176
    CTE_F           shift and go to state 177
    CTE_CH          shift and go to state 178
    CTE_STRING      shift and go to state 179
    ID              shift and go to state 181

    CTE                            shift and go to state 175
    FUN                            shift and go to state 180

state 151

    (70) SIGN -> PLUS . r_seen_unary_operator
    (134) r_seen_unary_operator -> .

    LPAREN          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 134 (r_seen_unary_operator -> .)
    ID              reduce using rule 134 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 182

state 152

    (71) SIGN -> MINUS . r_seen_unary_operator
    (134) r_seen_unary_operator -> .

    LPAREN          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 134 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 134 (r_seen_unary_operator -> .)
    ID              reduce using rule 134 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 183

state 153

    (72) SIGN -> empty .

    LPAREN          reduce using rule 72 (SIGN -> empty .)
    CTE_I           reduce using rule 72 (SIGN -> empty .)
    CTE_F           reduce using rule 72 (SIGN -> empty .)
    CTE_CH          reduce using rule 72 (SIGN -> empty .)
    CTE_STRING      reduce using rule 72 (SIGN -> empty .)
    ID              reduce using rule 72 (SIGN -> empty .)


state 154

    (107) READ -> LEE LPAREN READ_AUX . RPAREN

    RPAREN          shift and go to state 184


state 155

    (108) READ_AUX -> ID . r_seen_operand_id ARRDIM r_lee READ_AUXSUB
    (132) r_seen_operand_id -> .

    COMA            reduce using rule 132 (r_seen_operand_id -> .)
    LSTAPLE         reduce using rule 132 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 132 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 185

state 156

    (111) RETURN -> REGRESA LPAREN EXPRESION . RPAREN r_regresa

    RPAREN          shift and go to state 186


state 157

    (112) RETURN -> REGRESA LPAREN NULL . RPAREN

    RPAREN          shift and go to state 187


state 158

    (90) IF -> SI LPAREN EXPRESION . r_check_int RPAREN ENTONCES IF2 r_if_end
    (142) r_check_int -> .

    RPAREN          reduce using rule 142 (r_check_int -> .)

    r_check_int                    shift and go to state 188

state 159

    (100) FOR -> DESDE ASIGNACION HASTA . EXPRESION r_for_gen HACER FOR2 r_for_end
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 189
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 160

    (95) WHILE -> MIENTRAS r_set_while LPAREN . EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 190
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 161

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 162

    (38) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL . r_seen_operator EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL . r_seen_operator CTE_ARR
    (133) r_seen_operator -> .

    LBRACKET        reduce using rule 133 (r_seen_operator -> .)
    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 191

state 163

    (40) ARRACC -> LSTAPLE CTE_I . ARRACC_AUX RSTAPLE ARRACC_AUX
    (42) ARRACC_AUX -> . COMA CTE_I ARRACC_AUX
    (43) ARRACC_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 193
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRACC_AUX                     shift and go to state 192
    empty                          shift and go to state 194

state 164

    (83) FUN -> ID r_check_func LPAREN FUN_AUX . RPAREN r_go_sub

    RPAREN          shift and go to state 195


state 165

    (84) FUN_AUX -> EXPRESION . r_check_param COMA FUN_AUX
    (85) FUN_AUX -> EXPRESION . r_check_param
    (154) r_check_param -> .

    COMA            reduce using rule 154 (r_check_param -> .)
    RPAREN          reduce using rule 154 (r_check_param -> .)

    r_check_param                  shift and go to state 196

state 166

    (86) FUN_AUX -> empty .
    (72) SIGN -> empty .

    RPAREN          reduce using rule 86 (FUN_AUX -> empty .)
    LPAREN          reduce using rule 72 (SIGN -> empty .)
    CTE_I           reduce using rule 72 (SIGN -> empty .)
    CTE_F           reduce using rule 72 (SIGN -> empty .)
    CTE_CH          reduce using rule 72 (SIGN -> empty .)
    CTE_STRING      reduce using rule 72 (SIGN -> empty .)
    ID              reduce using rule 72 (SIGN -> empty .)


state 167

    (103) WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN .

    DOTCOMA         reduce using rule 103 (WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN .)


state 168

    (104) WRITE_AUX -> EXPRESION r_escribe . WRITE_AUXSUB
    (105) WRITE_AUXSUB -> . COMA WRITE_AUX
    (106) WRITE_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 198
    RPAREN          reduce using rule 1 (empty -> .)

    WRITE_AUXSUB                   shift and go to state 197
    empty                          shift and go to state 199

state 169

    (44) EXPRESION -> SUBEXP r_seen_subexp . EXPRESION_AUX
    (45) EXPRESION_AUX -> . AND r_seen_operator EXPRESION
    (46) EXPRESION_AUX -> . OR r_seen_operator EXPRESION
    (47) EXPRESION_AUX -> . empty
    (1) empty -> .

    AND             shift and go to state 201
    OR              shift and go to state 202
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXPRESION_AUX                  shift and go to state 200
    empty                          shift and go to state 203

state 170

    (48) SUBEXP -> EXP r_seen_exp . SUBEXP_AUX
    (49) SUBEXP_AUX -> . COMPARACION SUBEXP
    (50) SUBEXP_AUX -> . empty
    (51) COMPARACION -> . MORE r_seen_operator
    (52) COMPARACION -> . LESS r_seen_operator
    (53) COMPARACION -> . COMPARE r_seen_operator
    (54) COMPARACION -> . DIFFERENT r_seen_operator
    (55) COMPARACION -> . MOREEQUAL r_seen_operator
    (56) COMPARACION -> . LESSEQUAL r_seen_operator
    (1) empty -> .

    MORE            shift and go to state 207
    LESS            shift and go to state 208
    COMPARE         shift and go to state 209
    DIFFERENT       shift and go to state 210
    MOREEQUAL       shift and go to state 211
    LESSEQUAL       shift and go to state 212
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    SUBEXP_AUX                     shift and go to state 204
    COMPARACION                    shift and go to state 205
    empty                          shift and go to state 206

state 171

    (57) EXP -> TERMINO r_seen_term . EXP_AUX
    (58) EXP_AUX -> . PLUS r_seen_operator EXP
    (59) EXP_AUX -> . MINUS r_seen_operator EXP
    (60) EXP_AUX -> . empty
    (1) empty -> .

    PLUS            shift and go to state 214
    MINUS           shift and go to state 215
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXP_AUX                        shift and go to state 213
    empty                          shift and go to state 216

state 172

    (61) TERMINO -> FACTOR r_seen_factor . TERMINO_AUX
    (62) TERMINO_AUX -> . MULT r_seen_operator TERMINO
    (63) TERMINO_AUX -> . DIV r_seen_operator TERMINO r_seen_term
    (64) TERMINO_AUX -> . MOD r_seen_operator TERMINO r_seen_term
    (65) TERMINO_AUX -> . empty
    (1) empty -> .

    MULT            shift and go to state 218
    DIV             shift and go to state 219
    MOD             shift and go to state 220
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    TERMINO_AUX                    shift and go to state 217
    empty                          shift and go to state 221

state 173

    (66) FACTOR -> NOT r_seen_unary_operator . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    FACTOR_AUX                     shift and go to state 222
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 174

    (68) FACTOR_AUX -> SIGN LPAREN . r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 223

state 175

    (69) FACTOR_AUX -> SIGN CTE . ARROP
    (79) ARROP -> . DET_ARR r_seen_operator_mat
    (80) ARROP -> . TRANS_ARR r_seen_operator_mat
    (81) ARROP -> . INV_ARR r_seen_operator_mat
    (82) ARROP -> . empty
    (1) empty -> .

    DET_ARR         shift and go to state 225
    TRANS_ARR       shift and go to state 226
    INV_ARR         shift and go to state 227
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    ARROP                          shift and go to state 224
    empty                          shift and go to state 228

state 176

    (73) CTE -> CTE_I . r_seen_operand
    (131) r_seen_operand -> .

    DET_ARR         reduce using rule 131 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 131 (r_seen_operand -> .)
    INV_ARR         reduce using rule 131 (r_seen_operand -> .)
    MULT            reduce using rule 131 (r_seen_operand -> .)
    DIV             reduce using rule 131 (r_seen_operand -> .)
    MOD             reduce using rule 131 (r_seen_operand -> .)
    PLUS            reduce using rule 131 (r_seen_operand -> .)
    MINUS           reduce using rule 131 (r_seen_operand -> .)
    MORE            reduce using rule 131 (r_seen_operand -> .)
    LESS            reduce using rule 131 (r_seen_operand -> .)
    COMPARE         reduce using rule 131 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 131 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_operand -> .)
    AND             reduce using rule 131 (r_seen_operand -> .)
    OR              reduce using rule 131 (r_seen_operand -> .)
    COMA            reduce using rule 131 (r_seen_operand -> .)
    RPAREN          reduce using rule 131 (r_seen_operand -> .)
    HACER           reduce using rule 131 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 131 (r_seen_operand -> .)
    HASTA           reduce using rule 131 (r_seen_operand -> .)
    RBRACKET        reduce using rule 131 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 229

state 177

    (74) CTE -> CTE_F . r_seen_operand
    (131) r_seen_operand -> .

    DET_ARR         reduce using rule 131 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 131 (r_seen_operand -> .)
    INV_ARR         reduce using rule 131 (r_seen_operand -> .)
    MULT            reduce using rule 131 (r_seen_operand -> .)
    DIV             reduce using rule 131 (r_seen_operand -> .)
    MOD             reduce using rule 131 (r_seen_operand -> .)
    PLUS            reduce using rule 131 (r_seen_operand -> .)
    MINUS           reduce using rule 131 (r_seen_operand -> .)
    MORE            reduce using rule 131 (r_seen_operand -> .)
    LESS            reduce using rule 131 (r_seen_operand -> .)
    COMPARE         reduce using rule 131 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 131 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_operand -> .)
    AND             reduce using rule 131 (r_seen_operand -> .)
    OR              reduce using rule 131 (r_seen_operand -> .)
    COMA            reduce using rule 131 (r_seen_operand -> .)
    RPAREN          reduce using rule 131 (r_seen_operand -> .)
    HACER           reduce using rule 131 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 131 (r_seen_operand -> .)
    HASTA           reduce using rule 131 (r_seen_operand -> .)
    RBRACKET        reduce using rule 131 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 230

state 178

    (75) CTE -> CTE_CH . r_seen_operand
    (131) r_seen_operand -> .

    DET_ARR         reduce using rule 131 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 131 (r_seen_operand -> .)
    INV_ARR         reduce using rule 131 (r_seen_operand -> .)
    MULT            reduce using rule 131 (r_seen_operand -> .)
    DIV             reduce using rule 131 (r_seen_operand -> .)
    MOD             reduce using rule 131 (r_seen_operand -> .)
    PLUS            reduce using rule 131 (r_seen_operand -> .)
    MINUS           reduce using rule 131 (r_seen_operand -> .)
    MORE            reduce using rule 131 (r_seen_operand -> .)
    LESS            reduce using rule 131 (r_seen_operand -> .)
    COMPARE         reduce using rule 131 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 131 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_operand -> .)
    AND             reduce using rule 131 (r_seen_operand -> .)
    OR              reduce using rule 131 (r_seen_operand -> .)
    COMA            reduce using rule 131 (r_seen_operand -> .)
    RPAREN          reduce using rule 131 (r_seen_operand -> .)
    HACER           reduce using rule 131 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 131 (r_seen_operand -> .)
    HASTA           reduce using rule 131 (r_seen_operand -> .)
    RBRACKET        reduce using rule 131 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 231

state 179

    (76) CTE -> CTE_STRING . r_seen_operand
    (131) r_seen_operand -> .

    DET_ARR         reduce using rule 131 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 131 (r_seen_operand -> .)
    INV_ARR         reduce using rule 131 (r_seen_operand -> .)
    MULT            reduce using rule 131 (r_seen_operand -> .)
    DIV             reduce using rule 131 (r_seen_operand -> .)
    MOD             reduce using rule 131 (r_seen_operand -> .)
    PLUS            reduce using rule 131 (r_seen_operand -> .)
    MINUS           reduce using rule 131 (r_seen_operand -> .)
    MORE            reduce using rule 131 (r_seen_operand -> .)
    LESS            reduce using rule 131 (r_seen_operand -> .)
    COMPARE         reduce using rule 131 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 131 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_operand -> .)
    AND             reduce using rule 131 (r_seen_operand -> .)
    OR              reduce using rule 131 (r_seen_operand -> .)
    COMA            reduce using rule 131 (r_seen_operand -> .)
    RPAREN          reduce using rule 131 (r_seen_operand -> .)
    HACER           reduce using rule 131 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 131 (r_seen_operand -> .)
    HASTA           reduce using rule 131 (r_seen_operand -> .)
    RBRACKET        reduce using rule 131 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 232

state 180

    (77) CTE -> FUN .

    DET_ARR         reduce using rule 77 (CTE -> FUN .)
    TRANS_ARR       reduce using rule 77 (CTE -> FUN .)
    INV_ARR         reduce using rule 77 (CTE -> FUN .)
    MULT            reduce using rule 77 (CTE -> FUN .)
    DIV             reduce using rule 77 (CTE -> FUN .)
    MOD             reduce using rule 77 (CTE -> FUN .)
    PLUS            reduce using rule 77 (CTE -> FUN .)
    MINUS           reduce using rule 77 (CTE -> FUN .)
    MORE            reduce using rule 77 (CTE -> FUN .)
    LESS            reduce using rule 77 (CTE -> FUN .)
    COMPARE         reduce using rule 77 (CTE -> FUN .)
    DIFFERENT       reduce using rule 77 (CTE -> FUN .)
    MOREEQUAL       reduce using rule 77 (CTE -> FUN .)
    LESSEQUAL       reduce using rule 77 (CTE -> FUN .)
    AND             reduce using rule 77 (CTE -> FUN .)
    OR              reduce using rule 77 (CTE -> FUN .)
    COMA            reduce using rule 77 (CTE -> FUN .)
    RPAREN          reduce using rule 77 (CTE -> FUN .)
    HACER           reduce using rule 77 (CTE -> FUN .)
    DOTCOMA         reduce using rule 77 (CTE -> FUN .)
    HASTA           reduce using rule 77 (CTE -> FUN .)
    RBRACKET        reduce using rule 77 (CTE -> FUN .)


state 181

    (78) CTE -> ID . r_seen_operand_id ARRDIM
    (83) FUN -> ID . r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (132) r_seen_operand_id -> .
    (153) r_check_func -> .

    LSTAPLE         reduce using rule 132 (r_seen_operand_id -> .)
    DET_ARR         reduce using rule 132 (r_seen_operand_id -> .)
    TRANS_ARR       reduce using rule 132 (r_seen_operand_id -> .)
    INV_ARR         reduce using rule 132 (r_seen_operand_id -> .)
    MULT            reduce using rule 132 (r_seen_operand_id -> .)
    DIV             reduce using rule 132 (r_seen_operand_id -> .)
    MOD             reduce using rule 132 (r_seen_operand_id -> .)
    PLUS            reduce using rule 132 (r_seen_operand_id -> .)
    MINUS           reduce using rule 132 (r_seen_operand_id -> .)
    MORE            reduce using rule 132 (r_seen_operand_id -> .)
    LESS            reduce using rule 132 (r_seen_operand_id -> .)
    COMPARE         reduce using rule 132 (r_seen_operand_id -> .)
    DIFFERENT       reduce using rule 132 (r_seen_operand_id -> .)
    MOREEQUAL       reduce using rule 132 (r_seen_operand_id -> .)
    LESSEQUAL       reduce using rule 132 (r_seen_operand_id -> .)
    AND             reduce using rule 132 (r_seen_operand_id -> .)
    OR              reduce using rule 132 (r_seen_operand_id -> .)
    COMA            reduce using rule 132 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 132 (r_seen_operand_id -> .)
    HACER           reduce using rule 132 (r_seen_operand_id -> .)
    DOTCOMA         reduce using rule 132 (r_seen_operand_id -> .)
    HASTA           reduce using rule 132 (r_seen_operand_id -> .)
    RBRACKET        reduce using rule 132 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 153 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 233
    r_check_func                   shift and go to state 128

state 182

    (70) SIGN -> PLUS r_seen_unary_operator .

    LPAREN          reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_I           reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_F           reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)
    ID              reduce using rule 70 (SIGN -> PLUS r_seen_unary_operator .)


state 183

    (71) SIGN -> MINUS r_seen_unary_operator .

    LPAREN          reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_I           reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_F           reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)
    ID              reduce using rule 71 (SIGN -> MINUS r_seen_unary_operator .)


state 184

    (107) READ -> LEE LPAREN READ_AUX RPAREN .

    DOTCOMA         reduce using rule 107 (READ -> LEE LPAREN READ_AUX RPAREN .)


state 185

    (108) READ_AUX -> ID r_seen_operand_id . ARRDIM r_lee READ_AUXSUB
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (126) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 126 (r_register_arr -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 234
    r_register_arr                 shift and go to state 39
    empty                          shift and go to state 40

state 186

    (111) RETURN -> REGRESA LPAREN EXPRESION RPAREN . r_regresa
    (157) r_regresa -> .

    DOTCOMA         reduce using rule 157 (r_regresa -> .)

    r_regresa                      shift and go to state 235

state 187

    (112) RETURN -> REGRESA LPAREN NULL RPAREN .

    DOTCOMA         reduce using rule 112 (RETURN -> REGRESA LPAREN NULL RPAREN .)


state 188

    (90) IF -> SI LPAREN EXPRESION r_check_int . RPAREN ENTONCES IF2 r_if_end

    RPAREN          shift and go to state 236


state 189

    (100) FOR -> DESDE ASIGNACION HASTA EXPRESION . r_for_gen HACER FOR2 r_for_end
    (147) r_for_gen -> .

    HACER           reduce using rule 147 (r_for_gen -> .)

    r_for_gen                      shift and go to state 237

state 190

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION . r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (142) r_check_int -> .

    RPAREN          reduce using rule 142 (r_check_int -> .)

    r_check_int                    shift and go to state 238

state 191

    (38) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator . EXPRESION r_seen_equal
    (39) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator . CTE_ARR
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (113) CTE_ARR -> . LBRACKET CTE_ARR_AUX RBRACKET
    (114) CTE_ARR -> . LBRACKET CTE_ARR_AUX2 RBRACKET
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    LBRACKET        shift and go to state 241
    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 239
    CTE_ARR                        shift and go to state 240
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 192

    (40) ARRACC -> LSTAPLE CTE_I ARRACC_AUX . RSTAPLE ARRACC_AUX

    RSTAPLE         shift and go to state 242


state 193

    (42) ARRACC_AUX -> COMA . CTE_I ARRACC_AUX

    CTE_I           shift and go to state 243


state 194

    (43) ARRACC_AUX -> empty .

    RSTAPLE         reduce using rule 43 (ARRACC_AUX -> empty .)
    EQUAL           reduce using rule 43 (ARRACC_AUX -> empty .)


state 195

    (83) FUN -> ID r_check_func LPAREN FUN_AUX RPAREN . r_go_sub
    (155) r_go_sub -> .

    DOTCOMA         reduce using rule 155 (r_go_sub -> .)
    DET_ARR         reduce using rule 155 (r_go_sub -> .)
    TRANS_ARR       reduce using rule 155 (r_go_sub -> .)
    INV_ARR         reduce using rule 155 (r_go_sub -> .)
    MULT            reduce using rule 155 (r_go_sub -> .)
    DIV             reduce using rule 155 (r_go_sub -> .)
    MOD             reduce using rule 155 (r_go_sub -> .)
    PLUS            reduce using rule 155 (r_go_sub -> .)
    MINUS           reduce using rule 155 (r_go_sub -> .)
    MORE            reduce using rule 155 (r_go_sub -> .)
    LESS            reduce using rule 155 (r_go_sub -> .)
    COMPARE         reduce using rule 155 (r_go_sub -> .)
    DIFFERENT       reduce using rule 155 (r_go_sub -> .)
    MOREEQUAL       reduce using rule 155 (r_go_sub -> .)
    LESSEQUAL       reduce using rule 155 (r_go_sub -> .)
    AND             reduce using rule 155 (r_go_sub -> .)
    OR              reduce using rule 155 (r_go_sub -> .)
    COMA            reduce using rule 155 (r_go_sub -> .)
    RPAREN          reduce using rule 155 (r_go_sub -> .)
    HACER           reduce using rule 155 (r_go_sub -> .)
    HASTA           reduce using rule 155 (r_go_sub -> .)
    RBRACKET        reduce using rule 155 (r_go_sub -> .)

    r_go_sub                       shift and go to state 244

state 196

    (84) FUN_AUX -> EXPRESION r_check_param . COMA FUN_AUX
    (85) FUN_AUX -> EXPRESION r_check_param .

    COMA            shift and go to state 245
    RPAREN          reduce using rule 85 (FUN_AUX -> EXPRESION r_check_param .)


state 197

    (104) WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB .

    RPAREN          reduce using rule 104 (WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB .)


state 198

    (105) WRITE_AUXSUB -> COMA . WRITE_AUX
    (104) WRITE_AUX -> . EXPRESION r_escribe WRITE_AUXSUB
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 246
    EXPRESION                      shift and go to state 143
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 199

    (106) WRITE_AUXSUB -> empty .

    RPAREN          reduce using rule 106 (WRITE_AUXSUB -> empty .)


state 200

    (44) EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .

    COMA            reduce using rule 44 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    RPAREN          reduce using rule 44 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HACER           reduce using rule 44 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    DOTCOMA         reduce using rule 44 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HASTA           reduce using rule 44 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)


state 201

    (45) EXPRESION_AUX -> AND . r_seen_operator EXPRESION
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 247

state 202

    (46) EXPRESION_AUX -> OR . r_seen_operator EXPRESION
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 248

state 203

    (47) EXPRESION_AUX -> empty .

    COMA            reduce using rule 47 (EXPRESION_AUX -> empty .)
    RPAREN          reduce using rule 47 (EXPRESION_AUX -> empty .)
    HACER           reduce using rule 47 (EXPRESION_AUX -> empty .)
    DOTCOMA         reduce using rule 47 (EXPRESION_AUX -> empty .)
    HASTA           reduce using rule 47 (EXPRESION_AUX -> empty .)


state 204

    (48) SUBEXP -> EXP r_seen_exp SUBEXP_AUX .

    AND             reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    OR              reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    COMA            reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    RPAREN          reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HACER           reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    DOTCOMA         reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HASTA           reduce using rule 48 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)


state 205

    (49) SUBEXP_AUX -> COMPARACION . SUBEXP
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SUBEXP                         shift and go to state 249
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 206

    (50) SUBEXP_AUX -> empty .

    AND             reduce using rule 50 (SUBEXP_AUX -> empty .)
    OR              reduce using rule 50 (SUBEXP_AUX -> empty .)
    COMA            reduce using rule 50 (SUBEXP_AUX -> empty .)
    RPAREN          reduce using rule 50 (SUBEXP_AUX -> empty .)
    HACER           reduce using rule 50 (SUBEXP_AUX -> empty .)
    DOTCOMA         reduce using rule 50 (SUBEXP_AUX -> empty .)
    HASTA           reduce using rule 50 (SUBEXP_AUX -> empty .)


state 207

    (51) COMPARACION -> MORE . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 250

state 208

    (52) COMPARACION -> LESS . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 251

state 209

    (53) COMPARACION -> COMPARE . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 252

state 210

    (54) COMPARACION -> DIFFERENT . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 253

state 211

    (55) COMPARACION -> MOREEQUAL . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 254

state 212

    (56) COMPARACION -> LESSEQUAL . r_seen_operator
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 255

state 213

    (57) EXP -> TERMINO r_seen_term EXP_AUX .

    MORE            reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESS            reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMPARE         reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DIFFERENT       reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    MOREEQUAL       reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESSEQUAL       reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    AND             reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    OR              reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMA            reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    RPAREN          reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HACER           reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DOTCOMA         reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HASTA           reduce using rule 57 (EXP -> TERMINO r_seen_term EXP_AUX .)


state 214

    (58) EXP_AUX -> PLUS . r_seen_operator EXP
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 256

state 215

    (59) EXP_AUX -> MINUS . r_seen_operator EXP
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 257

state 216

    (60) EXP_AUX -> empty .

    MORE            reduce using rule 60 (EXP_AUX -> empty .)
    LESS            reduce using rule 60 (EXP_AUX -> empty .)
    COMPARE         reduce using rule 60 (EXP_AUX -> empty .)
    DIFFERENT       reduce using rule 60 (EXP_AUX -> empty .)
    MOREEQUAL       reduce using rule 60 (EXP_AUX -> empty .)
    LESSEQUAL       reduce using rule 60 (EXP_AUX -> empty .)
    AND             reduce using rule 60 (EXP_AUX -> empty .)
    OR              reduce using rule 60 (EXP_AUX -> empty .)
    COMA            reduce using rule 60 (EXP_AUX -> empty .)
    RPAREN          reduce using rule 60 (EXP_AUX -> empty .)
    HACER           reduce using rule 60 (EXP_AUX -> empty .)
    DOTCOMA         reduce using rule 60 (EXP_AUX -> empty .)
    HASTA           reduce using rule 60 (EXP_AUX -> empty .)


state 217

    (61) TERMINO -> FACTOR r_seen_factor TERMINO_AUX .

    PLUS            reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MINUS           reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MORE            reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESS            reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMPARE         reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DIFFERENT       reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MOREEQUAL       reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESSEQUAL       reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    AND             reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    OR              reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMA            reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    RPAREN          reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HACER           reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DOTCOMA         reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HASTA           reduce using rule 61 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)


state 218

    (62) TERMINO_AUX -> MULT . r_seen_operator TERMINO
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 258

state 219

    (63) TERMINO_AUX -> DIV . r_seen_operator TERMINO r_seen_term
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 259

state 220

    (64) TERMINO_AUX -> MOD . r_seen_operator TERMINO r_seen_term
    (133) r_seen_operator -> .

    NOT             reduce using rule 133 (r_seen_operator -> .)
    PLUS            reduce using rule 133 (r_seen_operator -> .)
    MINUS           reduce using rule 133 (r_seen_operator -> .)
    LPAREN          reduce using rule 133 (r_seen_operator -> .)
    CTE_I           reduce using rule 133 (r_seen_operator -> .)
    CTE_F           reduce using rule 133 (r_seen_operator -> .)
    CTE_CH          reduce using rule 133 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 133 (r_seen_operator -> .)
    ID              reduce using rule 133 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 260

state 221

    (65) TERMINO_AUX -> empty .

    PLUS            reduce using rule 65 (TERMINO_AUX -> empty .)
    MINUS           reduce using rule 65 (TERMINO_AUX -> empty .)
    MORE            reduce using rule 65 (TERMINO_AUX -> empty .)
    LESS            reduce using rule 65 (TERMINO_AUX -> empty .)
    COMPARE         reduce using rule 65 (TERMINO_AUX -> empty .)
    DIFFERENT       reduce using rule 65 (TERMINO_AUX -> empty .)
    MOREEQUAL       reduce using rule 65 (TERMINO_AUX -> empty .)
    LESSEQUAL       reduce using rule 65 (TERMINO_AUX -> empty .)
    AND             reduce using rule 65 (TERMINO_AUX -> empty .)
    OR              reduce using rule 65 (TERMINO_AUX -> empty .)
    COMA            reduce using rule 65 (TERMINO_AUX -> empty .)
    RPAREN          reduce using rule 65 (TERMINO_AUX -> empty .)
    HACER           reduce using rule 65 (TERMINO_AUX -> empty .)
    DOTCOMA         reduce using rule 65 (TERMINO_AUX -> empty .)
    HASTA           reduce using rule 65 (TERMINO_AUX -> empty .)


state 222

    (66) FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .

    MULT            reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIV             reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOD             reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    PLUS            reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MINUS           reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MORE            reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESS            reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMPARE         reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIFFERENT       reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOREEQUAL       reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESSEQUAL       reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    AND             reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    OR              reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMA            reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    RPAREN          reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HACER           reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DOTCOMA         reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HASTA           reduce using rule 66 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)


state 223

    (68) FACTOR_AUX -> SIGN LPAREN r_seen_operator . EXPRESION RPAREN r_pop_fake_bottom
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SIGN                           shift and go to state 150
    EXPRESION                      shift and go to state 261
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    empty                          shift and go to state 153

state 224

    (69) FACTOR_AUX -> SIGN CTE ARROP .

    MULT            reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIV             reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOD             reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    PLUS            reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    MINUS           reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    MORE            reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESS            reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMPARE         reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIFFERENT       reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOREEQUAL       reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESSEQUAL       reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    AND             reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    OR              reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMA            reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    RPAREN          reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    HACER           reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    DOTCOMA         reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)
    HASTA           reduce using rule 69 (FACTOR_AUX -> SIGN CTE ARROP .)


state 225

    (79) ARROP -> DET_ARR . r_seen_operator_mat
    (140) r_seen_operator_mat -> .

    MULT            reduce using rule 140 (r_seen_operator_mat -> .)
    DIV             reduce using rule 140 (r_seen_operator_mat -> .)
    MOD             reduce using rule 140 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 140 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 140 (r_seen_operator_mat -> .)
    MORE            reduce using rule 140 (r_seen_operator_mat -> .)
    LESS            reduce using rule 140 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 140 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 140 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    AND             reduce using rule 140 (r_seen_operator_mat -> .)
    OR              reduce using rule 140 (r_seen_operator_mat -> .)
    COMA            reduce using rule 140 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 140 (r_seen_operator_mat -> .)
    HACER           reduce using rule 140 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 140 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 140 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 262

state 226

    (80) ARROP -> TRANS_ARR . r_seen_operator_mat
    (140) r_seen_operator_mat -> .

    MULT            reduce using rule 140 (r_seen_operator_mat -> .)
    DIV             reduce using rule 140 (r_seen_operator_mat -> .)
    MOD             reduce using rule 140 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 140 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 140 (r_seen_operator_mat -> .)
    MORE            reduce using rule 140 (r_seen_operator_mat -> .)
    LESS            reduce using rule 140 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 140 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 140 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    AND             reduce using rule 140 (r_seen_operator_mat -> .)
    OR              reduce using rule 140 (r_seen_operator_mat -> .)
    COMA            reduce using rule 140 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 140 (r_seen_operator_mat -> .)
    HACER           reduce using rule 140 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 140 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 140 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 263

state 227

    (81) ARROP -> INV_ARR . r_seen_operator_mat
    (140) r_seen_operator_mat -> .

    MULT            reduce using rule 140 (r_seen_operator_mat -> .)
    DIV             reduce using rule 140 (r_seen_operator_mat -> .)
    MOD             reduce using rule 140 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 140 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 140 (r_seen_operator_mat -> .)
    MORE            reduce using rule 140 (r_seen_operator_mat -> .)
    LESS            reduce using rule 140 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 140 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 140 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 140 (r_seen_operator_mat -> .)
    AND             reduce using rule 140 (r_seen_operator_mat -> .)
    OR              reduce using rule 140 (r_seen_operator_mat -> .)
    COMA            reduce using rule 140 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 140 (r_seen_operator_mat -> .)
    HACER           reduce using rule 140 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 140 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 140 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 264

state 228

    (82) ARROP -> empty .

    MULT            reduce using rule 82 (ARROP -> empty .)
    DIV             reduce using rule 82 (ARROP -> empty .)
    MOD             reduce using rule 82 (ARROP -> empty .)
    PLUS            reduce using rule 82 (ARROP -> empty .)
    MINUS           reduce using rule 82 (ARROP -> empty .)
    MORE            reduce using rule 82 (ARROP -> empty .)
    LESS            reduce using rule 82 (ARROP -> empty .)
    COMPARE         reduce using rule 82 (ARROP -> empty .)
    DIFFERENT       reduce using rule 82 (ARROP -> empty .)
    MOREEQUAL       reduce using rule 82 (ARROP -> empty .)
    LESSEQUAL       reduce using rule 82 (ARROP -> empty .)
    AND             reduce using rule 82 (ARROP -> empty .)
    OR              reduce using rule 82 (ARROP -> empty .)
    COMA            reduce using rule 82 (ARROP -> empty .)
    RPAREN          reduce using rule 82 (ARROP -> empty .)
    HACER           reduce using rule 82 (ARROP -> empty .)
    DOTCOMA         reduce using rule 82 (ARROP -> empty .)
    HASTA           reduce using rule 82 (ARROP -> empty .)


state 229

    (73) CTE -> CTE_I r_seen_operand .

    DET_ARR         reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    TRANS_ARR       reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    INV_ARR         reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    MULT            reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    DIV             reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    MOD             reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    PLUS            reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    MINUS           reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    MORE            reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    LESS            reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    COMPARE         reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    DIFFERENT       reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    MOREEQUAL       reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    LESSEQUAL       reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    AND             reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    OR              reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    COMA            reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    RPAREN          reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    HACER           reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    DOTCOMA         reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    HASTA           reduce using rule 73 (CTE -> CTE_I r_seen_operand .)
    RBRACKET        reduce using rule 73 (CTE -> CTE_I r_seen_operand .)


state 230

    (74) CTE -> CTE_F r_seen_operand .

    DET_ARR         reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    TRANS_ARR       reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    INV_ARR         reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    MULT            reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    DIV             reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    MOD             reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    PLUS            reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    MINUS           reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    MORE            reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    LESS            reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    COMPARE         reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    DIFFERENT       reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    MOREEQUAL       reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    LESSEQUAL       reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    AND             reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    OR              reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    COMA            reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    RPAREN          reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    HACER           reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    DOTCOMA         reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    HASTA           reduce using rule 74 (CTE -> CTE_F r_seen_operand .)
    RBRACKET        reduce using rule 74 (CTE -> CTE_F r_seen_operand .)


state 231

    (75) CTE -> CTE_CH r_seen_operand .

    DET_ARR         reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    TRANS_ARR       reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    INV_ARR         reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    MULT            reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    DIV             reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    MOD             reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    PLUS            reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    MINUS           reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    MORE            reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    LESS            reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    COMPARE         reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    DIFFERENT       reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    MOREEQUAL       reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    LESSEQUAL       reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    AND             reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    OR              reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    COMA            reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    RPAREN          reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    HACER           reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    DOTCOMA         reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    HASTA           reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)
    RBRACKET        reduce using rule 75 (CTE -> CTE_CH r_seen_operand .)


state 232

    (76) CTE -> CTE_STRING r_seen_operand .

    DET_ARR         reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    TRANS_ARR       reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    INV_ARR         reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    MULT            reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    DIV             reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    MOD             reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    PLUS            reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    MINUS           reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    MORE            reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    LESS            reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    COMPARE         reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    DIFFERENT       reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    MOREEQUAL       reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    LESSEQUAL       reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    AND             reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    OR              reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    COMA            reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    RPAREN          reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    HACER           reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    DOTCOMA         reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    HASTA           reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)
    RBRACKET        reduce using rule 76 (CTE -> CTE_STRING r_seen_operand .)


state 233

    (78) CTE -> ID r_seen_operand_id . ARRDIM
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (126) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 126 (r_register_arr -> .)
    DET_ARR         reduce using rule 1 (empty -> .)
    TRANS_ARR       reduce using rule 1 (empty -> .)
    INV_ARR         reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 265
    r_register_arr                 shift and go to state 39
    empty                          shift and go to state 40

state 234

    (108) READ_AUX -> ID r_seen_operand_id ARRDIM . r_lee READ_AUXSUB
    (159) r_lee -> .

    COMA            reduce using rule 159 (r_lee -> .)
    RPAREN          reduce using rule 159 (r_lee -> .)

    r_lee                          shift and go to state 266

state 235

    (111) RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .

    DOTCOMA         reduce using rule 111 (RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .)


state 236

    (90) IF -> SI LPAREN EXPRESION r_check_int RPAREN . ENTONCES IF2 r_if_end

    ENTONCES        shift and go to state 267


state 237

    (100) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen . HACER FOR2 r_for_end

    HACER           shift and go to state 268


state 238

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int . RPAREN WHILE_AUX WHILE2 r_while_end

    RPAREN          shift and go to state 269


state 239

    (38) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION . r_seen_equal
    (135) r_seen_equal -> .

    DOTCOMA         reduce using rule 135 (r_seen_equal -> .)
    HASTA           reduce using rule 135 (r_seen_equal -> .)

    r_seen_equal                   shift and go to state 270

state 240

    (39) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR .

    DOTCOMA         reduce using rule 39 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR .)
    HASTA           reduce using rule 39 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator CTE_ARR .)


state 241

    (113) CTE_ARR -> LBRACKET . CTE_ARR_AUX RBRACKET
    (114) CTE_ARR -> LBRACKET . CTE_ARR_AUX2 RBRACKET
    (115) CTE_ARR_AUX -> . CTE
    (116) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (119) CTE_ARR_AUX2 -> . LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
    (73) CTE -> . CTE_I r_seen_operand
    (74) CTE -> . CTE_F r_seen_operand
    (75) CTE -> . CTE_CH r_seen_operand
    (76) CTE -> . CTE_STRING r_seen_operand
    (77) CTE -> . FUN
    (78) CTE -> . ID r_seen_operand_id ARRDIM
    (117) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (118) CTE_ARR_AUXSUB -> . empty
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    LBRACKET        shift and go to state 271
    CTE_I           shift and go to state 176
    CTE_F           shift and go to state 177
    CTE_CH          shift and go to state 178
    CTE_STRING      shift and go to state 179
    ID              shift and go to state 181
    COMA            shift and go to state 276
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 272
    CTE_ARR_AUX2                   shift and go to state 273
    CTE                            shift and go to state 274
    CTE_ARR_AUXSUB                 shift and go to state 275
    FUN                            shift and go to state 180
    empty                          shift and go to state 277

state 242

    (40) ARRACC -> LSTAPLE CTE_I ARRACC_AUX RSTAPLE . ARRACC_AUX
    (42) ARRACC_AUX -> . COMA CTE_I ARRACC_AUX
    (43) ARRACC_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 193
    EQUAL           reduce using rule 1 (empty -> .)

    ARRACC_AUX                     shift and go to state 278
    empty                          shift and go to state 194

state 243

    (42) ARRACC_AUX -> COMA CTE_I . ARRACC_AUX
    (42) ARRACC_AUX -> . COMA CTE_I ARRACC_AUX
    (43) ARRACC_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 193
    RSTAPLE         reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)

    ARRACC_AUX                     shift and go to state 279
    empty                          shift and go to state 194

state 244

    (83) FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .

    DOTCOMA         reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DET_ARR         reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    TRANS_ARR       reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    INV_ARR         reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MULT            reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DIV             reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MOD             reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    PLUS            reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MINUS           reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MORE            reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    LESS            reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    COMPARE         reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    DIFFERENT       reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    MOREEQUAL       reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    LESSEQUAL       reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    AND             reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    OR              reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    COMA            reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    RPAREN          reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    HACER           reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    HASTA           reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)
    RBRACKET        reduce using rule 83 (FUN -> ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub .)


state 245

    (84) FUN_AUX -> EXPRESION r_check_param COMA . FUN_AUX
    (84) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (85) FUN_AUX -> . EXPRESION r_check_param
    (86) FUN_AUX -> . empty
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152

    EXPRESION                      shift and go to state 165
    FUN_AUX                        shift and go to state 280
    empty                          shift and go to state 166
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150

state 246

    (105) WRITE_AUXSUB -> COMA WRITE_AUX .

    RPAREN          reduce using rule 105 (WRITE_AUXSUB -> COMA WRITE_AUX .)


state 247

    (45) EXPRESION_AUX -> AND r_seen_operator . EXPRESION
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 281
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 248

    (46) EXPRESION_AUX -> OR r_seen_operator . EXPRESION
    (44) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (48) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 282
    SUBEXP                         shift and go to state 144
    EXP                            shift and go to state 145
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 249

    (49) SUBEXP_AUX -> COMPARACION SUBEXP .

    AND             reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    OR              reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    COMA            reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    RPAREN          reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HACER           reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    DOTCOMA         reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HASTA           reduce using rule 49 (SUBEXP_AUX -> COMPARACION SUBEXP .)


state 250

    (51) COMPARACION -> MORE r_seen_operator .

    NOT             reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    PLUS            reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    MINUS           reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    LPAREN          reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    CTE_I           reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    CTE_F           reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    CTE_CH          reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    CTE_STRING      reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)
    ID              reduce using rule 51 (COMPARACION -> MORE r_seen_operator .)


state 251

    (52) COMPARACION -> LESS r_seen_operator .

    NOT             reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    PLUS            reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    MINUS           reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    LPAREN          reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    CTE_I           reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    CTE_F           reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    CTE_CH          reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    CTE_STRING      reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)
    ID              reduce using rule 52 (COMPARACION -> LESS r_seen_operator .)


state 252

    (53) COMPARACION -> COMPARE r_seen_operator .

    NOT             reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    PLUS            reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    MINUS           reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    LPAREN          reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_I           reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_F           reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_CH          reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_STRING      reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)
    ID              reduce using rule 53 (COMPARACION -> COMPARE r_seen_operator .)


state 253

    (54) COMPARACION -> DIFFERENT r_seen_operator .

    NOT             reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    PLUS            reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    MINUS           reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    LPAREN          reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_I           reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_F           reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_CH          reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_STRING      reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)
    ID              reduce using rule 54 (COMPARACION -> DIFFERENT r_seen_operator .)


state 254

    (55) COMPARACION -> MOREEQUAL r_seen_operator .

    NOT             reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    PLUS            reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    MINUS           reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    LPAREN          reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_I           reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_F           reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)
    ID              reduce using rule 55 (COMPARACION -> MOREEQUAL r_seen_operator .)


state 255

    (56) COMPARACION -> LESSEQUAL r_seen_operator .

    NOT             reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    PLUS            reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    MINUS           reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    LPAREN          reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_I           reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_F           reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)
    ID              reduce using rule 56 (COMPARACION -> LESSEQUAL r_seen_operator .)


state 256

    (58) EXP_AUX -> PLUS r_seen_operator . EXP
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 283
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 257

    (59) EXP_AUX -> MINUS r_seen_operator . EXP
    (57) EXP -> . TERMINO r_seen_term EXP_AUX
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 284
    TERMINO                        shift and go to state 146
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 258

    (62) TERMINO_AUX -> MULT r_seen_operator . TERMINO
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 285
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 259

    (63) TERMINO_AUX -> DIV r_seen_operator . TERMINO r_seen_term
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 286
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 260

    (64) TERMINO_AUX -> MOD r_seen_operator . TERMINO r_seen_term
    (61) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (66) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (67) FACTOR -> . FACTOR_AUX
    (68) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (69) FACTOR_AUX -> . SIGN CTE ARROP
    (70) SIGN -> . PLUS r_seen_unary_operator
    (71) SIGN -> . MINUS r_seen_unary_operator
    (72) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 148
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 287
    FACTOR                         shift and go to state 147
    FACTOR_AUX                     shift and go to state 149
    SIGN                           shift and go to state 150
    empty                          shift and go to state 153

state 261

    (68) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION . RPAREN r_pop_fake_bottom

    RPAREN          shift and go to state 288


state 262

    (79) ARROP -> DET_ARR r_seen_operator_mat .

    MULT            reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIV             reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOD             reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    MORE            reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESS            reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    AND             reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    OR              reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMA            reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    HACER           reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 79 (ARROP -> DET_ARR r_seen_operator_mat .)


state 263

    (80) ARROP -> TRANS_ARR r_seen_operator_mat .

    MULT            reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIV             reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOD             reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MORE            reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESS            reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    AND             reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    OR              reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMA            reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HACER           reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 80 (ARROP -> TRANS_ARR r_seen_operator_mat .)


state 264

    (81) ARROP -> INV_ARR r_seen_operator_mat .

    MULT            reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIV             reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOD             reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    MORE            reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESS            reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    AND             reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    OR              reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMA            reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    HACER           reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 81 (ARROP -> INV_ARR r_seen_operator_mat .)


state 265

    (78) CTE -> ID r_seen_operand_id ARRDIM .

    DET_ARR         reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    TRANS_ARR       reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    INV_ARR         reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    MULT            reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    DIV             reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    MOD             reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    PLUS            reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    MINUS           reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    MORE            reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    LESS            reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    COMPARE         reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    DIFFERENT       reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    MOREEQUAL       reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    LESSEQUAL       reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    AND             reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    OR              reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    COMA            reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    RPAREN          reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    HACER           reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    DOTCOMA         reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    HASTA           reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)
    RBRACKET        reduce using rule 78 (CTE -> ID r_seen_operand_id ARRDIM .)


state 266

    (108) READ_AUX -> ID r_seen_operand_id ARRDIM r_lee . READ_AUXSUB
    (109) READ_AUXSUB -> . COMA READ_AUX
    (110) READ_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 290
    RPAREN          reduce using rule 1 (empty -> .)

    READ_AUXSUB                    shift and go to state 289
    empty                          shift and go to state 291

state 267

    (90) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES . IF2 r_if_end
    (91) IF2 -> . BLOQUE IF_AUX
    (92) IF2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (87) COND -> . IF
    (88) COND -> . FOR
    (89) COND -> . WHILE
    (90) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (100) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (95) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 92
    SI              shift and go to state 114
    DESDE           shift and go to state 115
    MIENTRAS        shift and go to state 116

    IF2                            shift and go to state 292
    BLOQUE                         shift and go to state 293
    COND                           shift and go to state 294
    IF                             shift and go to state 108
    FOR                            shift and go to state 109
    WHILE                          shift and go to state 110

state 268

    (100) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER . FOR2 r_for_end
    (101) FOR2 -> . BLOQUE
    (102) FOR2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (87) COND -> . IF
    (88) COND -> . FOR
    (89) COND -> . WHILE
    (90) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (100) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (95) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 92
    SI              shift and go to state 114
    DESDE           shift and go to state 115
    MIENTRAS        shift and go to state 116

    FOR2                           shift and go to state 295
    BLOQUE                         shift and go to state 296
    COND                           shift and go to state 297
    IF                             shift and go to state 108
    FOR                            shift and go to state 109
    WHILE                          shift and go to state 110

state 269

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN . WHILE_AUX WHILE2 r_while_end
    (98) WHILE_AUX -> . HAZ
    (99) WHILE_AUX -> . empty
    (1) empty -> .

    HAZ             shift and go to state 299
    LBRACKET        reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)

    WHILE_AUX                      shift and go to state 298
    empty                          shift and go to state 300

state 270

    (38) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .

    DOTCOMA         reduce using rule 38 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .)
    HASTA           reduce using rule 38 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .)


state 271

    (119) CTE_ARR_AUX2 -> LBRACKET . CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB
    (115) CTE_ARR_AUX -> . CTE
    (116) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (73) CTE -> . CTE_I r_seen_operand
    (74) CTE -> . CTE_F r_seen_operand
    (75) CTE -> . CTE_CH r_seen_operand
    (76) CTE -> . CTE_STRING r_seen_operand
    (77) CTE -> . FUN
    (78) CTE -> . ID r_seen_operand_id ARRDIM
    (117) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (118) CTE_ARR_AUXSUB -> . empty
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    CTE_I           shift and go to state 176
    CTE_F           shift and go to state 177
    CTE_CH          shift and go to state 178
    CTE_STRING      shift and go to state 179
    ID              shift and go to state 181
    COMA            shift and go to state 276
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 301
    CTE                            shift and go to state 274
    CTE_ARR_AUXSUB                 shift and go to state 275
    FUN                            shift and go to state 180
    empty                          shift and go to state 277

state 272

    (113) CTE_ARR -> LBRACKET CTE_ARR_AUX . RBRACKET

    RBRACKET        shift and go to state 302


state 273

    (114) CTE_ARR -> LBRACKET CTE_ARR_AUX2 . RBRACKET

    RBRACKET        shift and go to state 303


state 274

    (115) CTE_ARR_AUX -> CTE .

    RBRACKET        reduce using rule 115 (CTE_ARR_AUX -> CTE .)


state 275

    (116) CTE_ARR_AUX -> CTE_ARR_AUXSUB .

    RBRACKET        reduce using rule 116 (CTE_ARR_AUX -> CTE_ARR_AUXSUB .)


state 276

    (117) CTE_ARR_AUXSUB -> COMA . CTE_ARR_AUX
    (115) CTE_ARR_AUX -> . CTE
    (116) CTE_ARR_AUX -> . CTE_ARR_AUXSUB
    (73) CTE -> . CTE_I r_seen_operand
    (74) CTE -> . CTE_F r_seen_operand
    (75) CTE -> . CTE_CH r_seen_operand
    (76) CTE -> . CTE_STRING r_seen_operand
    (77) CTE -> . FUN
    (78) CTE -> . ID r_seen_operand_id ARRDIM
    (117) CTE_ARR_AUXSUB -> . COMA CTE_ARR_AUX
    (118) CTE_ARR_AUXSUB -> . empty
    (83) FUN -> . ID r_check_func LPAREN FUN_AUX RPAREN r_go_sub
    (1) empty -> .

    CTE_I           shift and go to state 176
    CTE_F           shift and go to state 177
    CTE_CH          shift and go to state 178
    CTE_STRING      shift and go to state 179
    ID              shift and go to state 181
    COMA            shift and go to state 276
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX                    shift and go to state 304
    CTE                            shift and go to state 274
    CTE_ARR_AUXSUB                 shift and go to state 275
    FUN                            shift and go to state 180
    empty                          shift and go to state 277

state 277

    (118) CTE_ARR_AUXSUB -> empty .

    RBRACKET        reduce using rule 118 (CTE_ARR_AUXSUB -> empty .)


state 278

    (40) ARRACC -> LSTAPLE CTE_I ARRACC_AUX RSTAPLE ARRACC_AUX .

    EQUAL           reduce using rule 40 (ARRACC -> LSTAPLE CTE_I ARRACC_AUX RSTAPLE ARRACC_AUX .)


state 279

    (42) ARRACC_AUX -> COMA CTE_I ARRACC_AUX .

    RSTAPLE         reduce using rule 42 (ARRACC_AUX -> COMA CTE_I ARRACC_AUX .)
    EQUAL           reduce using rule 42 (ARRACC_AUX -> COMA CTE_I ARRACC_AUX .)


state 280

    (84) FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .

    RPAREN          reduce using rule 84 (FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .)


state 281

    (45) EXPRESION_AUX -> AND r_seen_operator EXPRESION .

    COMA            reduce using rule 45 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 45 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HACER           reduce using rule 45 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 45 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HASTA           reduce using rule 45 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)


state 282

    (46) EXPRESION_AUX -> OR r_seen_operator EXPRESION .

    COMA            reduce using rule 46 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 46 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HACER           reduce using rule 46 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 46 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HASTA           reduce using rule 46 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)


state 283

    (58) EXP_AUX -> PLUS r_seen_operator EXP .

    MORE            reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESS            reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMPARE         reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    AND             reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    OR              reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMA            reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    RPAREN          reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HACER           reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HASTA           reduce using rule 58 (EXP_AUX -> PLUS r_seen_operator EXP .)


state 284

    (59) EXP_AUX -> MINUS r_seen_operator EXP .

    MORE            reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESS            reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMPARE         reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    AND             reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    OR              reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMA            reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    RPAREN          reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HACER           reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HASTA           reduce using rule 59 (EXP_AUX -> MINUS r_seen_operator EXP .)


state 285

    (62) TERMINO_AUX -> MULT r_seen_operator TERMINO .

    PLUS            reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MINUS           reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MORE            reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    LESS            reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    COMPARE         reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    DIFFERENT       reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    MOREEQUAL       reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    LESSEQUAL       reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    AND             reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    OR              reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    COMA            reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    RPAREN          reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    HACER           reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    DOTCOMA         reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)
    HASTA           reduce using rule 62 (TERMINO_AUX -> MULT r_seen_operator TERMINO .)


state 286

    (63) TERMINO_AUX -> DIV r_seen_operator TERMINO . r_seen_term
    (138) r_seen_term -> .

    PLUS            reduce using rule 138 (r_seen_term -> .)
    MINUS           reduce using rule 138 (r_seen_term -> .)
    MORE            reduce using rule 138 (r_seen_term -> .)
    LESS            reduce using rule 138 (r_seen_term -> .)
    COMPARE         reduce using rule 138 (r_seen_term -> .)
    DIFFERENT       reduce using rule 138 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 138 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 138 (r_seen_term -> .)
    AND             reduce using rule 138 (r_seen_term -> .)
    OR              reduce using rule 138 (r_seen_term -> .)
    COMA            reduce using rule 138 (r_seen_term -> .)
    RPAREN          reduce using rule 138 (r_seen_term -> .)
    HACER           reduce using rule 138 (r_seen_term -> .)
    DOTCOMA         reduce using rule 138 (r_seen_term -> .)
    HASTA           reduce using rule 138 (r_seen_term -> .)

    r_seen_term                    shift and go to state 305

state 287

    (64) TERMINO_AUX -> MOD r_seen_operator TERMINO . r_seen_term
    (138) r_seen_term -> .

    PLUS            reduce using rule 138 (r_seen_term -> .)
    MINUS           reduce using rule 138 (r_seen_term -> .)
    MORE            reduce using rule 138 (r_seen_term -> .)
    LESS            reduce using rule 138 (r_seen_term -> .)
    COMPARE         reduce using rule 138 (r_seen_term -> .)
    DIFFERENT       reduce using rule 138 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 138 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 138 (r_seen_term -> .)
    AND             reduce using rule 138 (r_seen_term -> .)
    OR              reduce using rule 138 (r_seen_term -> .)
    COMA            reduce using rule 138 (r_seen_term -> .)
    RPAREN          reduce using rule 138 (r_seen_term -> .)
    HACER           reduce using rule 138 (r_seen_term -> .)
    DOTCOMA         reduce using rule 138 (r_seen_term -> .)
    HASTA           reduce using rule 138 (r_seen_term -> .)

    r_seen_term                    shift and go to state 306

state 288

    (68) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN . r_pop_fake_bottom
    (141) r_pop_fake_bottom -> .

    MULT            reduce using rule 141 (r_pop_fake_bottom -> .)
    DIV             reduce using rule 141 (r_pop_fake_bottom -> .)
    MOD             reduce using rule 141 (r_pop_fake_bottom -> .)
    PLUS            reduce using rule 141 (r_pop_fake_bottom -> .)
    MINUS           reduce using rule 141 (r_pop_fake_bottom -> .)
    MORE            reduce using rule 141 (r_pop_fake_bottom -> .)
    LESS            reduce using rule 141 (r_pop_fake_bottom -> .)
    COMPARE         reduce using rule 141 (r_pop_fake_bottom -> .)
    DIFFERENT       reduce using rule 141 (r_pop_fake_bottom -> .)
    MOREEQUAL       reduce using rule 141 (r_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 141 (r_pop_fake_bottom -> .)
    AND             reduce using rule 141 (r_pop_fake_bottom -> .)
    OR              reduce using rule 141 (r_pop_fake_bottom -> .)
    COMA            reduce using rule 141 (r_pop_fake_bottom -> .)
    RPAREN          reduce using rule 141 (r_pop_fake_bottom -> .)
    HACER           reduce using rule 141 (r_pop_fake_bottom -> .)
    DOTCOMA         reduce using rule 141 (r_pop_fake_bottom -> .)
    HASTA           reduce using rule 141 (r_pop_fake_bottom -> .)

    r_pop_fake_bottom              shift and go to state 307

state 289

    (108) READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB .

    RPAREN          reduce using rule 108 (READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB .)


state 290

    (109) READ_AUXSUB -> COMA . READ_AUX
    (108) READ_AUX -> . ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB

    ID              shift and go to state 155

    READ_AUX                       shift and go to state 308

state 291

    (110) READ_AUXSUB -> empty .

    RPAREN          reduce using rule 110 (READ_AUXSUB -> empty .)


state 292

    (90) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 . r_if_end
    (143) r_if_end -> .

    ID              reduce using rule 143 (r_if_end -> .)
    ESCRIBE         reduce using rule 143 (r_if_end -> .)
    LEE             reduce using rule 143 (r_if_end -> .)
    REGRESA         reduce using rule 143 (r_if_end -> .)
    SI              reduce using rule 143 (r_if_end -> .)
    DESDE           reduce using rule 143 (r_if_end -> .)
    MIENTRAS        reduce using rule 143 (r_if_end -> .)
    RBRACKET        reduce using rule 143 (r_if_end -> .)

    r_if_end                       shift and go to state 309

state 293

    (91) IF2 -> BLOQUE . IF_AUX
    (93) IF_AUX -> . SINO r_else_start BLOQUE
    (94) IF_AUX -> . empty
    (1) empty -> .

    SINO            shift and go to state 311
    ID              reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    IF_AUX                         shift and go to state 310
    empty                          shift and go to state 312

state 294

    (92) IF2 -> COND .

    ID              reduce using rule 92 (IF2 -> COND .)
    ESCRIBE         reduce using rule 92 (IF2 -> COND .)
    LEE             reduce using rule 92 (IF2 -> COND .)
    REGRESA         reduce using rule 92 (IF2 -> COND .)
    SI              reduce using rule 92 (IF2 -> COND .)
    DESDE           reduce using rule 92 (IF2 -> COND .)
    MIENTRAS        reduce using rule 92 (IF2 -> COND .)
    RBRACKET        reduce using rule 92 (IF2 -> COND .)


state 295

    (100) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 . r_for_end
    (148) r_for_end -> .

    ID              reduce using rule 148 (r_for_end -> .)
    ESCRIBE         reduce using rule 148 (r_for_end -> .)
    LEE             reduce using rule 148 (r_for_end -> .)
    REGRESA         reduce using rule 148 (r_for_end -> .)
    SI              reduce using rule 148 (r_for_end -> .)
    DESDE           reduce using rule 148 (r_for_end -> .)
    MIENTRAS        reduce using rule 148 (r_for_end -> .)
    RBRACKET        reduce using rule 148 (r_for_end -> .)

    r_for_end                      shift and go to state 313

state 296

    (101) FOR2 -> BLOQUE .

    ID              reduce using rule 101 (FOR2 -> BLOQUE .)
    ESCRIBE         reduce using rule 101 (FOR2 -> BLOQUE .)
    LEE             reduce using rule 101 (FOR2 -> BLOQUE .)
    REGRESA         reduce using rule 101 (FOR2 -> BLOQUE .)
    SI              reduce using rule 101 (FOR2 -> BLOQUE .)
    DESDE           reduce using rule 101 (FOR2 -> BLOQUE .)
    MIENTRAS        reduce using rule 101 (FOR2 -> BLOQUE .)
    RBRACKET        reduce using rule 101 (FOR2 -> BLOQUE .)


state 297

    (102) FOR2 -> COND .

    ID              reduce using rule 102 (FOR2 -> COND .)
    ESCRIBE         reduce using rule 102 (FOR2 -> COND .)
    LEE             reduce using rule 102 (FOR2 -> COND .)
    REGRESA         reduce using rule 102 (FOR2 -> COND .)
    SI              reduce using rule 102 (FOR2 -> COND .)
    DESDE           reduce using rule 102 (FOR2 -> COND .)
    MIENTRAS        reduce using rule 102 (FOR2 -> COND .)
    RBRACKET        reduce using rule 102 (FOR2 -> COND .)


state 298

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX . WHILE2 r_while_end
    (96) WHILE2 -> . BLOQUE
    (97) WHILE2 -> . COND
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (87) COND -> . IF
    (88) COND -> . FOR
    (89) COND -> . WHILE
    (90) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (100) FOR -> . DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (95) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 92
    SI              shift and go to state 114
    DESDE           shift and go to state 115
    MIENTRAS        shift and go to state 116

    WHILE2                         shift and go to state 314
    BLOQUE                         shift and go to state 315
    COND                           shift and go to state 316
    IF                             shift and go to state 108
    FOR                            shift and go to state 109
    WHILE                          shift and go to state 110

state 299

    (98) WHILE_AUX -> HAZ .

    LBRACKET        reduce using rule 98 (WHILE_AUX -> HAZ .)
    SI              reduce using rule 98 (WHILE_AUX -> HAZ .)
    DESDE           reduce using rule 98 (WHILE_AUX -> HAZ .)
    MIENTRAS        reduce using rule 98 (WHILE_AUX -> HAZ .)


state 300

    (99) WHILE_AUX -> empty .

    LBRACKET        reduce using rule 99 (WHILE_AUX -> empty .)
    SI              reduce using rule 99 (WHILE_AUX -> empty .)
    DESDE           reduce using rule 99 (WHILE_AUX -> empty .)
    MIENTRAS        reduce using rule 99 (WHILE_AUX -> empty .)


state 301

    (119) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX . RBRACKET CTE_ARR_AUX2SUB

    RBRACKET        shift and go to state 317


state 302

    (113) CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .

    DOTCOMA         reduce using rule 113 (CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .)
    HASTA           reduce using rule 113 (CTE_ARR -> LBRACKET CTE_ARR_AUX RBRACKET .)


state 303

    (114) CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .

    DOTCOMA         reduce using rule 114 (CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .)
    HASTA           reduce using rule 114 (CTE_ARR -> LBRACKET CTE_ARR_AUX2 RBRACKET .)


state 304

    (117) CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX .

    RBRACKET        reduce using rule 117 (CTE_ARR_AUXSUB -> COMA CTE_ARR_AUX .)


state 305

    (63) TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 63 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)


state 306

    (64) TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 64 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)


state 307

    (68) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .

    MULT            reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIV             reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOD             reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    PLUS            reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MINUS           reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MORE            reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESS            reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMPARE         reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIFFERENT       reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOREEQUAL       reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESSEQUAL       reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    AND             reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    OR              reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMA            reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    RPAREN          reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HACER           reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DOTCOMA         reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HASTA           reduce using rule 68 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)


state 308

    (109) READ_AUXSUB -> COMA READ_AUX .

    RPAREN          reduce using rule 109 (READ_AUXSUB -> COMA READ_AUX .)


state 309

    (90) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .

    ID              reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    ESCRIBE         reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    LEE             reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    REGRESA         reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    SI              reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    DESDE           reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    MIENTRAS        reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    RBRACKET        reduce using rule 90 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)


state 310

    (91) IF2 -> BLOQUE IF_AUX .

    ID              reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    ESCRIBE         reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    LEE             reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    REGRESA         reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    SI              reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    DESDE           reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    MIENTRAS        reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)
    RBRACKET        reduce using rule 91 (IF2 -> BLOQUE IF_AUX .)


state 311

    (93) IF_AUX -> SINO . r_else_start BLOQUE
    (144) r_else_start -> .

    LBRACKET        reduce using rule 144 (r_else_start -> .)

    r_else_start                   shift and go to state 318

state 312

    (94) IF_AUX -> empty .

    ID              reduce using rule 94 (IF_AUX -> empty .)
    ESCRIBE         reduce using rule 94 (IF_AUX -> empty .)
    LEE             reduce using rule 94 (IF_AUX -> empty .)
    REGRESA         reduce using rule 94 (IF_AUX -> empty .)
    SI              reduce using rule 94 (IF_AUX -> empty .)
    DESDE           reduce using rule 94 (IF_AUX -> empty .)
    MIENTRAS        reduce using rule 94 (IF_AUX -> empty .)
    RBRACKET        reduce using rule 94 (IF_AUX -> empty .)


state 313

    (100) FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .

    ID              reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    ESCRIBE         reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    LEE             reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    REGRESA         reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    SI              reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    DESDE           reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    MIENTRAS        reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    RBRACKET        reduce using rule 100 (FOR -> DESDE ASIGNACION HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)


state 314

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 . r_while_end
    (146) r_while_end -> .

    ID              reduce using rule 146 (r_while_end -> .)
    ESCRIBE         reduce using rule 146 (r_while_end -> .)
    LEE             reduce using rule 146 (r_while_end -> .)
    REGRESA         reduce using rule 146 (r_while_end -> .)
    SI              reduce using rule 146 (r_while_end -> .)
    DESDE           reduce using rule 146 (r_while_end -> .)
    MIENTRAS        reduce using rule 146 (r_while_end -> .)
    RBRACKET        reduce using rule 146 (r_while_end -> .)

    r_while_end                    shift and go to state 319

state 315

    (96) WHILE2 -> BLOQUE .

    ID              reduce using rule 96 (WHILE2 -> BLOQUE .)
    ESCRIBE         reduce using rule 96 (WHILE2 -> BLOQUE .)
    LEE             reduce using rule 96 (WHILE2 -> BLOQUE .)
    REGRESA         reduce using rule 96 (WHILE2 -> BLOQUE .)
    SI              reduce using rule 96 (WHILE2 -> BLOQUE .)
    DESDE           reduce using rule 96 (WHILE2 -> BLOQUE .)
    MIENTRAS        reduce using rule 96 (WHILE2 -> BLOQUE .)
    RBRACKET        reduce using rule 96 (WHILE2 -> BLOQUE .)


state 316

    (97) WHILE2 -> COND .

    ID              reduce using rule 97 (WHILE2 -> COND .)
    ESCRIBE         reduce using rule 97 (WHILE2 -> COND .)
    LEE             reduce using rule 97 (WHILE2 -> COND .)
    REGRESA         reduce using rule 97 (WHILE2 -> COND .)
    SI              reduce using rule 97 (WHILE2 -> COND .)
    DESDE           reduce using rule 97 (WHILE2 -> COND .)
    MIENTRAS        reduce using rule 97 (WHILE2 -> COND .)
    RBRACKET        reduce using rule 97 (WHILE2 -> COND .)


state 317

    (119) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET . CTE_ARR_AUX2SUB
    (120) CTE_ARR_AUX2SUB -> . COMA CTE_ARR_AUX2
    (121) CTE_ARR_AUX2SUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 321
    RBRACKET        reduce using rule 1 (empty -> .)

    CTE_ARR_AUX2SUB                shift and go to state 320
    empty                          shift and go to state 322

state 318

    (93) IF_AUX -> SINO r_else_start . BLOQUE
    (29) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 92

    BLOQUE                         shift and go to state 323

state 319

    (95) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .

    ID              reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    ESCRIBE         reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    LEE             reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    REGRESA         reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    SI              reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    DESDE           reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    MIENTRAS        reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    RBRACKET        reduce using rule 95 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)


state 320

    (119) CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB .

    RBRACKET        reduce using rule 119 (CTE_ARR_AUX2 -> LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB .)


state 321

    (120) CTE_ARR_AUX2SUB -> COMA . CTE_ARR_AUX2
    (119) CTE_ARR_AUX2 -> . LBRACKET CTE_ARR_AUX RBRACKET CTE_ARR_AUX2SUB

    LBRACKET        shift and go to state 271

    CTE_ARR_AUX2                   shift and go to state 324

state 322

    (121) CTE_ARR_AUX2SUB -> empty .

    RBRACKET        reduce using rule 121 (CTE_ARR_AUX2SUB -> empty .)


state 323

    (93) IF_AUX -> SINO r_else_start BLOQUE .

    ID              reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    ESCRIBE         reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    LEE             reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    REGRESA         reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    SI              reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    DESDE           reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    MIENTRAS        reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)
    RBRACKET        reduce using rule 93 (IF_AUX -> SINO r_else_start BLOQUE .)


state 324

    (120) CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2 .

    RBRACKET        reduce using rule 120 (CTE_ARR_AUX2SUB -> COMA CTE_ARR_AUX2 .)

