Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     empty -> <empty>
Rule 2     PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
Rule 3     MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
Rule 4     VARS -> VAR VAR_AUX
Rule 5     VARS -> empty
Rule 6     VAR_AUX -> TIPO IDS VAR_AUX
Rule 7     VAR_AUX -> empty
Rule 8     TIPO -> INT r_save_type
Rule 9     TIPO -> FLOAT r_save_type
Rule 10    TIPO -> CHAR r_save_type
Rule 11    TIPO -> STRING r_save_type
Rule 12    IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA
Rule 13    IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS
Rule 14    ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
Rule 15    ARRDIM -> empty
Rule 16    ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX
Rule 17    ARRDIM_AUX -> empty
Rule 18    FUNCTIONS -> FUNCTION FUNCTIONS
Rule 19    FUNCTIONS -> empty
Rule 20    FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 21    FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
Rule 22    PARAM -> TIPO ID r_register_var PARAM_AUX
Rule 23    PARAM -> empty
Rule 24    PARAM_AUX -> COMA PARAM
Rule 25    PARAM_AUX -> empty
Rule 26    BLOQUE -> LBRACKET ESTATUTOS RBRACKET
Rule 27    ESTATUTOS -> ESTATUTO ESTATUTOS
Rule 28    ESTATUTOS -> empty
Rule 29    ESTATUTO -> ASIGNACION DOTCOMA
Rule 30    ESTATUTO -> FUN DOTCOMA
Rule 31    ESTATUTO -> COND
Rule 32    ESTATUTO -> WRITE DOTCOMA
Rule 33    ESTATUTO -> READ DOTCOMA
Rule 34    ESTATUTO -> RETURN DOTCOMA
Rule 35    ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
Rule 36    ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
Rule 37    ARRACC -> empty
Rule 38    ARRACC_AUX -> COMA r_add_dim EXPRESION r_create_quad ARRACC_AUX
Rule 39    ARRACC_AUX -> empty
Rule 40    EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX
Rule 41    EXPRESION_AUX -> AND r_seen_operator EXPRESION
Rule 42    EXPRESION_AUX -> OR r_seen_operator EXPRESION
Rule 43    EXPRESION_AUX -> empty
Rule 44    SUBEXP -> EXP r_seen_exp SUBEXP_AUX
Rule 45    SUBEXP_AUX -> COMPARACION SUBEXP
Rule 46    SUBEXP_AUX -> empty
Rule 47    COMPARACION -> MORE r_seen_operator
Rule 48    COMPARACION -> LESS r_seen_operator
Rule 49    COMPARACION -> COMPARE r_seen_operator
Rule 50    COMPARACION -> DIFFERENT r_seen_operator
Rule 51    COMPARACION -> MOREEQUAL r_seen_operator
Rule 52    COMPARACION -> LESSEQUAL r_seen_operator
Rule 53    EXP -> TERMINO r_seen_term EXP_AUX
Rule 54    EXP_AUX -> PLUS r_seen_operator EXP
Rule 55    EXP_AUX -> MINUS r_seen_operator EXP
Rule 56    EXP_AUX -> empty
Rule 57    TERMINO -> FACTOR r_seen_factor TERMINO_AUX
Rule 58    TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term
Rule 59    TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term
Rule 60    TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term
Rule 61    TERMINO_AUX -> empty
Rule 62    FACTOR -> NOT r_seen_unary_operator FACTOR_AUX
Rule 63    FACTOR -> FACTOR_AUX
Rule 64    FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
Rule 65    FACTOR_AUX -> SIGN CTE ARROP
Rule 66    SIGN -> PLUS r_seen_unary_operator
Rule 67    SIGN -> MINUS r_seen_unary_operator
Rule 68    SIGN -> empty
Rule 69    CTE -> CTE_I r_seen_operand
Rule 70    CTE -> CTE_F r_seen_operand
Rule 71    CTE -> CTE_CH r_seen_operand
Rule 72    CTE -> CTE_STRING r_seen_operand
Rule 73    CTE -> FUN
Rule 74    CTE -> ID r_seen_operand_id ARRACC
Rule 75    ARROP -> DET_ARR r_seen_operator_mat
Rule 76    ARROP -> TRANS_ARR r_seen_operator_mat
Rule 77    ARROP -> INV_ARR r_seen_operator_mat
Rule 78    ARROP -> empty
Rule 79    FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
Rule 80    FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX
Rule 81    FUN_AUX -> EXPRESION r_check_param
Rule 82    FUN_AUX -> empty
Rule 83    COND -> IF
Rule 84    COND -> FOR
Rule 85    COND -> WHILE
Rule 86    IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
Rule 87    IF2 -> BLOQUE IF_AUX
Rule 88    IF2 -> COND
Rule 89    IF_AUX -> SINO r_else_start BLOQUE
Rule 90    IF_AUX -> empty
Rule 91    WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
Rule 92    WHILE2 -> BLOQUE
Rule 93    WHILE2 -> COND
Rule 94    WHILE_AUX -> HAZ
Rule 95    WHILE_AUX -> empty
Rule 96    FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
Rule 97    FOR2 -> BLOQUE
Rule 98    FOR2 -> COND
Rule 99    WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN
Rule 100   WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB
Rule 101   WRITE_AUXSUB -> COMA WRITE_AUX
Rule 102   WRITE_AUXSUB -> empty
Rule 103   READ -> LEE LPAREN READ_AUX RPAREN
Rule 104   READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB
Rule 105   READ_AUXSUB -> COMA READ_AUX
Rule 106   READ_AUXSUB -> empty
Rule 107   RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa
Rule 108   RETURN -> REGRESA LPAREN NULL RPAREN
Rule 109   r_save_type -> <empty>
Rule 110   r_save_func -> <empty>
Rule 111   r_register_func -> <empty>
Rule 112   r_register_var -> <empty>
Rule 113   r_register_arr -> <empty>
Rule 114   r_register_dim -> <empty>
Rule 115   r_populate_r -> <empty>
Rule 116   r_check_dim -> <empty>
Rule 117   r_create_quad -> <empty>
Rule 118   r_add_dim -> <empty>
Rule 119   r_close_arracc -> <empty>
Rule 120   r_register_princ -> <empty>
Rule 121   r_end_princ -> <empty>
Rule 122   r_seen_operand -> <empty>
Rule 123   r_seen_operand_id -> <empty>
Rule 124   r_seen_operator -> <empty>
Rule 125   r_seen_unary_operator -> <empty>
Rule 126   r_seen_operator_mat -> <empty>
Rule 127   r_seen_equal -> <empty>
Rule 128   r_seen_subexp -> <empty>
Rule 129   r_seen_exp -> <empty>
Rule 130   r_seen_term -> <empty>
Rule 131   r_seen_factor -> <empty>
Rule 132   r_pop_fake_bottom -> <empty>
Rule 133   r_create_bottom -> <empty>
Rule 134   r_check_int -> <empty>
Rule 135   r_if_end -> <empty>
Rule 136   r_else_start -> <empty>
Rule 137   r_set_while -> <empty>
Rule 138   r_while_end -> <empty>
Rule 139   r_set_for -> <empty>
Rule 140   r_for_gen -> <empty>
Rule 141   r_for_end -> <empty>
Rule 142   r_save_param_func -> <empty>
Rule 143   r_save_vars -> <empty>
Rule 144   r_func_set -> <empty>
Rule 145   r_func_end -> <empty>
Rule 146   r_check_func -> <empty>
Rule 147   r_check_param -> <empty>
Rule 148   r_go_sub -> <empty>
Rule 149   r_goto_main -> <empty>
Rule 150   r_regresa -> <empty>
Rule 151   r_escribe -> <empty>
Rule 152   r_lee -> <empty>
Rule 153   r_print_constants -> <empty>

Terminals, with rules where they appear

AND                  : 41
CHAR                 : 10
COMA                 : 13 16 24 38 80 101 105
COMMENT              : 
COMPARE              : 49
CTE_CH               : 71
CTE_F                : 70
CTE_I                : 14 16 69
CTE_STRING           : 72
DESDE                : 96
DET_ARR              : 75
DIFFERENT            : 50
DIV                  : 59
DOTCOMA              : 2 12 29 30 32 33 34
ENTONCES             : 86
EQUAL                : 35
ESCRIBE              : 99
FLOAT                : 9
FUNCION              : 20 21
HACER                : 96
HASTA                : 96
HAZ                  : 94
ID                   : 2 12 13 20 21 22 35 74 79 104
INT                  : 8
INV_ARR              : 77
LBRACKET             : 26
LEE                  : 103
LESS                 : 48
LESSEQUAL            : 52
LPAREN               : 3 20 21 64 79 86 91 99 103 107 108
LSTAPLE              : 14 36
MIENTRAS             : 91
MINUS                : 55 67
MOD                  : 60
MORE                 : 47
MOREEQUAL            : 51
MULT                 : 58
NOT                  : 62
NULL                 : 108
OR                   : 42
PLUS                 : 54 66
PRINCIPAL            : 3
PROGRAMA             : 2
RBRACKET             : 26
REGRESA              : 107 108
RPAREN               : 3 20 21 64 79 86 91 99 103 107 108
RSTAPLE              : 14 36
SI                   : 86
SINO                 : 89
STRING               : 11
TRANS_ARR            : 76
VAR                  : 4
VOID                 : 21
error                : 

Nonterminals, with rules where they appear

ARRACC               : 35 74
ARRACC_AUX           : 36 38
ARRDIM               : 12 13 14 104
ARRDIM_AUX           : 14 16
ARROP                : 65
ASIGNACION           : 29 96
BLOQUE               : 3 20 21 87 89 92 97
COMPARACION          : 45
COND                 : 31 88 93 98
CTE                  : 65
ESTATUTO             : 27
ESTATUTOS            : 26 27
EXP                  : 44 54 55
EXPRESION            : 35 36 38 41 42 64 80 81 86 91 96 100 107
EXPRESION_AUX        : 40
EXP_AUX              : 53
FACTOR               : 57
FACTOR_AUX           : 62 63
FOR                  : 84
FOR2                 : 96
FUN                  : 30 73
FUNCTION             : 18
FUNCTIONS            : 2 18
FUN_AUX              : 79 80
IDS                  : 6 13
IF                   : 83
IF2                  : 86
IF_AUX               : 87
MAIN                 : 2
PARAM                : 20 21 24
PARAM_AUX            : 22
PROGRAM              : 0
READ                 : 33
READ_AUX             : 103 105
READ_AUXSUB          : 104
RETURN               : 34
SIGN                 : 64 65
SUBEXP               : 40 45
SUBEXP_AUX           : 44
TERMINO              : 53 58 59 60
TERMINO_AUX          : 57
TIPO                 : 6 20 22
VARS                 : 2 3 20 21
VAR_AUX              : 4 6
WHILE                : 85
WHILE2               : 91
WHILE_AUX            : 91
WRITE                : 32
WRITE_AUX            : 99 101
WRITE_AUXSUB         : 100
empty                : 5 7 15 17 19 23 25 28 37 39 43 46 56 61 68 78 82 90 95 102 106
r_add_dim            : 38
r_check_dim          : 36
r_check_func         : 79
r_check_int          : 86 91
r_check_param        : 80 81
r_close_arracc       : 36
r_create_bottom      : 79
r_create_quad        : 36 38
r_else_start         : 89
r_end_princ          : 3
r_escribe            : 100
r_for_end            : 96
r_for_gen            : 96
r_func_end           : 3 20 21
r_func_set           : 3 20 21
r_go_sub             : 79
r_goto_main          : 2
r_if_end             : 86
r_lee                : 104
r_pop_fake_bottom    : 64 79
r_populate_r         : 12 13
r_print_constants    : 2
r_register_arr       : 14
r_register_dim       : 14 16
r_register_func      : 20 21
r_register_princ     : 3
r_register_var       : 12 13 22
r_regresa            : 107
r_save_func          : 3 20 21
r_save_param_func    : 3 20 21
r_save_type          : 8 9 10 11 21
r_save_vars          : 2 3 20 21
r_seen_equal         : 35
r_seen_exp           : 44
r_seen_factor        : 57
r_seen_operand       : 69 70 71 72
r_seen_operand_id    : 35 74 104
r_seen_operator      : 35 41 42 47 48 49 50 51 52 54 55 58 59 60 64
r_seen_operator_mat  : 75 76 77
r_seen_subexp        : 40
r_seen_term          : 53 58 59 60
r_seen_unary_operator : 62 66 67
r_set_for            : 96
r_set_while          : 91
r_while_end          : 91

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (2) PROGRAM -> . PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    PROGRAMA        shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (2) PROGRAM -> PROGRAMA . r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (149) r_goto_main -> .

    ID              reduce using rule 149 (r_goto_main -> .)

    r_goto_main                    shift and go to state 3

state 3

    (2) PROGRAM -> PROGRAMA r_goto_main . ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    ID              shift and go to state 4


state 4

    (2) PROGRAM -> PROGRAMA r_goto_main ID . DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants

    DOTCOMA         shift and go to state 5


state 5

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA . VARS r_save_vars FUNCTIONS MAIN r_print_constants
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS . r_save_vars FUNCTIONS MAIN r_print_constants
    (143) r_save_vars -> .

    FUNCION         reduce using rule 143 (r_save_vars -> .)
    PRINCIPAL       reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 9

state 7

    (4) VARS -> VAR . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    VAR_AUX                        shift and go to state 10
    TIPO                           shift and go to state 11
    empty                          shift and go to state 12

state 8

    (5) VARS -> empty .

    FUNCION         reduce using rule 5 (VARS -> empty .)
    PRINCIPAL       reduce using rule 5 (VARS -> empty .)
    LBRACKET        reduce using rule 5 (VARS -> empty .)


state 9

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars . FUNCTIONS MAIN r_print_constants
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTIONS                      shift and go to state 17
    FUNCTION                       shift and go to state 18
    empty                          shift and go to state 19

state 10

    (4) VARS -> VAR VAR_AUX .

    FUNCION         reduce using rule 4 (VARS -> VAR VAR_AUX .)
    PRINCIPAL       reduce using rule 4 (VARS -> VAR VAR_AUX .)
    LBRACKET        reduce using rule 4 (VARS -> VAR VAR_AUX .)


state 11

    (6) VAR_AUX -> TIPO . IDS VAR_AUX
    (12) IDS -> . ID r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM r_populate_r COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 21

state 12

    (7) VAR_AUX -> empty .

    FUNCION         reduce using rule 7 (VAR_AUX -> empty .)
    PRINCIPAL       reduce using rule 7 (VAR_AUX -> empty .)
    LBRACKET        reduce using rule 7 (VAR_AUX -> empty .)


state 13

    (8) TIPO -> INT . r_save_type
    (109) r_save_type -> .

    ID              reduce using rule 109 (r_save_type -> .)

    r_save_type                    shift and go to state 23

state 14

    (9) TIPO -> FLOAT . r_save_type
    (109) r_save_type -> .

    ID              reduce using rule 109 (r_save_type -> .)

    r_save_type                    shift and go to state 24

state 15

    (10) TIPO -> CHAR . r_save_type
    (109) r_save_type -> .

    ID              reduce using rule 109 (r_save_type -> .)

    r_save_type                    shift and go to state 25

state 16

    (11) TIPO -> STRING . r_save_type
    (109) r_save_type -> .

    ID              reduce using rule 109 (r_save_type -> .)

    r_save_type                    shift and go to state 26

state 17

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS . MAIN r_print_constants
    (3) MAIN -> . PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    PRINCIPAL       shift and go to state 28

    MAIN                           shift and go to state 27

state 18

    (18) FUNCTIONS -> FUNCTION . FUNCTIONS
    (18) FUNCTIONS -> . FUNCTION FUNCTIONS
    (19) FUNCTIONS -> . empty
    (20) FUNCTION -> . FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> . FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    FUNCTION                       shift and go to state 18
    FUNCTIONS                      shift and go to state 29
    empty                          shift and go to state 19

state 19

    (19) FUNCTIONS -> empty .

    PRINCIPAL       reduce using rule 19 (FUNCTIONS -> empty .)


state 20

    (20) FUNCTION -> FUNCION . TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (21) FUNCTION -> FUNCION . VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type

    VOID            shift and go to state 31
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16

    TIPO                           shift and go to state 30

state 21

    (6) VAR_AUX -> TIPO IDS . VAR_AUX
    (6) VAR_AUX -> . TIPO IDS VAR_AUX
    (7) VAR_AUX -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)
    LBRACKET        reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 11
    VAR_AUX                        shift and go to state 32
    empty                          shift and go to state 12

state 22

    (12) IDS -> ID . r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> ID . r_register_var ARRDIM r_populate_r COMA IDS
    (112) r_register_var -> .

    DOTCOMA         reduce using rule 112 (r_register_var -> .)
    COMA            reduce using rule 112 (r_register_var -> .)
    LSTAPLE         reduce using rule 112 (r_register_var -> .)

    r_register_var                 shift and go to state 33

state 23

    (8) TIPO -> INT r_save_type .

    ID              reduce using rule 8 (TIPO -> INT r_save_type .)


state 24

    (9) TIPO -> FLOAT r_save_type .

    ID              reduce using rule 9 (TIPO -> FLOAT r_save_type .)


state 25

    (10) TIPO -> CHAR r_save_type .

    ID              reduce using rule 10 (TIPO -> CHAR r_save_type .)


state 26

    (11) TIPO -> STRING r_save_type .

    ID              reduce using rule 11 (TIPO -> STRING r_save_type .)


state 27

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN . r_print_constants
    (153) r_print_constants -> .

    $end            reduce using rule 153 (r_print_constants -> .)

    r_print_constants              shift and go to state 34

state 28

    (3) MAIN -> PRINCIPAL . r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (110) r_save_func -> .

    LPAREN          reduce using rule 110 (r_save_func -> .)

    r_save_func                    shift and go to state 35

state 29

    (18) FUNCTIONS -> FUNCTION FUNCTIONS .

    PRINCIPAL       reduce using rule 18 (FUNCTIONS -> FUNCTION FUNCTIONS .)


state 30

    (20) FUNCTION -> FUNCION TIPO . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 36


state 31

    (21) FUNCTION -> FUNCION VOID . r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (109) r_save_type -> .

    ID              reduce using rule 109 (r_save_type -> .)

    r_save_type                    shift and go to state 37

state 32

    (6) VAR_AUX -> TIPO IDS VAR_AUX .

    FUNCION         reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    PRINCIPAL       reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)
    LBRACKET        reduce using rule 6 (VAR_AUX -> TIPO IDS VAR_AUX .)


state 33

    (12) IDS -> ID r_register_var . ARRDIM r_populate_r DOTCOMA
    (13) IDS -> ID r_register_var . ARRDIM r_populate_r COMA IDS
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (113) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 113 (r_register_arr -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 38
    r_register_arr                 shift and go to state 39
    empty                          shift and go to state 40

state 34

    (2) PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .

    $end            reduce using rule 2 (PROGRAM -> PROGRAMA r_goto_main ID DOTCOMA VARS r_save_vars FUNCTIONS MAIN r_print_constants .)


state 35

    (3) MAIN -> PRINCIPAL r_save_func . LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 41


state 36

    (20) FUNCTION -> FUNCION TIPO ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (110) r_save_func -> .

    LPAREN          reduce using rule 110 (r_save_func -> .)

    r_save_func                    shift and go to state 42

state 37

    (21) FUNCTION -> FUNCION VOID r_save_type . ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    ID              shift and go to state 43


state 38

    (12) IDS -> ID r_register_var ARRDIM . r_populate_r DOTCOMA
    (13) IDS -> ID r_register_var ARRDIM . r_populate_r COMA IDS
    (115) r_populate_r -> .

    DOTCOMA         reduce using rule 115 (r_populate_r -> .)
    COMA            reduce using rule 115 (r_populate_r -> .)

    r_populate_r                   shift and go to state 44

state 39

    (14) ARRDIM -> r_register_arr . LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM

    LSTAPLE         shift and go to state 45


state 40

    (15) ARRDIM -> empty .

    DOTCOMA         reduce using rule 15 (ARRDIM -> empty .)
    COMA            reduce using rule 15 (ARRDIM -> empty .)
    RPAREN          reduce using rule 15 (ARRDIM -> empty .)


state 41

    (3) MAIN -> PRINCIPAL r_save_func LPAREN . RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 46


state 42

    (20) FUNCTION -> FUNCION TIPO ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (111) r_register_func -> .

    LPAREN          reduce using rule 111 (r_register_func -> .)

    r_register_func                shift and go to state 47

state 43

    (21) FUNCTION -> FUNCION VOID r_save_type ID . r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (110) r_save_func -> .

    LPAREN          reduce using rule 110 (r_save_func -> .)

    r_save_func                    shift and go to state 48

state 44

    (12) IDS -> ID r_register_var ARRDIM r_populate_r . DOTCOMA
    (13) IDS -> ID r_register_var ARRDIM r_populate_r . COMA IDS

    DOTCOMA         shift and go to state 49
    COMA            shift and go to state 50


state 45

    (14) ARRDIM -> r_register_arr LSTAPLE . CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM

    CTE_I           shift and go to state 51


state 46

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN . r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (120) r_register_princ -> .

    VAR             reduce using rule 120 (r_register_princ -> .)
    LBRACKET        reduce using rule 120 (r_register_princ -> .)

    r_register_princ               shift and go to state 52

state 47

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 53


state 48

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func . r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (111) r_register_func -> .

    LPAREN          reduce using rule 111 (r_register_func -> .)

    r_register_func                shift and go to state 54

state 49

    (12) IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .

    INT             reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    FLOAT           reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    CHAR            reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    STRING          reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    FUNCION         reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    PRINCIPAL       reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)
    LBRACKET        reduce using rule 12 (IDS -> ID r_register_var ARRDIM r_populate_r DOTCOMA .)


state 50

    (13) IDS -> ID r_register_var ARRDIM r_populate_r COMA . IDS
    (12) IDS -> . ID r_register_var ARRDIM r_populate_r DOTCOMA
    (13) IDS -> . ID r_register_var ARRDIM r_populate_r COMA IDS

    ID              shift and go to state 22

    IDS                            shift and go to state 55

state 51

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I . r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (114) r_register_dim -> .

    COMA            reduce using rule 114 (r_register_dim -> .)
    RSTAPLE         reduce using rule 114 (r_register_dim -> .)

    r_register_dim                 shift and go to state 56

state 52

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ . r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 57

state 53

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    TIPO                           shift and go to state 58
    PARAM                          shift and go to state 59
    empty                          shift and go to state 60

state 54

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func . LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    LPAREN          shift and go to state 61


state 55

    (13) IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .

    INT             reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    FLOAT           reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    CHAR            reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    STRING          reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    FUNCION         reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    PRINCIPAL       reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)
    LBRACKET        reduce using rule 13 (IDS -> ID r_register_var ARRDIM r_populate_r COMA IDS .)


state 56

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim . ARRDIM_AUX RSTAPLE ARRDIM
    (16) ARRDIM_AUX -> . COMA CTE_I r_register_dim ARRDIM_AUX
    (17) ARRDIM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 63
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRDIM_AUX                     shift and go to state 62
    empty                          shift and go to state 64

state 57

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func . VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 65
    empty                          shift and go to state 8

state 58

    (22) PARAM -> TIPO . ID r_register_var PARAM_AUX

    ID              shift and go to state 66


state 59

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 67


state 60

    (23) PARAM -> empty .

    RPAREN          reduce using rule 23 (PARAM -> empty .)


state 61

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN . PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (22) PARAM -> . TIPO ID r_register_var PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 68
    TIPO                           shift and go to state 58
    empty                          shift and go to state 60

state 62

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX . RSTAPLE ARRDIM

    RSTAPLE         shift and go to state 69


state 63

    (16) ARRDIM_AUX -> COMA . CTE_I r_register_dim ARRDIM_AUX

    CTE_I           shift and go to state 70


state 64

    (17) ARRDIM_AUX -> empty .

    RSTAPLE         reduce using rule 17 (ARRDIM_AUX -> empty .)


state 65

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS . r_save_vars r_end_princ r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 71

state 66

    (22) PARAM -> TIPO ID . r_register_var PARAM_AUX
    (112) r_register_var -> .

    COMA            reduce using rule 112 (r_register_var -> .)
    RPAREN          reduce using rule 112 (r_register_var -> .)

    r_register_var                 shift and go to state 72

state 67

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 73

state 68

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM . RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end

    RPAREN          shift and go to state 74


state 69

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE . ARRDIM
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (113) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 113 (r_register_arr -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    r_register_arr                 shift and go to state 39
    ARRDIM                         shift and go to state 75
    empty                          shift and go to state 40

state 70

    (16) ARRDIM_AUX -> COMA CTE_I . r_register_dim ARRDIM_AUX
    (114) r_register_dim -> .

    COMA            reduce using rule 114 (r_register_dim -> .)
    RSTAPLE         reduce using rule 114 (r_register_dim -> .)

    r_register_dim                 shift and go to state 76

state 71

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars . r_end_princ r_func_set BLOQUE r_func_end
    (121) r_end_princ -> .

    LBRACKET        reduce using rule 121 (r_end_princ -> .)

    r_end_princ                    shift and go to state 77

state 72

    (22) PARAM -> TIPO ID r_register_var . PARAM_AUX
    (24) PARAM_AUX -> . COMA PARAM
    (25) PARAM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 79
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM_AUX                      shift and go to state 78
    empty                          shift and go to state 80

state 73

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 81
    empty                          shift and go to state 8

state 74

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN . r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end
    (142) r_save_param_func -> .

    VAR             reduce using rule 142 (r_save_param_func -> .)
    LBRACKET        reduce using rule 142 (r_save_param_func -> .)

    r_save_param_func              shift and go to state 82

state 75

    (14) ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .

    DOTCOMA         reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    COMA            reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)
    RPAREN          reduce using rule 14 (ARRDIM -> r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM .)


state 76

    (16) ARRDIM_AUX -> COMA CTE_I r_register_dim . ARRDIM_AUX
    (16) ARRDIM_AUX -> . COMA CTE_I r_register_dim ARRDIM_AUX
    (17) ARRDIM_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 63
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRDIM_AUX                     shift and go to state 83
    empty                          shift and go to state 64

state 77

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 84

state 78

    (22) PARAM -> TIPO ID r_register_var PARAM_AUX .

    RPAREN          reduce using rule 22 (PARAM -> TIPO ID r_register_var PARAM_AUX .)


state 79

    (24) PARAM_AUX -> COMA . PARAM
    (22) PARAM -> . TIPO ID r_register_var PARAM_AUX
    (23) PARAM -> . empty
    (8) TIPO -> . INT r_save_type
    (9) TIPO -> . FLOAT r_save_type
    (10) TIPO -> . CHAR r_save_type
    (11) TIPO -> . STRING r_save_type
    (1) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    STRING          shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    PARAM                          shift and go to state 85
    TIPO                           shift and go to state 58
    empty                          shift and go to state 60

state 80

    (25) PARAM_AUX -> empty .

    RPAREN          reduce using rule 25 (PARAM_AUX -> empty .)


state 81

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 86

state 82

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func . VARS r_save_vars r_func_set BLOQUE r_func_end
    (4) VARS -> . VAR VAR_AUX
    (5) VARS -> . empty
    (1) empty -> .

    VAR             shift and go to state 7
    LBRACKET        reduce using rule 1 (empty -> .)

    VARS                           shift and go to state 87
    empty                          shift and go to state 8

state 83

    (16) ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX .

    RSTAPLE         reduce using rule 16 (ARRDIM_AUX -> COMA CTE_I r_register_dim ARRDIM_AUX .)


state 84

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set . BLOQUE r_func_end
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 89

    BLOQUE                         shift and go to state 88

state 85

    (24) PARAM_AUX -> COMA PARAM .

    RPAREN          reduce using rule 24 (PARAM_AUX -> COMA PARAM .)


state 86

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 90

state 87

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS . r_save_vars r_func_set BLOQUE r_func_end
    (143) r_save_vars -> .

    LBRACKET        reduce using rule 143 (r_save_vars -> .)

    r_save_vars                    shift and go to state 91

state 88

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    $end            reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 92

state 89

    (26) BLOQUE -> LBRACKET . ESTATUTOS RBRACKET
    (27) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (28) ESTATUTOS -> . empty
    (29) ESTATUTO -> . ASIGNACION DOTCOMA
    (30) ESTATUTO -> . FUN DOTCOMA
    (31) ESTATUTO -> . COND
    (32) ESTATUTO -> . WRITE DOTCOMA
    (33) ESTATUTO -> . READ DOTCOMA
    (34) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (35) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (79) FUN -> . ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (99) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN
    (103) READ -> . LEE LPAREN READ_AUX RPAREN
    (107) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> . REGRESA LPAREN NULL RPAREN
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 102
    ESCRIBE         shift and go to state 106
    LEE             shift and go to state 107
    REGRESA         shift and go to state 108
    SI              shift and go to state 109
    DESDE           shift and go to state 110
    MIENTRAS        shift and go to state 111

    ESTATUTOS                      shift and go to state 93
    ESTATUTO                       shift and go to state 94
    empty                          shift and go to state 95
    ASIGNACION                     shift and go to state 96
    FUN                            shift and go to state 97
    COND                           shift and go to state 98
    WRITE                          shift and go to state 99
    READ                           shift and go to state 100
    RETURN                         shift and go to state 101
    IF                             shift and go to state 103
    FOR                            shift and go to state 104
    WHILE                          shift and go to state 105

state 90

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 89

    BLOQUE                         shift and go to state 112

state 91

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars . r_func_set BLOQUE r_func_end
    (144) r_func_set -> .

    LBRACKET        reduce using rule 144 (r_func_set -> .)

    r_func_set                     shift and go to state 113

state 92

    (3) MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .

    $end            reduce using rule 3 (MAIN -> PRINCIPAL r_save_func LPAREN RPAREN r_register_princ r_save_param_func VARS r_save_vars r_end_princ r_func_set BLOQUE r_func_end .)


state 93

    (26) BLOQUE -> LBRACKET ESTATUTOS . RBRACKET

    RBRACKET        shift and go to state 114


state 94

    (27) ESTATUTOS -> ESTATUTO . ESTATUTOS
    (27) ESTATUTOS -> . ESTATUTO ESTATUTOS
    (28) ESTATUTOS -> . empty
    (29) ESTATUTO -> . ASIGNACION DOTCOMA
    (30) ESTATUTO -> . FUN DOTCOMA
    (31) ESTATUTO -> . COND
    (32) ESTATUTO -> . WRITE DOTCOMA
    (33) ESTATUTO -> . READ DOTCOMA
    (34) ESTATUTO -> . RETURN DOTCOMA
    (1) empty -> .
    (35) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (79) FUN -> . ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (99) WRITE -> . ESCRIBE LPAREN WRITE_AUX RPAREN
    (103) READ -> . LEE LPAREN READ_AUX RPAREN
    (107) RETURN -> . REGRESA LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> . REGRESA LPAREN NULL RPAREN
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    RBRACKET        reduce using rule 1 (empty -> .)
    ID              shift and go to state 102
    ESCRIBE         shift and go to state 106
    LEE             shift and go to state 107
    REGRESA         shift and go to state 108
    SI              shift and go to state 109
    DESDE           shift and go to state 110
    MIENTRAS        shift and go to state 111

    ESTATUTO                       shift and go to state 94
    ESTATUTOS                      shift and go to state 115
    empty                          shift and go to state 95
    ASIGNACION                     shift and go to state 96
    FUN                            shift and go to state 97
    COND                           shift and go to state 98
    WRITE                          shift and go to state 99
    READ                           shift and go to state 100
    RETURN                         shift and go to state 101
    IF                             shift and go to state 103
    FOR                            shift and go to state 104
    WHILE                          shift and go to state 105

state 95

    (28) ESTATUTOS -> empty .

    RBRACKET        reduce using rule 28 (ESTATUTOS -> empty .)


state 96

    (29) ESTATUTO -> ASIGNACION . DOTCOMA

    DOTCOMA         shift and go to state 116


state 97

    (30) ESTATUTO -> FUN . DOTCOMA

    DOTCOMA         shift and go to state 117


state 98

    (31) ESTATUTO -> COND .

    ID              reduce using rule 31 (ESTATUTO -> COND .)
    ESCRIBE         reduce using rule 31 (ESTATUTO -> COND .)
    LEE             reduce using rule 31 (ESTATUTO -> COND .)
    REGRESA         reduce using rule 31 (ESTATUTO -> COND .)
    SI              reduce using rule 31 (ESTATUTO -> COND .)
    DESDE           reduce using rule 31 (ESTATUTO -> COND .)
    MIENTRAS        reduce using rule 31 (ESTATUTO -> COND .)
    RBRACKET        reduce using rule 31 (ESTATUTO -> COND .)


state 99

    (32) ESTATUTO -> WRITE . DOTCOMA

    DOTCOMA         shift and go to state 118


state 100

    (33) ESTATUTO -> READ . DOTCOMA

    DOTCOMA         shift and go to state 119


state 101

    (34) ESTATUTO -> RETURN . DOTCOMA

    DOTCOMA         shift and go to state 120


state 102

    (35) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (79) FUN -> ID . r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (123) r_seen_operand_id -> .
    (146) r_check_func -> .

    LSTAPLE         reduce using rule 123 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 123 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 146 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 121
    r_check_func                   shift and go to state 122

state 103

    (83) COND -> IF .

    ID              reduce using rule 83 (COND -> IF .)
    ESCRIBE         reduce using rule 83 (COND -> IF .)
    LEE             reduce using rule 83 (COND -> IF .)
    REGRESA         reduce using rule 83 (COND -> IF .)
    SI              reduce using rule 83 (COND -> IF .)
    DESDE           reduce using rule 83 (COND -> IF .)
    MIENTRAS        reduce using rule 83 (COND -> IF .)
    RBRACKET        reduce using rule 83 (COND -> IF .)


state 104

    (84) COND -> FOR .

    ID              reduce using rule 84 (COND -> FOR .)
    ESCRIBE         reduce using rule 84 (COND -> FOR .)
    LEE             reduce using rule 84 (COND -> FOR .)
    REGRESA         reduce using rule 84 (COND -> FOR .)
    SI              reduce using rule 84 (COND -> FOR .)
    DESDE           reduce using rule 84 (COND -> FOR .)
    MIENTRAS        reduce using rule 84 (COND -> FOR .)
    RBRACKET        reduce using rule 84 (COND -> FOR .)


state 105

    (85) COND -> WHILE .

    ID              reduce using rule 85 (COND -> WHILE .)
    ESCRIBE         reduce using rule 85 (COND -> WHILE .)
    LEE             reduce using rule 85 (COND -> WHILE .)
    REGRESA         reduce using rule 85 (COND -> WHILE .)
    SI              reduce using rule 85 (COND -> WHILE .)
    DESDE           reduce using rule 85 (COND -> WHILE .)
    MIENTRAS        reduce using rule 85 (COND -> WHILE .)
    RBRACKET        reduce using rule 85 (COND -> WHILE .)


state 106

    (99) WRITE -> ESCRIBE . LPAREN WRITE_AUX RPAREN

    LPAREN          shift and go to state 123


state 107

    (103) READ -> LEE . LPAREN READ_AUX RPAREN

    LPAREN          shift and go to state 124


state 108

    (107) RETURN -> REGRESA . LPAREN EXPRESION RPAREN r_regresa
    (108) RETURN -> REGRESA . LPAREN NULL RPAREN

    LPAREN          shift and go to state 125


state 109

    (86) IF -> SI . LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end

    LPAREN          shift and go to state 126


state 110

    (96) FOR -> DESDE . ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (35) ASIGNACION -> . ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal

    ID              shift and go to state 128

    ASIGNACION                     shift and go to state 127

state 111

    (91) WHILE -> MIENTRAS . r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (137) r_set_while -> .

    LPAREN          reduce using rule 137 (r_set_while -> .)

    r_set_while                    shift and go to state 129

state 112

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    FUNCION         reduce using rule 145 (r_func_end -> .)
    PRINCIPAL       reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 130

state 113

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set . BLOQUE r_func_end
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 89

    BLOQUE                         shift and go to state 131

state 114

    (26) BLOQUE -> LBRACKET ESTATUTOS RBRACKET .

    $end            reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    FUNCION         reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    PRINCIPAL       reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SINO            reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ID              reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    ESCRIBE         reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    LEE             reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    REGRESA         reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    SI              reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    DESDE           reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    MIENTRAS        reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)
    RBRACKET        reduce using rule 26 (BLOQUE -> LBRACKET ESTATUTOS RBRACKET .)


state 115

    (27) ESTATUTOS -> ESTATUTO ESTATUTOS .

    RBRACKET        reduce using rule 27 (ESTATUTOS -> ESTATUTO ESTATUTOS .)


state 116

    (29) ESTATUTO -> ASIGNACION DOTCOMA .

    ID              reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    ESCRIBE         reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    LEE             reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    REGRESA         reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    SI              reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    DESDE           reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    MIENTRAS        reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)
    RBRACKET        reduce using rule 29 (ESTATUTO -> ASIGNACION DOTCOMA .)


state 117

    (30) ESTATUTO -> FUN DOTCOMA .

    ID              reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    ESCRIBE         reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    LEE             reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    REGRESA         reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    SI              reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    DESDE           reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    MIENTRAS        reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)
    RBRACKET        reduce using rule 30 (ESTATUTO -> FUN DOTCOMA .)


state 118

    (32) ESTATUTO -> WRITE DOTCOMA .

    ID              reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    ESCRIBE         reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    LEE             reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    REGRESA         reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    SI              reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    DESDE           reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    MIENTRAS        reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)
    RBRACKET        reduce using rule 32 (ESTATUTO -> WRITE DOTCOMA .)


state 119

    (33) ESTATUTO -> READ DOTCOMA .

    ID              reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    ESCRIBE         reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    LEE             reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    REGRESA         reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    SI              reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    DESDE           reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    MIENTRAS        reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> READ DOTCOMA .)


state 120

    (34) ESTATUTO -> RETURN DOTCOMA .

    ID              reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    ESCRIBE         reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    LEE             reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    REGRESA         reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    SI              reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    DESDE           reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    MIENTRAS        reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> RETURN DOTCOMA .)


state 121

    (35) ASIGNACION -> ID r_seen_operand_id . ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (36) ARRACC -> . LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
    (37) ARRACC -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 133
    EQUAL           reduce using rule 1 (empty -> .)

    ARRACC                         shift and go to state 132
    empty                          shift and go to state 134

state 122

    (79) FUN -> ID r_check_func . LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub

    LPAREN          shift and go to state 135


state 123

    (99) WRITE -> ESCRIBE LPAREN . WRITE_AUX RPAREN
    (100) WRITE_AUX -> . EXPRESION r_escribe WRITE_AUXSUB
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 136
    EXPRESION                      shift and go to state 137
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 124

    (103) READ -> LEE LPAREN . READ_AUX RPAREN
    (104) READ_AUX -> . ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB

    ID              shift and go to state 149

    READ_AUX                       shift and go to state 148

state 125

    (107) RETURN -> REGRESA LPAREN . EXPRESION RPAREN r_regresa
    (108) RETURN -> REGRESA LPAREN . NULL RPAREN
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NULL            shift and go to state 151
    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 150
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 126

    (86) IF -> SI LPAREN . EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 152
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 127

    (96) FOR -> DESDE ASIGNACION . r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (139) r_set_for -> .

    HASTA           reduce using rule 139 (r_set_for -> .)

    r_set_for                      shift and go to state 153

state 128

    (35) ASIGNACION -> ID . r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal
    (123) r_seen_operand_id -> .

    LSTAPLE         reduce using rule 123 (r_seen_operand_id -> .)
    EQUAL           reduce using rule 123 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 121

state 129

    (91) WHILE -> MIENTRAS r_set_while . LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LPAREN          shift and go to state 154


state 130

    (20) FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 20 (FUNCTION -> FUNCION TIPO ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 131

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE . r_func_end
    (145) r_func_end -> .

    FUNCION         reduce using rule 145 (r_func_end -> .)
    PRINCIPAL       reduce using rule 145 (r_func_end -> .)

    r_func_end                     shift and go to state 155

state 132

    (35) ASIGNACION -> ID r_seen_operand_id ARRACC . EQUAL r_seen_operator EXPRESION r_seen_equal

    EQUAL           shift and go to state 156


state 133

    (36) ARRACC -> LSTAPLE . r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
    (116) r_check_dim -> .

    NOT             reduce using rule 116 (r_check_dim -> .)
    PLUS            reduce using rule 116 (r_check_dim -> .)
    MINUS           reduce using rule 116 (r_check_dim -> .)
    LPAREN          reduce using rule 116 (r_check_dim -> .)
    CTE_I           reduce using rule 116 (r_check_dim -> .)
    CTE_F           reduce using rule 116 (r_check_dim -> .)
    CTE_CH          reduce using rule 116 (r_check_dim -> .)
    CTE_STRING      reduce using rule 116 (r_check_dim -> .)
    ID              reduce using rule 116 (r_check_dim -> .)

    r_check_dim                    shift and go to state 157

state 134

    (37) ARRACC -> empty .

    EQUAL           reduce using rule 37 (ARRACC -> empty .)
    DET_ARR         reduce using rule 37 (ARRACC -> empty .)
    TRANS_ARR       reduce using rule 37 (ARRACC -> empty .)
    INV_ARR         reduce using rule 37 (ARRACC -> empty .)
    MULT            reduce using rule 37 (ARRACC -> empty .)
    DIV             reduce using rule 37 (ARRACC -> empty .)
    MOD             reduce using rule 37 (ARRACC -> empty .)
    PLUS            reduce using rule 37 (ARRACC -> empty .)
    MINUS           reduce using rule 37 (ARRACC -> empty .)
    MORE            reduce using rule 37 (ARRACC -> empty .)
    LESS            reduce using rule 37 (ARRACC -> empty .)
    COMPARE         reduce using rule 37 (ARRACC -> empty .)
    DIFFERENT       reduce using rule 37 (ARRACC -> empty .)
    MOREEQUAL       reduce using rule 37 (ARRACC -> empty .)
    LESSEQUAL       reduce using rule 37 (ARRACC -> empty .)
    AND             reduce using rule 37 (ARRACC -> empty .)
    OR              reduce using rule 37 (ARRACC -> empty .)
    COMA            reduce using rule 37 (ARRACC -> empty .)
    RPAREN          reduce using rule 37 (ARRACC -> empty .)
    RSTAPLE         reduce using rule 37 (ARRACC -> empty .)
    HACER           reduce using rule 37 (ARRACC -> empty .)
    DOTCOMA         reduce using rule 37 (ARRACC -> empty .)
    HASTA           reduce using rule 37 (ARRACC -> empty .)


state 135

    (79) FUN -> ID r_check_func LPAREN . r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (133) r_create_bottom -> .

    NOT             reduce using rule 133 (r_create_bottom -> .)
    PLUS            reduce using rule 133 (r_create_bottom -> .)
    MINUS           reduce using rule 133 (r_create_bottom -> .)
    RPAREN          reduce using rule 133 (r_create_bottom -> .)
    LPAREN          reduce using rule 133 (r_create_bottom -> .)
    CTE_I           reduce using rule 133 (r_create_bottom -> .)
    CTE_F           reduce using rule 133 (r_create_bottom -> .)
    CTE_CH          reduce using rule 133 (r_create_bottom -> .)
    CTE_STRING      reduce using rule 133 (r_create_bottom -> .)
    ID              reduce using rule 133 (r_create_bottom -> .)

    r_create_bottom                shift and go to state 158

state 136

    (99) WRITE -> ESCRIBE LPAREN WRITE_AUX . RPAREN

    RPAREN          shift and go to state 159


state 137

    (100) WRITE_AUX -> EXPRESION . r_escribe WRITE_AUXSUB
    (151) r_escribe -> .

    COMA            reduce using rule 151 (r_escribe -> .)
    RPAREN          reduce using rule 151 (r_escribe -> .)

    r_escribe                      shift and go to state 160

state 138

    (40) EXPRESION -> SUBEXP . r_seen_subexp EXPRESION_AUX
    (128) r_seen_subexp -> .

    AND             reduce using rule 128 (r_seen_subexp -> .)
    OR              reduce using rule 128 (r_seen_subexp -> .)
    COMA            reduce using rule 128 (r_seen_subexp -> .)
    RPAREN          reduce using rule 128 (r_seen_subexp -> .)
    RSTAPLE         reduce using rule 128 (r_seen_subexp -> .)
    HACER           reduce using rule 128 (r_seen_subexp -> .)
    DOTCOMA         reduce using rule 128 (r_seen_subexp -> .)
    HASTA           reduce using rule 128 (r_seen_subexp -> .)

    r_seen_subexp                  shift and go to state 161

state 139

    (44) SUBEXP -> EXP . r_seen_exp SUBEXP_AUX
    (129) r_seen_exp -> .

    MORE            reduce using rule 129 (r_seen_exp -> .)
    LESS            reduce using rule 129 (r_seen_exp -> .)
    COMPARE         reduce using rule 129 (r_seen_exp -> .)
    DIFFERENT       reduce using rule 129 (r_seen_exp -> .)
    MOREEQUAL       reduce using rule 129 (r_seen_exp -> .)
    LESSEQUAL       reduce using rule 129 (r_seen_exp -> .)
    AND             reduce using rule 129 (r_seen_exp -> .)
    OR              reduce using rule 129 (r_seen_exp -> .)
    COMA            reduce using rule 129 (r_seen_exp -> .)
    RPAREN          reduce using rule 129 (r_seen_exp -> .)
    RSTAPLE         reduce using rule 129 (r_seen_exp -> .)
    HACER           reduce using rule 129 (r_seen_exp -> .)
    DOTCOMA         reduce using rule 129 (r_seen_exp -> .)
    HASTA           reduce using rule 129 (r_seen_exp -> .)

    r_seen_exp                     shift and go to state 162

state 140

    (53) EXP -> TERMINO . r_seen_term EXP_AUX
    (130) r_seen_term -> .

    PLUS            reduce using rule 130 (r_seen_term -> .)
    MINUS           reduce using rule 130 (r_seen_term -> .)
    MORE            reduce using rule 130 (r_seen_term -> .)
    LESS            reduce using rule 130 (r_seen_term -> .)
    COMPARE         reduce using rule 130 (r_seen_term -> .)
    DIFFERENT       reduce using rule 130 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 130 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 130 (r_seen_term -> .)
    AND             reduce using rule 130 (r_seen_term -> .)
    OR              reduce using rule 130 (r_seen_term -> .)
    COMA            reduce using rule 130 (r_seen_term -> .)
    RPAREN          reduce using rule 130 (r_seen_term -> .)
    RSTAPLE         reduce using rule 130 (r_seen_term -> .)
    HACER           reduce using rule 130 (r_seen_term -> .)
    DOTCOMA         reduce using rule 130 (r_seen_term -> .)
    HASTA           reduce using rule 130 (r_seen_term -> .)

    r_seen_term                    shift and go to state 163

state 141

    (57) TERMINO -> FACTOR . r_seen_factor TERMINO_AUX
    (131) r_seen_factor -> .

    MULT            reduce using rule 131 (r_seen_factor -> .)
    DIV             reduce using rule 131 (r_seen_factor -> .)
    MOD             reduce using rule 131 (r_seen_factor -> .)
    PLUS            reduce using rule 131 (r_seen_factor -> .)
    MINUS           reduce using rule 131 (r_seen_factor -> .)
    MORE            reduce using rule 131 (r_seen_factor -> .)
    LESS            reduce using rule 131 (r_seen_factor -> .)
    COMPARE         reduce using rule 131 (r_seen_factor -> .)
    DIFFERENT       reduce using rule 131 (r_seen_factor -> .)
    MOREEQUAL       reduce using rule 131 (r_seen_factor -> .)
    LESSEQUAL       reduce using rule 131 (r_seen_factor -> .)
    AND             reduce using rule 131 (r_seen_factor -> .)
    OR              reduce using rule 131 (r_seen_factor -> .)
    COMA            reduce using rule 131 (r_seen_factor -> .)
    RPAREN          reduce using rule 131 (r_seen_factor -> .)
    RSTAPLE         reduce using rule 131 (r_seen_factor -> .)
    HACER           reduce using rule 131 (r_seen_factor -> .)
    DOTCOMA         reduce using rule 131 (r_seen_factor -> .)
    HASTA           reduce using rule 131 (r_seen_factor -> .)

    r_seen_factor                  shift and go to state 164

state 142

    (62) FACTOR -> NOT . r_seen_unary_operator FACTOR_AUX
    (125) r_seen_unary_operator -> .

    PLUS            reduce using rule 125 (r_seen_unary_operator -> .)
    MINUS           reduce using rule 125 (r_seen_unary_operator -> .)
    LPAREN          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 125 (r_seen_unary_operator -> .)
    ID              reduce using rule 125 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 165

state 143

    (63) FACTOR -> FACTOR_AUX .

    MULT            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DIV             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MOD             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    PLUS            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MINUS           reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MORE            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    LESS            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    COMPARE         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DIFFERENT       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    MOREEQUAL       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    LESSEQUAL       reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    AND             reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    OR              reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    COMA            reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    RPAREN          reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    RSTAPLE         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    HACER           reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    DOTCOMA         reduce using rule 63 (FACTOR -> FACTOR_AUX .)
    HASTA           reduce using rule 63 (FACTOR -> FACTOR_AUX .)


state 144

    (64) FACTOR_AUX -> SIGN . LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> SIGN . CTE ARROP
    (69) CTE -> . CTE_I r_seen_operand
    (70) CTE -> . CTE_F r_seen_operand
    (71) CTE -> . CTE_CH r_seen_operand
    (72) CTE -> . CTE_STRING r_seen_operand
    (73) CTE -> . FUN
    (74) CTE -> . ID r_seen_operand_id ARRACC
    (79) FUN -> . ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub

    LPAREN          shift and go to state 166
    CTE_I           shift and go to state 168
    CTE_F           shift and go to state 169
    CTE_CH          shift and go to state 170
    CTE_STRING      shift and go to state 171
    ID              shift and go to state 173

    CTE                            shift and go to state 167
    FUN                            shift and go to state 172

state 145

    (66) SIGN -> PLUS . r_seen_unary_operator
    (125) r_seen_unary_operator -> .

    LPAREN          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 125 (r_seen_unary_operator -> .)
    ID              reduce using rule 125 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 174

state 146

    (67) SIGN -> MINUS . r_seen_unary_operator
    (125) r_seen_unary_operator -> .

    LPAREN          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_I           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_F           reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_CH          reduce using rule 125 (r_seen_unary_operator -> .)
    CTE_STRING      reduce using rule 125 (r_seen_unary_operator -> .)
    ID              reduce using rule 125 (r_seen_unary_operator -> .)

    r_seen_unary_operator          shift and go to state 175

state 147

    (68) SIGN -> empty .

    LPAREN          reduce using rule 68 (SIGN -> empty .)
    CTE_I           reduce using rule 68 (SIGN -> empty .)
    CTE_F           reduce using rule 68 (SIGN -> empty .)
    CTE_CH          reduce using rule 68 (SIGN -> empty .)
    CTE_STRING      reduce using rule 68 (SIGN -> empty .)
    ID              reduce using rule 68 (SIGN -> empty .)


state 148

    (103) READ -> LEE LPAREN READ_AUX . RPAREN

    RPAREN          shift and go to state 176


state 149

    (104) READ_AUX -> ID . r_seen_operand_id ARRDIM r_lee READ_AUXSUB
    (123) r_seen_operand_id -> .

    COMA            reduce using rule 123 (r_seen_operand_id -> .)
    LSTAPLE         reduce using rule 123 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 123 (r_seen_operand_id -> .)

    r_seen_operand_id              shift and go to state 177

state 150

    (107) RETURN -> REGRESA LPAREN EXPRESION . RPAREN r_regresa

    RPAREN          shift and go to state 178


state 151

    (108) RETURN -> REGRESA LPAREN NULL . RPAREN

    RPAREN          shift and go to state 179


state 152

    (86) IF -> SI LPAREN EXPRESION . r_check_int RPAREN ENTONCES IF2 r_if_end
    (134) r_check_int -> .

    RPAREN          reduce using rule 134 (r_check_int -> .)

    r_check_int                    shift and go to state 180

state 153

    (96) FOR -> DESDE ASIGNACION r_set_for . HASTA EXPRESION r_for_gen HACER FOR2 r_for_end

    HASTA           shift and go to state 181


state 154

    (91) WHILE -> MIENTRAS r_set_while LPAREN . EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 182
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 155

    (21) FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .

    FUNCION         reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)
    PRINCIPAL       reduce using rule 21 (FUNCTION -> FUNCION VOID r_save_type ID r_save_func r_register_func LPAREN PARAM RPAREN r_save_param_func VARS r_save_vars r_func_set BLOQUE r_func_end .)


state 156

    (35) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL . r_seen_operator EXPRESION r_seen_equal
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 183

state 157

    (36) ARRACC -> LSTAPLE r_check_dim . EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 184
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 158

    (79) FUN -> ID r_check_func LPAREN r_create_bottom . FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (80) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (81) FUN_AUX -> . EXPRESION r_check_param
    (82) FUN_AUX -> . empty
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146

    FUN_AUX                        shift and go to state 185
    EXPRESION                      shift and go to state 186
    empty                          shift and go to state 187
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144

state 159

    (99) WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN .

    DOTCOMA         reduce using rule 99 (WRITE -> ESCRIBE LPAREN WRITE_AUX RPAREN .)


state 160

    (100) WRITE_AUX -> EXPRESION r_escribe . WRITE_AUXSUB
    (101) WRITE_AUXSUB -> . COMA WRITE_AUX
    (102) WRITE_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 189
    RPAREN          reduce using rule 1 (empty -> .)

    WRITE_AUXSUB                   shift and go to state 188
    empty                          shift and go to state 190

state 161

    (40) EXPRESION -> SUBEXP r_seen_subexp . EXPRESION_AUX
    (41) EXPRESION_AUX -> . AND r_seen_operator EXPRESION
    (42) EXPRESION_AUX -> . OR r_seen_operator EXPRESION
    (43) EXPRESION_AUX -> . empty
    (1) empty -> .

    AND             shift and go to state 192
    OR              shift and go to state 193
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXPRESION_AUX                  shift and go to state 191
    empty                          shift and go to state 194

state 162

    (44) SUBEXP -> EXP r_seen_exp . SUBEXP_AUX
    (45) SUBEXP_AUX -> . COMPARACION SUBEXP
    (46) SUBEXP_AUX -> . empty
    (47) COMPARACION -> . MORE r_seen_operator
    (48) COMPARACION -> . LESS r_seen_operator
    (49) COMPARACION -> . COMPARE r_seen_operator
    (50) COMPARACION -> . DIFFERENT r_seen_operator
    (51) COMPARACION -> . MOREEQUAL r_seen_operator
    (52) COMPARACION -> . LESSEQUAL r_seen_operator
    (1) empty -> .

    MORE            shift and go to state 198
    LESS            shift and go to state 199
    COMPARE         shift and go to state 200
    DIFFERENT       shift and go to state 201
    MOREEQUAL       shift and go to state 202
    LESSEQUAL       shift and go to state 203
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    SUBEXP_AUX                     shift and go to state 195
    COMPARACION                    shift and go to state 196
    empty                          shift and go to state 197

state 163

    (53) EXP -> TERMINO r_seen_term . EXP_AUX
    (54) EXP_AUX -> . PLUS r_seen_operator EXP
    (55) EXP_AUX -> . MINUS r_seen_operator EXP
    (56) EXP_AUX -> . empty
    (1) empty -> .

    PLUS            shift and go to state 205
    MINUS           shift and go to state 206
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    EXP_AUX                        shift and go to state 204
    empty                          shift and go to state 207

state 164

    (57) TERMINO -> FACTOR r_seen_factor . TERMINO_AUX
    (58) TERMINO_AUX -> . MULT r_seen_operator TERMINO r_seen_term
    (59) TERMINO_AUX -> . DIV r_seen_operator TERMINO r_seen_term
    (60) TERMINO_AUX -> . MOD r_seen_operator TERMINO r_seen_term
    (61) TERMINO_AUX -> . empty
    (1) empty -> .

    MULT            shift and go to state 209
    DIV             shift and go to state 210
    MOD             shift and go to state 211
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    TERMINO_AUX                    shift and go to state 208
    empty                          shift and go to state 212

state 165

    (62) FACTOR -> NOT r_seen_unary_operator . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    FACTOR_AUX                     shift and go to state 213
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 166

    (64) FACTOR_AUX -> SIGN LPAREN . r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 214

state 167

    (65) FACTOR_AUX -> SIGN CTE . ARROP
    (75) ARROP -> . DET_ARR r_seen_operator_mat
    (76) ARROP -> . TRANS_ARR r_seen_operator_mat
    (77) ARROP -> . INV_ARR r_seen_operator_mat
    (78) ARROP -> . empty
    (1) empty -> .

    DET_ARR         shift and go to state 216
    TRANS_ARR       shift and go to state 217
    INV_ARR         shift and go to state 218
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    ARROP                          shift and go to state 215
    empty                          shift and go to state 219

state 168

    (69) CTE -> CTE_I . r_seen_operand
    (122) r_seen_operand -> .

    DET_ARR         reduce using rule 122 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 122 (r_seen_operand -> .)
    INV_ARR         reduce using rule 122 (r_seen_operand -> .)
    MULT            reduce using rule 122 (r_seen_operand -> .)
    DIV             reduce using rule 122 (r_seen_operand -> .)
    MOD             reduce using rule 122 (r_seen_operand -> .)
    PLUS            reduce using rule 122 (r_seen_operand -> .)
    MINUS           reduce using rule 122 (r_seen_operand -> .)
    MORE            reduce using rule 122 (r_seen_operand -> .)
    LESS            reduce using rule 122 (r_seen_operand -> .)
    COMPARE         reduce using rule 122 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 122 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 122 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 122 (r_seen_operand -> .)
    AND             reduce using rule 122 (r_seen_operand -> .)
    OR              reduce using rule 122 (r_seen_operand -> .)
    COMA            reduce using rule 122 (r_seen_operand -> .)
    RPAREN          reduce using rule 122 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 122 (r_seen_operand -> .)
    HACER           reduce using rule 122 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 122 (r_seen_operand -> .)
    HASTA           reduce using rule 122 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 220

state 169

    (70) CTE -> CTE_F . r_seen_operand
    (122) r_seen_operand -> .

    DET_ARR         reduce using rule 122 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 122 (r_seen_operand -> .)
    INV_ARR         reduce using rule 122 (r_seen_operand -> .)
    MULT            reduce using rule 122 (r_seen_operand -> .)
    DIV             reduce using rule 122 (r_seen_operand -> .)
    MOD             reduce using rule 122 (r_seen_operand -> .)
    PLUS            reduce using rule 122 (r_seen_operand -> .)
    MINUS           reduce using rule 122 (r_seen_operand -> .)
    MORE            reduce using rule 122 (r_seen_operand -> .)
    LESS            reduce using rule 122 (r_seen_operand -> .)
    COMPARE         reduce using rule 122 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 122 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 122 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 122 (r_seen_operand -> .)
    AND             reduce using rule 122 (r_seen_operand -> .)
    OR              reduce using rule 122 (r_seen_operand -> .)
    COMA            reduce using rule 122 (r_seen_operand -> .)
    RPAREN          reduce using rule 122 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 122 (r_seen_operand -> .)
    HACER           reduce using rule 122 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 122 (r_seen_operand -> .)
    HASTA           reduce using rule 122 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 221

state 170

    (71) CTE -> CTE_CH . r_seen_operand
    (122) r_seen_operand -> .

    DET_ARR         reduce using rule 122 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 122 (r_seen_operand -> .)
    INV_ARR         reduce using rule 122 (r_seen_operand -> .)
    MULT            reduce using rule 122 (r_seen_operand -> .)
    DIV             reduce using rule 122 (r_seen_operand -> .)
    MOD             reduce using rule 122 (r_seen_operand -> .)
    PLUS            reduce using rule 122 (r_seen_operand -> .)
    MINUS           reduce using rule 122 (r_seen_operand -> .)
    MORE            reduce using rule 122 (r_seen_operand -> .)
    LESS            reduce using rule 122 (r_seen_operand -> .)
    COMPARE         reduce using rule 122 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 122 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 122 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 122 (r_seen_operand -> .)
    AND             reduce using rule 122 (r_seen_operand -> .)
    OR              reduce using rule 122 (r_seen_operand -> .)
    COMA            reduce using rule 122 (r_seen_operand -> .)
    RPAREN          reduce using rule 122 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 122 (r_seen_operand -> .)
    HACER           reduce using rule 122 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 122 (r_seen_operand -> .)
    HASTA           reduce using rule 122 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 222

state 171

    (72) CTE -> CTE_STRING . r_seen_operand
    (122) r_seen_operand -> .

    DET_ARR         reduce using rule 122 (r_seen_operand -> .)
    TRANS_ARR       reduce using rule 122 (r_seen_operand -> .)
    INV_ARR         reduce using rule 122 (r_seen_operand -> .)
    MULT            reduce using rule 122 (r_seen_operand -> .)
    DIV             reduce using rule 122 (r_seen_operand -> .)
    MOD             reduce using rule 122 (r_seen_operand -> .)
    PLUS            reduce using rule 122 (r_seen_operand -> .)
    MINUS           reduce using rule 122 (r_seen_operand -> .)
    MORE            reduce using rule 122 (r_seen_operand -> .)
    LESS            reduce using rule 122 (r_seen_operand -> .)
    COMPARE         reduce using rule 122 (r_seen_operand -> .)
    DIFFERENT       reduce using rule 122 (r_seen_operand -> .)
    MOREEQUAL       reduce using rule 122 (r_seen_operand -> .)
    LESSEQUAL       reduce using rule 122 (r_seen_operand -> .)
    AND             reduce using rule 122 (r_seen_operand -> .)
    OR              reduce using rule 122 (r_seen_operand -> .)
    COMA            reduce using rule 122 (r_seen_operand -> .)
    RPAREN          reduce using rule 122 (r_seen_operand -> .)
    RSTAPLE         reduce using rule 122 (r_seen_operand -> .)
    HACER           reduce using rule 122 (r_seen_operand -> .)
    DOTCOMA         reduce using rule 122 (r_seen_operand -> .)
    HASTA           reduce using rule 122 (r_seen_operand -> .)

    r_seen_operand                 shift and go to state 223

state 172

    (73) CTE -> FUN .

    DET_ARR         reduce using rule 73 (CTE -> FUN .)
    TRANS_ARR       reduce using rule 73 (CTE -> FUN .)
    INV_ARR         reduce using rule 73 (CTE -> FUN .)
    MULT            reduce using rule 73 (CTE -> FUN .)
    DIV             reduce using rule 73 (CTE -> FUN .)
    MOD             reduce using rule 73 (CTE -> FUN .)
    PLUS            reduce using rule 73 (CTE -> FUN .)
    MINUS           reduce using rule 73 (CTE -> FUN .)
    MORE            reduce using rule 73 (CTE -> FUN .)
    LESS            reduce using rule 73 (CTE -> FUN .)
    COMPARE         reduce using rule 73 (CTE -> FUN .)
    DIFFERENT       reduce using rule 73 (CTE -> FUN .)
    MOREEQUAL       reduce using rule 73 (CTE -> FUN .)
    LESSEQUAL       reduce using rule 73 (CTE -> FUN .)
    AND             reduce using rule 73 (CTE -> FUN .)
    OR              reduce using rule 73 (CTE -> FUN .)
    COMA            reduce using rule 73 (CTE -> FUN .)
    RPAREN          reduce using rule 73 (CTE -> FUN .)
    RSTAPLE         reduce using rule 73 (CTE -> FUN .)
    HACER           reduce using rule 73 (CTE -> FUN .)
    DOTCOMA         reduce using rule 73 (CTE -> FUN .)
    HASTA           reduce using rule 73 (CTE -> FUN .)


state 173

    (74) CTE -> ID . r_seen_operand_id ARRACC
    (79) FUN -> ID . r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub
    (123) r_seen_operand_id -> .
    (146) r_check_func -> .

    LSTAPLE         reduce using rule 123 (r_seen_operand_id -> .)
    DET_ARR         reduce using rule 123 (r_seen_operand_id -> .)
    TRANS_ARR       reduce using rule 123 (r_seen_operand_id -> .)
    INV_ARR         reduce using rule 123 (r_seen_operand_id -> .)
    MULT            reduce using rule 123 (r_seen_operand_id -> .)
    DIV             reduce using rule 123 (r_seen_operand_id -> .)
    MOD             reduce using rule 123 (r_seen_operand_id -> .)
    PLUS            reduce using rule 123 (r_seen_operand_id -> .)
    MINUS           reduce using rule 123 (r_seen_operand_id -> .)
    MORE            reduce using rule 123 (r_seen_operand_id -> .)
    LESS            reduce using rule 123 (r_seen_operand_id -> .)
    COMPARE         reduce using rule 123 (r_seen_operand_id -> .)
    DIFFERENT       reduce using rule 123 (r_seen_operand_id -> .)
    MOREEQUAL       reduce using rule 123 (r_seen_operand_id -> .)
    LESSEQUAL       reduce using rule 123 (r_seen_operand_id -> .)
    AND             reduce using rule 123 (r_seen_operand_id -> .)
    OR              reduce using rule 123 (r_seen_operand_id -> .)
    COMA            reduce using rule 123 (r_seen_operand_id -> .)
    RPAREN          reduce using rule 123 (r_seen_operand_id -> .)
    RSTAPLE         reduce using rule 123 (r_seen_operand_id -> .)
    HACER           reduce using rule 123 (r_seen_operand_id -> .)
    DOTCOMA         reduce using rule 123 (r_seen_operand_id -> .)
    HASTA           reduce using rule 123 (r_seen_operand_id -> .)
    LPAREN          reduce using rule 146 (r_check_func -> .)

    r_seen_operand_id              shift and go to state 224
    r_check_func                   shift and go to state 122

state 174

    (66) SIGN -> PLUS r_seen_unary_operator .

    LPAREN          reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_I           reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_F           reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)
    ID              reduce using rule 66 (SIGN -> PLUS r_seen_unary_operator .)


state 175

    (67) SIGN -> MINUS r_seen_unary_operator .

    LPAREN          reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_I           reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_F           reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_CH          reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    CTE_STRING      reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)
    ID              reduce using rule 67 (SIGN -> MINUS r_seen_unary_operator .)


state 176

    (103) READ -> LEE LPAREN READ_AUX RPAREN .

    DOTCOMA         reduce using rule 103 (READ -> LEE LPAREN READ_AUX RPAREN .)


state 177

    (104) READ_AUX -> ID r_seen_operand_id . ARRDIM r_lee READ_AUXSUB
    (14) ARRDIM -> . r_register_arr LSTAPLE CTE_I r_register_dim ARRDIM_AUX RSTAPLE ARRDIM
    (15) ARRDIM -> . empty
    (113) r_register_arr -> .
    (1) empty -> .

    LSTAPLE         reduce using rule 113 (r_register_arr -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)

    ARRDIM                         shift and go to state 225
    r_register_arr                 shift and go to state 39
    empty                          shift and go to state 40

state 178

    (107) RETURN -> REGRESA LPAREN EXPRESION RPAREN . r_regresa
    (150) r_regresa -> .

    DOTCOMA         reduce using rule 150 (r_regresa -> .)

    r_regresa                      shift and go to state 226

state 179

    (108) RETURN -> REGRESA LPAREN NULL RPAREN .

    DOTCOMA         reduce using rule 108 (RETURN -> REGRESA LPAREN NULL RPAREN .)


state 180

    (86) IF -> SI LPAREN EXPRESION r_check_int . RPAREN ENTONCES IF2 r_if_end

    RPAREN          shift and go to state 227


state 181

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA . EXPRESION r_for_gen HACER FOR2 r_for_end
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 228
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 182

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION . r_check_int RPAREN WHILE_AUX WHILE2 r_while_end
    (134) r_check_int -> .

    RPAREN          reduce using rule 134 (r_check_int -> .)

    r_check_int                    shift and go to state 229

state 183

    (35) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator . EXPRESION r_seen_equal
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 230
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 184

    (36) ARRACC -> LSTAPLE r_check_dim EXPRESION . r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
    (117) r_create_quad -> .

    COMA            reduce using rule 117 (r_create_quad -> .)
    RSTAPLE         reduce using rule 117 (r_create_quad -> .)

    r_create_quad                  shift and go to state 231

state 185

    (79) FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX . RPAREN r_pop_fake_bottom r_go_sub

    RPAREN          shift and go to state 232


state 186

    (80) FUN_AUX -> EXPRESION . r_check_param COMA FUN_AUX
    (81) FUN_AUX -> EXPRESION . r_check_param
    (147) r_check_param -> .

    COMA            reduce using rule 147 (r_check_param -> .)
    RPAREN          reduce using rule 147 (r_check_param -> .)

    r_check_param                  shift and go to state 233

state 187

    (82) FUN_AUX -> empty .
    (68) SIGN -> empty .

    RPAREN          reduce using rule 82 (FUN_AUX -> empty .)
    LPAREN          reduce using rule 68 (SIGN -> empty .)
    CTE_I           reduce using rule 68 (SIGN -> empty .)
    CTE_F           reduce using rule 68 (SIGN -> empty .)
    CTE_CH          reduce using rule 68 (SIGN -> empty .)
    CTE_STRING      reduce using rule 68 (SIGN -> empty .)
    ID              reduce using rule 68 (SIGN -> empty .)


state 188

    (100) WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB .

    RPAREN          reduce using rule 100 (WRITE_AUX -> EXPRESION r_escribe WRITE_AUXSUB .)


state 189

    (101) WRITE_AUXSUB -> COMA . WRITE_AUX
    (100) WRITE_AUX -> . EXPRESION r_escribe WRITE_AUXSUB
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    WRITE_AUX                      shift and go to state 234
    EXPRESION                      shift and go to state 137
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 190

    (102) WRITE_AUXSUB -> empty .

    RPAREN          reduce using rule 102 (WRITE_AUXSUB -> empty .)


state 191

    (40) EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .

    COMA            reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    RPAREN          reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    RSTAPLE         reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HACER           reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    DOTCOMA         reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)
    HASTA           reduce using rule 40 (EXPRESION -> SUBEXP r_seen_subexp EXPRESION_AUX .)


state 192

    (41) EXPRESION_AUX -> AND . r_seen_operator EXPRESION
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 235

state 193

    (42) EXPRESION_AUX -> OR . r_seen_operator EXPRESION
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 236

state 194

    (43) EXPRESION_AUX -> empty .

    COMA            reduce using rule 43 (EXPRESION_AUX -> empty .)
    RPAREN          reduce using rule 43 (EXPRESION_AUX -> empty .)
    RSTAPLE         reduce using rule 43 (EXPRESION_AUX -> empty .)
    HACER           reduce using rule 43 (EXPRESION_AUX -> empty .)
    DOTCOMA         reduce using rule 43 (EXPRESION_AUX -> empty .)
    HASTA           reduce using rule 43 (EXPRESION_AUX -> empty .)


state 195

    (44) SUBEXP -> EXP r_seen_exp SUBEXP_AUX .

    AND             reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    OR              reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    COMA            reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    RPAREN          reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    RSTAPLE         reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HACER           reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    DOTCOMA         reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)
    HASTA           reduce using rule 44 (SUBEXP -> EXP r_seen_exp SUBEXP_AUX .)


state 196

    (45) SUBEXP_AUX -> COMPARACION . SUBEXP
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SUBEXP                         shift and go to state 237
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 197

    (46) SUBEXP_AUX -> empty .

    AND             reduce using rule 46 (SUBEXP_AUX -> empty .)
    OR              reduce using rule 46 (SUBEXP_AUX -> empty .)
    COMA            reduce using rule 46 (SUBEXP_AUX -> empty .)
    RPAREN          reduce using rule 46 (SUBEXP_AUX -> empty .)
    RSTAPLE         reduce using rule 46 (SUBEXP_AUX -> empty .)
    HACER           reduce using rule 46 (SUBEXP_AUX -> empty .)
    DOTCOMA         reduce using rule 46 (SUBEXP_AUX -> empty .)
    HASTA           reduce using rule 46 (SUBEXP_AUX -> empty .)


state 198

    (47) COMPARACION -> MORE . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 238

state 199

    (48) COMPARACION -> LESS . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 239

state 200

    (49) COMPARACION -> COMPARE . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 240

state 201

    (50) COMPARACION -> DIFFERENT . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 241

state 202

    (51) COMPARACION -> MOREEQUAL . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 242

state 203

    (52) COMPARACION -> LESSEQUAL . r_seen_operator
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 243

state 204

    (53) EXP -> TERMINO r_seen_term EXP_AUX .

    MORE            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESS            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMPARE         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DIFFERENT       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    MOREEQUAL       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    LESSEQUAL       reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    AND             reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    OR              reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    COMA            reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    RPAREN          reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    RSTAPLE         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HACER           reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    DOTCOMA         reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)
    HASTA           reduce using rule 53 (EXP -> TERMINO r_seen_term EXP_AUX .)


state 205

    (54) EXP_AUX -> PLUS . r_seen_operator EXP
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 244

state 206

    (55) EXP_AUX -> MINUS . r_seen_operator EXP
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 245

state 207

    (56) EXP_AUX -> empty .

    MORE            reduce using rule 56 (EXP_AUX -> empty .)
    LESS            reduce using rule 56 (EXP_AUX -> empty .)
    COMPARE         reduce using rule 56 (EXP_AUX -> empty .)
    DIFFERENT       reduce using rule 56 (EXP_AUX -> empty .)
    MOREEQUAL       reduce using rule 56 (EXP_AUX -> empty .)
    LESSEQUAL       reduce using rule 56 (EXP_AUX -> empty .)
    AND             reduce using rule 56 (EXP_AUX -> empty .)
    OR              reduce using rule 56 (EXP_AUX -> empty .)
    COMA            reduce using rule 56 (EXP_AUX -> empty .)
    RPAREN          reduce using rule 56 (EXP_AUX -> empty .)
    RSTAPLE         reduce using rule 56 (EXP_AUX -> empty .)
    HACER           reduce using rule 56 (EXP_AUX -> empty .)
    DOTCOMA         reduce using rule 56 (EXP_AUX -> empty .)
    HASTA           reduce using rule 56 (EXP_AUX -> empty .)


state 208

    (57) TERMINO -> FACTOR r_seen_factor TERMINO_AUX .

    PLUS            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MINUS           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MORE            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESS            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMPARE         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DIFFERENT       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    MOREEQUAL       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    LESSEQUAL       reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    AND             reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    OR              reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    COMA            reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    RPAREN          reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    RSTAPLE         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HACER           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    DOTCOMA         reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)
    HASTA           reduce using rule 57 (TERMINO -> FACTOR r_seen_factor TERMINO_AUX .)


state 209

    (58) TERMINO_AUX -> MULT . r_seen_operator TERMINO r_seen_term
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 246

state 210

    (59) TERMINO_AUX -> DIV . r_seen_operator TERMINO r_seen_term
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 247

state 211

    (60) TERMINO_AUX -> MOD . r_seen_operator TERMINO r_seen_term
    (124) r_seen_operator -> .

    NOT             reduce using rule 124 (r_seen_operator -> .)
    PLUS            reduce using rule 124 (r_seen_operator -> .)
    MINUS           reduce using rule 124 (r_seen_operator -> .)
    LPAREN          reduce using rule 124 (r_seen_operator -> .)
    CTE_I           reduce using rule 124 (r_seen_operator -> .)
    CTE_F           reduce using rule 124 (r_seen_operator -> .)
    CTE_CH          reduce using rule 124 (r_seen_operator -> .)
    CTE_STRING      reduce using rule 124 (r_seen_operator -> .)
    ID              reduce using rule 124 (r_seen_operator -> .)

    r_seen_operator                shift and go to state 248

state 212

    (61) TERMINO_AUX -> empty .

    PLUS            reduce using rule 61 (TERMINO_AUX -> empty .)
    MINUS           reduce using rule 61 (TERMINO_AUX -> empty .)
    MORE            reduce using rule 61 (TERMINO_AUX -> empty .)
    LESS            reduce using rule 61 (TERMINO_AUX -> empty .)
    COMPARE         reduce using rule 61 (TERMINO_AUX -> empty .)
    DIFFERENT       reduce using rule 61 (TERMINO_AUX -> empty .)
    MOREEQUAL       reduce using rule 61 (TERMINO_AUX -> empty .)
    LESSEQUAL       reduce using rule 61 (TERMINO_AUX -> empty .)
    AND             reduce using rule 61 (TERMINO_AUX -> empty .)
    OR              reduce using rule 61 (TERMINO_AUX -> empty .)
    COMA            reduce using rule 61 (TERMINO_AUX -> empty .)
    RPAREN          reduce using rule 61 (TERMINO_AUX -> empty .)
    RSTAPLE         reduce using rule 61 (TERMINO_AUX -> empty .)
    HACER           reduce using rule 61 (TERMINO_AUX -> empty .)
    DOTCOMA         reduce using rule 61 (TERMINO_AUX -> empty .)
    HASTA           reduce using rule 61 (TERMINO_AUX -> empty .)


state 213

    (62) FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .

    MULT            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIV             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOD             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    PLUS            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MINUS           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MORE            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESS            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMPARE         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DIFFERENT       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    MOREEQUAL       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    LESSEQUAL       reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    AND             reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    OR              reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    COMA            reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    RPAREN          reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    RSTAPLE         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HACER           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    DOTCOMA         reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)
    HASTA           reduce using rule 62 (FACTOR -> NOT r_seen_unary_operator FACTOR_AUX .)


state 214

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator . EXPRESION RPAREN r_pop_fake_bottom
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    SIGN                           shift and go to state 144
    EXPRESION                      shift and go to state 249
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    empty                          shift and go to state 147

state 215

    (65) FACTOR_AUX -> SIGN CTE ARROP .

    MULT            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIV             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOD             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    PLUS            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MINUS           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MORE            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESS            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMPARE         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DIFFERENT       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    MOREEQUAL       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    LESSEQUAL       reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    AND             reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    OR              reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    COMA            reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    RPAREN          reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    RSTAPLE         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    HACER           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    DOTCOMA         reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)
    HASTA           reduce using rule 65 (FACTOR_AUX -> SIGN CTE ARROP .)


state 216

    (75) ARROP -> DET_ARR . r_seen_operator_mat
    (126) r_seen_operator_mat -> .

    MULT            reduce using rule 126 (r_seen_operator_mat -> .)
    DIV             reduce using rule 126 (r_seen_operator_mat -> .)
    MOD             reduce using rule 126 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 126 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 126 (r_seen_operator_mat -> .)
    MORE            reduce using rule 126 (r_seen_operator_mat -> .)
    LESS            reduce using rule 126 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 126 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 126 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    AND             reduce using rule 126 (r_seen_operator_mat -> .)
    OR              reduce using rule 126 (r_seen_operator_mat -> .)
    COMA            reduce using rule 126 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 126 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 126 (r_seen_operator_mat -> .)
    HACER           reduce using rule 126 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 126 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 126 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 250

state 217

    (76) ARROP -> TRANS_ARR . r_seen_operator_mat
    (126) r_seen_operator_mat -> .

    MULT            reduce using rule 126 (r_seen_operator_mat -> .)
    DIV             reduce using rule 126 (r_seen_operator_mat -> .)
    MOD             reduce using rule 126 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 126 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 126 (r_seen_operator_mat -> .)
    MORE            reduce using rule 126 (r_seen_operator_mat -> .)
    LESS            reduce using rule 126 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 126 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 126 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    AND             reduce using rule 126 (r_seen_operator_mat -> .)
    OR              reduce using rule 126 (r_seen_operator_mat -> .)
    COMA            reduce using rule 126 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 126 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 126 (r_seen_operator_mat -> .)
    HACER           reduce using rule 126 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 126 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 126 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 251

state 218

    (77) ARROP -> INV_ARR . r_seen_operator_mat
    (126) r_seen_operator_mat -> .

    MULT            reduce using rule 126 (r_seen_operator_mat -> .)
    DIV             reduce using rule 126 (r_seen_operator_mat -> .)
    MOD             reduce using rule 126 (r_seen_operator_mat -> .)
    PLUS            reduce using rule 126 (r_seen_operator_mat -> .)
    MINUS           reduce using rule 126 (r_seen_operator_mat -> .)
    MORE            reduce using rule 126 (r_seen_operator_mat -> .)
    LESS            reduce using rule 126 (r_seen_operator_mat -> .)
    COMPARE         reduce using rule 126 (r_seen_operator_mat -> .)
    DIFFERENT       reduce using rule 126 (r_seen_operator_mat -> .)
    MOREEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    LESSEQUAL       reduce using rule 126 (r_seen_operator_mat -> .)
    AND             reduce using rule 126 (r_seen_operator_mat -> .)
    OR              reduce using rule 126 (r_seen_operator_mat -> .)
    COMA            reduce using rule 126 (r_seen_operator_mat -> .)
    RPAREN          reduce using rule 126 (r_seen_operator_mat -> .)
    RSTAPLE         reduce using rule 126 (r_seen_operator_mat -> .)
    HACER           reduce using rule 126 (r_seen_operator_mat -> .)
    DOTCOMA         reduce using rule 126 (r_seen_operator_mat -> .)
    HASTA           reduce using rule 126 (r_seen_operator_mat -> .)

    r_seen_operator_mat            shift and go to state 252

state 219

    (78) ARROP -> empty .

    MULT            reduce using rule 78 (ARROP -> empty .)
    DIV             reduce using rule 78 (ARROP -> empty .)
    MOD             reduce using rule 78 (ARROP -> empty .)
    PLUS            reduce using rule 78 (ARROP -> empty .)
    MINUS           reduce using rule 78 (ARROP -> empty .)
    MORE            reduce using rule 78 (ARROP -> empty .)
    LESS            reduce using rule 78 (ARROP -> empty .)
    COMPARE         reduce using rule 78 (ARROP -> empty .)
    DIFFERENT       reduce using rule 78 (ARROP -> empty .)
    MOREEQUAL       reduce using rule 78 (ARROP -> empty .)
    LESSEQUAL       reduce using rule 78 (ARROP -> empty .)
    AND             reduce using rule 78 (ARROP -> empty .)
    OR              reduce using rule 78 (ARROP -> empty .)
    COMA            reduce using rule 78 (ARROP -> empty .)
    RPAREN          reduce using rule 78 (ARROP -> empty .)
    RSTAPLE         reduce using rule 78 (ARROP -> empty .)
    HACER           reduce using rule 78 (ARROP -> empty .)
    DOTCOMA         reduce using rule 78 (ARROP -> empty .)
    HASTA           reduce using rule 78 (ARROP -> empty .)


state 220

    (69) CTE -> CTE_I r_seen_operand .

    DET_ARR         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    TRANS_ARR       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    INV_ARR         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MULT            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DIV             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MOD             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    PLUS            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MINUS           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MORE            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    LESS            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    COMPARE         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DIFFERENT       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    MOREEQUAL       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    LESSEQUAL       reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    AND             reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    OR              reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    COMA            reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    RPAREN          reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    RSTAPLE         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    HACER           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    DOTCOMA         reduce using rule 69 (CTE -> CTE_I r_seen_operand .)
    HASTA           reduce using rule 69 (CTE -> CTE_I r_seen_operand .)


state 221

    (70) CTE -> CTE_F r_seen_operand .

    DET_ARR         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    TRANS_ARR       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    INV_ARR         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MULT            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DIV             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MOD             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    PLUS            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MINUS           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MORE            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    LESS            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    COMPARE         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DIFFERENT       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    MOREEQUAL       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    LESSEQUAL       reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    AND             reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    OR              reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    COMA            reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    RPAREN          reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    RSTAPLE         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    HACER           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    DOTCOMA         reduce using rule 70 (CTE -> CTE_F r_seen_operand .)
    HASTA           reduce using rule 70 (CTE -> CTE_F r_seen_operand .)


state 222

    (71) CTE -> CTE_CH r_seen_operand .

    DET_ARR         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    TRANS_ARR       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    INV_ARR         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MULT            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DIV             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MOD             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    PLUS            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MINUS           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MORE            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    LESS            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    COMPARE         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DIFFERENT       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    MOREEQUAL       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    LESSEQUAL       reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    AND             reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    OR              reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    COMA            reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    RPAREN          reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    RSTAPLE         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    HACER           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    DOTCOMA         reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)
    HASTA           reduce using rule 71 (CTE -> CTE_CH r_seen_operand .)


state 223

    (72) CTE -> CTE_STRING r_seen_operand .

    DET_ARR         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    TRANS_ARR       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    INV_ARR         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MULT            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DIV             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MOD             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    PLUS            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MINUS           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MORE            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    LESS            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    COMPARE         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DIFFERENT       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    MOREEQUAL       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    LESSEQUAL       reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    AND             reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    OR              reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    COMA            reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    RPAREN          reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    RSTAPLE         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    HACER           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    DOTCOMA         reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)
    HASTA           reduce using rule 72 (CTE -> CTE_STRING r_seen_operand .)


state 224

    (74) CTE -> ID r_seen_operand_id . ARRACC
    (36) ARRACC -> . LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc
    (37) ARRACC -> . empty
    (1) empty -> .

    LSTAPLE         shift and go to state 133
    DET_ARR         reduce using rule 1 (empty -> .)
    TRANS_ARR       reduce using rule 1 (empty -> .)
    INV_ARR         reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIV             reduce using rule 1 (empty -> .)
    MOD             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MORE            reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    COMPARE         reduce using rule 1 (empty -> .)
    DIFFERENT       reduce using rule 1 (empty -> .)
    MOREEQUAL       reduce using rule 1 (empty -> .)
    LESSEQUAL       reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    COMA            reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    RSTAPLE         reduce using rule 1 (empty -> .)
    HACER           reduce using rule 1 (empty -> .)
    DOTCOMA         reduce using rule 1 (empty -> .)
    HASTA           reduce using rule 1 (empty -> .)

    ARRACC                         shift and go to state 253
    empty                          shift and go to state 134

state 225

    (104) READ_AUX -> ID r_seen_operand_id ARRDIM . r_lee READ_AUXSUB
    (152) r_lee -> .

    COMA            reduce using rule 152 (r_lee -> .)
    RPAREN          reduce using rule 152 (r_lee -> .)

    r_lee                          shift and go to state 254

state 226

    (107) RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .

    DOTCOMA         reduce using rule 107 (RETURN -> REGRESA LPAREN EXPRESION RPAREN r_regresa .)


state 227

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN . ENTONCES IF2 r_if_end

    ENTONCES        shift and go to state 255


state 228

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION . r_for_gen HACER FOR2 r_for_end
    (140) r_for_gen -> .

    HACER           reduce using rule 140 (r_for_gen -> .)

    r_for_gen                      shift and go to state 256

state 229

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int . RPAREN WHILE_AUX WHILE2 r_while_end

    RPAREN          shift and go to state 257


state 230

    (35) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION . r_seen_equal
    (127) r_seen_equal -> .

    DOTCOMA         reduce using rule 127 (r_seen_equal -> .)
    HASTA           reduce using rule 127 (r_seen_equal -> .)

    r_seen_equal                   shift and go to state 258

state 231

    (36) ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad . ARRACC_AUX RSTAPLE r_close_arracc
    (38) ARRACC_AUX -> . COMA r_add_dim EXPRESION r_create_quad ARRACC_AUX
    (39) ARRACC_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 260
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRACC_AUX                     shift and go to state 259
    empty                          shift and go to state 261

state 232

    (79) FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN . r_pop_fake_bottom r_go_sub
    (132) r_pop_fake_bottom -> .

    DOTCOMA         reduce using rule 132 (r_pop_fake_bottom -> .)
    DET_ARR         reduce using rule 132 (r_pop_fake_bottom -> .)
    TRANS_ARR       reduce using rule 132 (r_pop_fake_bottom -> .)
    INV_ARR         reduce using rule 132 (r_pop_fake_bottom -> .)
    MULT            reduce using rule 132 (r_pop_fake_bottom -> .)
    DIV             reduce using rule 132 (r_pop_fake_bottom -> .)
    MOD             reduce using rule 132 (r_pop_fake_bottom -> .)
    PLUS            reduce using rule 132 (r_pop_fake_bottom -> .)
    MINUS           reduce using rule 132 (r_pop_fake_bottom -> .)
    MORE            reduce using rule 132 (r_pop_fake_bottom -> .)
    LESS            reduce using rule 132 (r_pop_fake_bottom -> .)
    COMPARE         reduce using rule 132 (r_pop_fake_bottom -> .)
    DIFFERENT       reduce using rule 132 (r_pop_fake_bottom -> .)
    MOREEQUAL       reduce using rule 132 (r_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 132 (r_pop_fake_bottom -> .)
    AND             reduce using rule 132 (r_pop_fake_bottom -> .)
    OR              reduce using rule 132 (r_pop_fake_bottom -> .)
    COMA            reduce using rule 132 (r_pop_fake_bottom -> .)
    RPAREN          reduce using rule 132 (r_pop_fake_bottom -> .)
    RSTAPLE         reduce using rule 132 (r_pop_fake_bottom -> .)
    HACER           reduce using rule 132 (r_pop_fake_bottom -> .)
    HASTA           reduce using rule 132 (r_pop_fake_bottom -> .)

    r_pop_fake_bottom              shift and go to state 262

state 233

    (80) FUN_AUX -> EXPRESION r_check_param . COMA FUN_AUX
    (81) FUN_AUX -> EXPRESION r_check_param .

    COMA            shift and go to state 263
    RPAREN          reduce using rule 81 (FUN_AUX -> EXPRESION r_check_param .)


state 234

    (101) WRITE_AUXSUB -> COMA WRITE_AUX .

    RPAREN          reduce using rule 101 (WRITE_AUXSUB -> COMA WRITE_AUX .)


state 235

    (41) EXPRESION_AUX -> AND r_seen_operator . EXPRESION
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 264
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 236

    (42) EXPRESION_AUX -> OR r_seen_operator . EXPRESION
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 265
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 237

    (45) SUBEXP_AUX -> COMPARACION SUBEXP .

    AND             reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    OR              reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    COMA            reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    RPAREN          reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    RSTAPLE         reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HACER           reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    DOTCOMA         reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)
    HASTA           reduce using rule 45 (SUBEXP_AUX -> COMPARACION SUBEXP .)


state 238

    (47) COMPARACION -> MORE r_seen_operator .

    NOT             reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    PLUS            reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    MINUS           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    LPAREN          reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_I           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_F           reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_CH          reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    CTE_STRING      reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)
    ID              reduce using rule 47 (COMPARACION -> MORE r_seen_operator .)


state 239

    (48) COMPARACION -> LESS r_seen_operator .

    NOT             reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    PLUS            reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    MINUS           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    LPAREN          reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_I           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_F           reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_CH          reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    CTE_STRING      reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)
    ID              reduce using rule 48 (COMPARACION -> LESS r_seen_operator .)


state 240

    (49) COMPARACION -> COMPARE r_seen_operator .

    NOT             reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    PLUS            reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    MINUS           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    LPAREN          reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_I           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_F           reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_CH          reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    CTE_STRING      reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)
    ID              reduce using rule 49 (COMPARACION -> COMPARE r_seen_operator .)


state 241

    (50) COMPARACION -> DIFFERENT r_seen_operator .

    NOT             reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    PLUS            reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    MINUS           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    LPAREN          reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_I           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_F           reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_CH          reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    CTE_STRING      reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)
    ID              reduce using rule 50 (COMPARACION -> DIFFERENT r_seen_operator .)


state 242

    (51) COMPARACION -> MOREEQUAL r_seen_operator .

    NOT             reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    PLUS            reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    MINUS           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    LPAREN          reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_I           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_F           reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)
    ID              reduce using rule 51 (COMPARACION -> MOREEQUAL r_seen_operator .)


state 243

    (52) COMPARACION -> LESSEQUAL r_seen_operator .

    NOT             reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    PLUS            reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    MINUS           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    LPAREN          reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_I           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_F           reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_CH          reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    CTE_STRING      reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)
    ID              reduce using rule 52 (COMPARACION -> LESSEQUAL r_seen_operator .)


state 244

    (54) EXP_AUX -> PLUS r_seen_operator . EXP
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 266
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 245

    (55) EXP_AUX -> MINUS r_seen_operator . EXP
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXP                            shift and go to state 267
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 246

    (58) TERMINO_AUX -> MULT r_seen_operator . TERMINO r_seen_term
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 268
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 247

    (59) TERMINO_AUX -> DIV r_seen_operator . TERMINO r_seen_term
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 269
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 248

    (60) TERMINO_AUX -> MOD r_seen_operator . TERMINO r_seen_term
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    TERMINO                        shift and go to state 270
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 249

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION . RPAREN r_pop_fake_bottom

    RPAREN          shift and go to state 271


state 250

    (75) ARROP -> DET_ARR r_seen_operator_mat .

    MULT            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIV             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOD             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MORE            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESS            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    AND             reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    OR              reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    COMA            reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    HACER           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 75 (ARROP -> DET_ARR r_seen_operator_mat .)


state 251

    (76) ARROP -> TRANS_ARR r_seen_operator_mat .

    MULT            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIV             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOD             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MORE            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESS            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    AND             reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    OR              reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    COMA            reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HACER           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 76 (ARROP -> TRANS_ARR r_seen_operator_mat .)


state 252

    (77) ARROP -> INV_ARR r_seen_operator_mat .

    MULT            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIV             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOD             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    PLUS            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MINUS           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MORE            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESS            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMPARE         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DIFFERENT       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    MOREEQUAL       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    LESSEQUAL       reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    AND             reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    OR              reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    COMA            reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    RPAREN          reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    RSTAPLE         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    HACER           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    DOTCOMA         reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)
    HASTA           reduce using rule 77 (ARROP -> INV_ARR r_seen_operator_mat .)


state 253

    (74) CTE -> ID r_seen_operand_id ARRACC .

    DET_ARR         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    TRANS_ARR       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    INV_ARR         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    MULT            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    DIV             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    MOD             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    PLUS            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    MINUS           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    MORE            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    LESS            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    COMPARE         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    DIFFERENT       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    MOREEQUAL       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    LESSEQUAL       reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    AND             reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    OR              reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    COMA            reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    RPAREN          reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    RSTAPLE         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    HACER           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    DOTCOMA         reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)
    HASTA           reduce using rule 74 (CTE -> ID r_seen_operand_id ARRACC .)


state 254

    (104) READ_AUX -> ID r_seen_operand_id ARRDIM r_lee . READ_AUXSUB
    (105) READ_AUXSUB -> . COMA READ_AUX
    (106) READ_AUXSUB -> . empty
    (1) empty -> .

    COMA            shift and go to state 273
    RPAREN          reduce using rule 1 (empty -> .)

    READ_AUXSUB                    shift and go to state 272
    empty                          shift and go to state 274

state 255

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES . IF2 r_if_end
    (87) IF2 -> . BLOQUE IF_AUX
    (88) IF2 -> . COND
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 89
    SI              shift and go to state 109
    DESDE           shift and go to state 110
    MIENTRAS        shift and go to state 111

    IF2                            shift and go to state 275
    BLOQUE                         shift and go to state 276
    COND                           shift and go to state 277
    IF                             shift and go to state 103
    FOR                            shift and go to state 104
    WHILE                          shift and go to state 105

state 256

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen . HACER FOR2 r_for_end

    HACER           shift and go to state 278


state 257

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN . WHILE_AUX WHILE2 r_while_end
    (94) WHILE_AUX -> . HAZ
    (95) WHILE_AUX -> . empty
    (1) empty -> .

    HAZ             shift and go to state 280
    LBRACKET        reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)

    WHILE_AUX                      shift and go to state 279
    empty                          shift and go to state 281

state 258

    (35) ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .

    DOTCOMA         reduce using rule 35 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .)
    HASTA           reduce using rule 35 (ASIGNACION -> ID r_seen_operand_id ARRACC EQUAL r_seen_operator EXPRESION r_seen_equal .)


state 259

    (36) ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX . RSTAPLE r_close_arracc

    RSTAPLE         shift and go to state 282


state 260

    (38) ARRACC_AUX -> COMA . r_add_dim EXPRESION r_create_quad ARRACC_AUX
    (118) r_add_dim -> .

    NOT             reduce using rule 118 (r_add_dim -> .)
    PLUS            reduce using rule 118 (r_add_dim -> .)
    MINUS           reduce using rule 118 (r_add_dim -> .)
    LPAREN          reduce using rule 118 (r_add_dim -> .)
    CTE_I           reduce using rule 118 (r_add_dim -> .)
    CTE_F           reduce using rule 118 (r_add_dim -> .)
    CTE_CH          reduce using rule 118 (r_add_dim -> .)
    CTE_STRING      reduce using rule 118 (r_add_dim -> .)
    ID              reduce using rule 118 (r_add_dim -> .)

    r_add_dim                      shift and go to state 283

state 261

    (39) ARRACC_AUX -> empty .

    RSTAPLE         reduce using rule 39 (ARRACC_AUX -> empty .)


state 262

    (79) FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom . r_go_sub
    (148) r_go_sub -> .

    DOTCOMA         reduce using rule 148 (r_go_sub -> .)
    DET_ARR         reduce using rule 148 (r_go_sub -> .)
    TRANS_ARR       reduce using rule 148 (r_go_sub -> .)
    INV_ARR         reduce using rule 148 (r_go_sub -> .)
    MULT            reduce using rule 148 (r_go_sub -> .)
    DIV             reduce using rule 148 (r_go_sub -> .)
    MOD             reduce using rule 148 (r_go_sub -> .)
    PLUS            reduce using rule 148 (r_go_sub -> .)
    MINUS           reduce using rule 148 (r_go_sub -> .)
    MORE            reduce using rule 148 (r_go_sub -> .)
    LESS            reduce using rule 148 (r_go_sub -> .)
    COMPARE         reduce using rule 148 (r_go_sub -> .)
    DIFFERENT       reduce using rule 148 (r_go_sub -> .)
    MOREEQUAL       reduce using rule 148 (r_go_sub -> .)
    LESSEQUAL       reduce using rule 148 (r_go_sub -> .)
    AND             reduce using rule 148 (r_go_sub -> .)
    OR              reduce using rule 148 (r_go_sub -> .)
    COMA            reduce using rule 148 (r_go_sub -> .)
    RPAREN          reduce using rule 148 (r_go_sub -> .)
    RSTAPLE         reduce using rule 148 (r_go_sub -> .)
    HACER           reduce using rule 148 (r_go_sub -> .)
    HASTA           reduce using rule 148 (r_go_sub -> .)

    r_go_sub                       shift and go to state 284

state 263

    (80) FUN_AUX -> EXPRESION r_check_param COMA . FUN_AUX
    (80) FUN_AUX -> . EXPRESION r_check_param COMA FUN_AUX
    (81) FUN_AUX -> . EXPRESION r_check_param
    (82) FUN_AUX -> . empty
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (1) empty -> .
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146

    EXPRESION                      shift and go to state 186
    FUN_AUX                        shift and go to state 285
    empty                          shift and go to state 187
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144

state 264

    (41) EXPRESION_AUX -> AND r_seen_operator EXPRESION .

    COMA            reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    RSTAPLE         reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HACER           reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)
    HASTA           reduce using rule 41 (EXPRESION_AUX -> AND r_seen_operator EXPRESION .)


state 265

    (42) EXPRESION_AUX -> OR r_seen_operator EXPRESION .

    COMA            reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    RPAREN          reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    RSTAPLE         reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HACER           reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    DOTCOMA         reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)
    HASTA           reduce using rule 42 (EXPRESION_AUX -> OR r_seen_operator EXPRESION .)


state 266

    (54) EXP_AUX -> PLUS r_seen_operator EXP .

    MORE            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESS            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMPARE         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    AND             reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    OR              reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    COMA            reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    RPAREN          reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    RSTAPLE         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HACER           reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)
    HASTA           reduce using rule 54 (EXP_AUX -> PLUS r_seen_operator EXP .)


state 267

    (55) EXP_AUX -> MINUS r_seen_operator EXP .

    MORE            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESS            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMPARE         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DIFFERENT       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    MOREEQUAL       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    LESSEQUAL       reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    AND             reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    OR              reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    COMA            reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    RPAREN          reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    RSTAPLE         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HACER           reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    DOTCOMA         reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)
    HASTA           reduce using rule 55 (EXP_AUX -> MINUS r_seen_operator EXP .)


state 268

    (58) TERMINO_AUX -> MULT r_seen_operator TERMINO . r_seen_term
    (130) r_seen_term -> .

    PLUS            reduce using rule 130 (r_seen_term -> .)
    MINUS           reduce using rule 130 (r_seen_term -> .)
    MORE            reduce using rule 130 (r_seen_term -> .)
    LESS            reduce using rule 130 (r_seen_term -> .)
    COMPARE         reduce using rule 130 (r_seen_term -> .)
    DIFFERENT       reduce using rule 130 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 130 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 130 (r_seen_term -> .)
    AND             reduce using rule 130 (r_seen_term -> .)
    OR              reduce using rule 130 (r_seen_term -> .)
    COMA            reduce using rule 130 (r_seen_term -> .)
    RPAREN          reduce using rule 130 (r_seen_term -> .)
    RSTAPLE         reduce using rule 130 (r_seen_term -> .)
    HACER           reduce using rule 130 (r_seen_term -> .)
    DOTCOMA         reduce using rule 130 (r_seen_term -> .)
    HASTA           reduce using rule 130 (r_seen_term -> .)

    r_seen_term                    shift and go to state 286

state 269

    (59) TERMINO_AUX -> DIV r_seen_operator TERMINO . r_seen_term
    (130) r_seen_term -> .

    PLUS            reduce using rule 130 (r_seen_term -> .)
    MINUS           reduce using rule 130 (r_seen_term -> .)
    MORE            reduce using rule 130 (r_seen_term -> .)
    LESS            reduce using rule 130 (r_seen_term -> .)
    COMPARE         reduce using rule 130 (r_seen_term -> .)
    DIFFERENT       reduce using rule 130 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 130 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 130 (r_seen_term -> .)
    AND             reduce using rule 130 (r_seen_term -> .)
    OR              reduce using rule 130 (r_seen_term -> .)
    COMA            reduce using rule 130 (r_seen_term -> .)
    RPAREN          reduce using rule 130 (r_seen_term -> .)
    RSTAPLE         reduce using rule 130 (r_seen_term -> .)
    HACER           reduce using rule 130 (r_seen_term -> .)
    DOTCOMA         reduce using rule 130 (r_seen_term -> .)
    HASTA           reduce using rule 130 (r_seen_term -> .)

    r_seen_term                    shift and go to state 287

state 270

    (60) TERMINO_AUX -> MOD r_seen_operator TERMINO . r_seen_term
    (130) r_seen_term -> .

    PLUS            reduce using rule 130 (r_seen_term -> .)
    MINUS           reduce using rule 130 (r_seen_term -> .)
    MORE            reduce using rule 130 (r_seen_term -> .)
    LESS            reduce using rule 130 (r_seen_term -> .)
    COMPARE         reduce using rule 130 (r_seen_term -> .)
    DIFFERENT       reduce using rule 130 (r_seen_term -> .)
    MOREEQUAL       reduce using rule 130 (r_seen_term -> .)
    LESSEQUAL       reduce using rule 130 (r_seen_term -> .)
    AND             reduce using rule 130 (r_seen_term -> .)
    OR              reduce using rule 130 (r_seen_term -> .)
    COMA            reduce using rule 130 (r_seen_term -> .)
    RPAREN          reduce using rule 130 (r_seen_term -> .)
    RSTAPLE         reduce using rule 130 (r_seen_term -> .)
    HACER           reduce using rule 130 (r_seen_term -> .)
    DOTCOMA         reduce using rule 130 (r_seen_term -> .)
    HASTA           reduce using rule 130 (r_seen_term -> .)

    r_seen_term                    shift and go to state 288

state 271

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN . r_pop_fake_bottom
    (132) r_pop_fake_bottom -> .

    MULT            reduce using rule 132 (r_pop_fake_bottom -> .)
    DIV             reduce using rule 132 (r_pop_fake_bottom -> .)
    MOD             reduce using rule 132 (r_pop_fake_bottom -> .)
    PLUS            reduce using rule 132 (r_pop_fake_bottom -> .)
    MINUS           reduce using rule 132 (r_pop_fake_bottom -> .)
    MORE            reduce using rule 132 (r_pop_fake_bottom -> .)
    LESS            reduce using rule 132 (r_pop_fake_bottom -> .)
    COMPARE         reduce using rule 132 (r_pop_fake_bottom -> .)
    DIFFERENT       reduce using rule 132 (r_pop_fake_bottom -> .)
    MOREEQUAL       reduce using rule 132 (r_pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 132 (r_pop_fake_bottom -> .)
    AND             reduce using rule 132 (r_pop_fake_bottom -> .)
    OR              reduce using rule 132 (r_pop_fake_bottom -> .)
    COMA            reduce using rule 132 (r_pop_fake_bottom -> .)
    RPAREN          reduce using rule 132 (r_pop_fake_bottom -> .)
    RSTAPLE         reduce using rule 132 (r_pop_fake_bottom -> .)
    HACER           reduce using rule 132 (r_pop_fake_bottom -> .)
    DOTCOMA         reduce using rule 132 (r_pop_fake_bottom -> .)
    HASTA           reduce using rule 132 (r_pop_fake_bottom -> .)

    r_pop_fake_bottom              shift and go to state 289

state 272

    (104) READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB .

    RPAREN          reduce using rule 104 (READ_AUX -> ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB .)


state 273

    (105) READ_AUXSUB -> COMA . READ_AUX
    (104) READ_AUX -> . ID r_seen_operand_id ARRDIM r_lee READ_AUXSUB

    ID              shift and go to state 149

    READ_AUX                       shift and go to state 290

state 274

    (106) READ_AUXSUB -> empty .

    RPAREN          reduce using rule 106 (READ_AUXSUB -> empty .)


state 275

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 . r_if_end
    (135) r_if_end -> .

    ID              reduce using rule 135 (r_if_end -> .)
    ESCRIBE         reduce using rule 135 (r_if_end -> .)
    LEE             reduce using rule 135 (r_if_end -> .)
    REGRESA         reduce using rule 135 (r_if_end -> .)
    SI              reduce using rule 135 (r_if_end -> .)
    DESDE           reduce using rule 135 (r_if_end -> .)
    MIENTRAS        reduce using rule 135 (r_if_end -> .)
    RBRACKET        reduce using rule 135 (r_if_end -> .)

    r_if_end                       shift and go to state 291

state 276

    (87) IF2 -> BLOQUE . IF_AUX
    (89) IF_AUX -> . SINO r_else_start BLOQUE
    (90) IF_AUX -> . empty
    (1) empty -> .

    SINO            shift and go to state 293
    ID              reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    SI              reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)

    IF_AUX                         shift and go to state 292
    empty                          shift and go to state 294

state 277

    (88) IF2 -> COND .

    ID              reduce using rule 88 (IF2 -> COND .)
    ESCRIBE         reduce using rule 88 (IF2 -> COND .)
    LEE             reduce using rule 88 (IF2 -> COND .)
    REGRESA         reduce using rule 88 (IF2 -> COND .)
    SI              reduce using rule 88 (IF2 -> COND .)
    DESDE           reduce using rule 88 (IF2 -> COND .)
    MIENTRAS        reduce using rule 88 (IF2 -> COND .)
    RBRACKET        reduce using rule 88 (IF2 -> COND .)


state 278

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER . FOR2 r_for_end
    (97) FOR2 -> . BLOQUE
    (98) FOR2 -> . COND
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 89
    SI              shift and go to state 109
    DESDE           shift and go to state 110
    MIENTRAS        shift and go to state 111

    FOR2                           shift and go to state 295
    BLOQUE                         shift and go to state 296
    COND                           shift and go to state 297
    IF                             shift and go to state 103
    FOR                            shift and go to state 104
    WHILE                          shift and go to state 105

state 279

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX . WHILE2 r_while_end
    (92) WHILE2 -> . BLOQUE
    (93) WHILE2 -> . COND
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET
    (83) COND -> . IF
    (84) COND -> . FOR
    (85) COND -> . WHILE
    (86) IF -> . SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end
    (96) FOR -> . DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end
    (91) WHILE -> . MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end

    LBRACKET        shift and go to state 89
    SI              shift and go to state 109
    DESDE           shift and go to state 110
    MIENTRAS        shift and go to state 111

    WHILE2                         shift and go to state 298
    BLOQUE                         shift and go to state 299
    COND                           shift and go to state 300
    IF                             shift and go to state 103
    FOR                            shift and go to state 104
    WHILE                          shift and go to state 105

state 280

    (94) WHILE_AUX -> HAZ .

    LBRACKET        reduce using rule 94 (WHILE_AUX -> HAZ .)
    SI              reduce using rule 94 (WHILE_AUX -> HAZ .)
    DESDE           reduce using rule 94 (WHILE_AUX -> HAZ .)
    MIENTRAS        reduce using rule 94 (WHILE_AUX -> HAZ .)


state 281

    (95) WHILE_AUX -> empty .

    LBRACKET        reduce using rule 95 (WHILE_AUX -> empty .)
    SI              reduce using rule 95 (WHILE_AUX -> empty .)
    DESDE           reduce using rule 95 (WHILE_AUX -> empty .)
    MIENTRAS        reduce using rule 95 (WHILE_AUX -> empty .)


state 282

    (36) ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE . r_close_arracc
    (119) r_close_arracc -> .

    EQUAL           reduce using rule 119 (r_close_arracc -> .)
    DET_ARR         reduce using rule 119 (r_close_arracc -> .)
    TRANS_ARR       reduce using rule 119 (r_close_arracc -> .)
    INV_ARR         reduce using rule 119 (r_close_arracc -> .)
    MULT            reduce using rule 119 (r_close_arracc -> .)
    DIV             reduce using rule 119 (r_close_arracc -> .)
    MOD             reduce using rule 119 (r_close_arracc -> .)
    PLUS            reduce using rule 119 (r_close_arracc -> .)
    MINUS           reduce using rule 119 (r_close_arracc -> .)
    MORE            reduce using rule 119 (r_close_arracc -> .)
    LESS            reduce using rule 119 (r_close_arracc -> .)
    COMPARE         reduce using rule 119 (r_close_arracc -> .)
    DIFFERENT       reduce using rule 119 (r_close_arracc -> .)
    MOREEQUAL       reduce using rule 119 (r_close_arracc -> .)
    LESSEQUAL       reduce using rule 119 (r_close_arracc -> .)
    AND             reduce using rule 119 (r_close_arracc -> .)
    OR              reduce using rule 119 (r_close_arracc -> .)
    COMA            reduce using rule 119 (r_close_arracc -> .)
    RPAREN          reduce using rule 119 (r_close_arracc -> .)
    RSTAPLE         reduce using rule 119 (r_close_arracc -> .)
    HACER           reduce using rule 119 (r_close_arracc -> .)
    DOTCOMA         reduce using rule 119 (r_close_arracc -> .)
    HASTA           reduce using rule 119 (r_close_arracc -> .)

    r_close_arracc                 shift and go to state 301

state 283

    (38) ARRACC_AUX -> COMA r_add_dim . EXPRESION r_create_quad ARRACC_AUX
    (40) EXPRESION -> . SUBEXP r_seen_subexp EXPRESION_AUX
    (44) SUBEXP -> . EXP r_seen_exp SUBEXP_AUX
    (53) EXP -> . TERMINO r_seen_term EXP_AUX
    (57) TERMINO -> . FACTOR r_seen_factor TERMINO_AUX
    (62) FACTOR -> . NOT r_seen_unary_operator FACTOR_AUX
    (63) FACTOR -> . FACTOR_AUX
    (64) FACTOR_AUX -> . SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom
    (65) FACTOR_AUX -> . SIGN CTE ARROP
    (66) SIGN -> . PLUS r_seen_unary_operator
    (67) SIGN -> . MINUS r_seen_unary_operator
    (68) SIGN -> . empty
    (1) empty -> .

    NOT             shift and go to state 142
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146
    LPAREN          reduce using rule 1 (empty -> .)
    CTE_I           reduce using rule 1 (empty -> .)
    CTE_F           reduce using rule 1 (empty -> .)
    CTE_CH          reduce using rule 1 (empty -> .)
    CTE_STRING      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)

    EXPRESION                      shift and go to state 302
    SUBEXP                         shift and go to state 138
    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 140
    FACTOR                         shift and go to state 141
    FACTOR_AUX                     shift and go to state 143
    SIGN                           shift and go to state 144
    empty                          shift and go to state 147

state 284

    (79) FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .

    DOTCOMA         reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    DET_ARR         reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    TRANS_ARR       reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    INV_ARR         reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    MULT            reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    DIV             reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    MOD             reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    PLUS            reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    MINUS           reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    MORE            reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    LESS            reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    COMPARE         reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    DIFFERENT       reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    MOREEQUAL       reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    LESSEQUAL       reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    AND             reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    OR              reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    COMA            reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    RPAREN          reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    RSTAPLE         reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    HACER           reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)
    HASTA           reduce using rule 79 (FUN -> ID r_check_func LPAREN r_create_bottom FUN_AUX RPAREN r_pop_fake_bottom r_go_sub .)


state 285

    (80) FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .

    RPAREN          reduce using rule 80 (FUN_AUX -> EXPRESION r_check_param COMA FUN_AUX .)


state 286

    (58) TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    RSTAPLE         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 58 (TERMINO_AUX -> MULT r_seen_operator TERMINO r_seen_term .)


state 287

    (59) TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    RSTAPLE         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 59 (TERMINO_AUX -> DIV r_seen_operator TERMINO r_seen_term .)


state 288

    (60) TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .

    PLUS            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MINUS           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MORE            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESS            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMPARE         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DIFFERENT       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    MOREEQUAL       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    LESSEQUAL       reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    AND             reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    OR              reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    COMA            reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    RPAREN          reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    RSTAPLE         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HACER           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    DOTCOMA         reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)
    HASTA           reduce using rule 60 (TERMINO_AUX -> MOD r_seen_operator TERMINO r_seen_term .)


state 289

    (64) FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .

    MULT            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIV             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOD             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    PLUS            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MINUS           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MORE            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESS            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMPARE         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DIFFERENT       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    MOREEQUAL       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    LESSEQUAL       reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    AND             reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    OR              reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    COMA            reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    RPAREN          reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    RSTAPLE         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HACER           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    DOTCOMA         reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)
    HASTA           reduce using rule 64 (FACTOR_AUX -> SIGN LPAREN r_seen_operator EXPRESION RPAREN r_pop_fake_bottom .)


state 290

    (105) READ_AUXSUB -> COMA READ_AUX .

    RPAREN          reduce using rule 105 (READ_AUXSUB -> COMA READ_AUX .)


state 291

    (86) IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .

    ID              reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    ESCRIBE         reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    LEE             reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    REGRESA         reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    SI              reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    DESDE           reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    MIENTRAS        reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)
    RBRACKET        reduce using rule 86 (IF -> SI LPAREN EXPRESION r_check_int RPAREN ENTONCES IF2 r_if_end .)


state 292

    (87) IF2 -> BLOQUE IF_AUX .

    ID              reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    ESCRIBE         reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    LEE             reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    REGRESA         reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    SI              reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    DESDE           reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    MIENTRAS        reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)
    RBRACKET        reduce using rule 87 (IF2 -> BLOQUE IF_AUX .)


state 293

    (89) IF_AUX -> SINO . r_else_start BLOQUE
    (136) r_else_start -> .

    LBRACKET        reduce using rule 136 (r_else_start -> .)

    r_else_start                   shift and go to state 303

state 294

    (90) IF_AUX -> empty .

    ID              reduce using rule 90 (IF_AUX -> empty .)
    ESCRIBE         reduce using rule 90 (IF_AUX -> empty .)
    LEE             reduce using rule 90 (IF_AUX -> empty .)
    REGRESA         reduce using rule 90 (IF_AUX -> empty .)
    SI              reduce using rule 90 (IF_AUX -> empty .)
    DESDE           reduce using rule 90 (IF_AUX -> empty .)
    MIENTRAS        reduce using rule 90 (IF_AUX -> empty .)
    RBRACKET        reduce using rule 90 (IF_AUX -> empty .)


state 295

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 . r_for_end
    (141) r_for_end -> .

    ID              reduce using rule 141 (r_for_end -> .)
    ESCRIBE         reduce using rule 141 (r_for_end -> .)
    LEE             reduce using rule 141 (r_for_end -> .)
    REGRESA         reduce using rule 141 (r_for_end -> .)
    SI              reduce using rule 141 (r_for_end -> .)
    DESDE           reduce using rule 141 (r_for_end -> .)
    MIENTRAS        reduce using rule 141 (r_for_end -> .)
    RBRACKET        reduce using rule 141 (r_for_end -> .)

    r_for_end                      shift and go to state 304

state 296

    (97) FOR2 -> BLOQUE .

    ID              reduce using rule 97 (FOR2 -> BLOQUE .)
    ESCRIBE         reduce using rule 97 (FOR2 -> BLOQUE .)
    LEE             reduce using rule 97 (FOR2 -> BLOQUE .)
    REGRESA         reduce using rule 97 (FOR2 -> BLOQUE .)
    SI              reduce using rule 97 (FOR2 -> BLOQUE .)
    DESDE           reduce using rule 97 (FOR2 -> BLOQUE .)
    MIENTRAS        reduce using rule 97 (FOR2 -> BLOQUE .)
    RBRACKET        reduce using rule 97 (FOR2 -> BLOQUE .)


state 297

    (98) FOR2 -> COND .

    ID              reduce using rule 98 (FOR2 -> COND .)
    ESCRIBE         reduce using rule 98 (FOR2 -> COND .)
    LEE             reduce using rule 98 (FOR2 -> COND .)
    REGRESA         reduce using rule 98 (FOR2 -> COND .)
    SI              reduce using rule 98 (FOR2 -> COND .)
    DESDE           reduce using rule 98 (FOR2 -> COND .)
    MIENTRAS        reduce using rule 98 (FOR2 -> COND .)
    RBRACKET        reduce using rule 98 (FOR2 -> COND .)


state 298

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 . r_while_end
    (138) r_while_end -> .

    ID              reduce using rule 138 (r_while_end -> .)
    ESCRIBE         reduce using rule 138 (r_while_end -> .)
    LEE             reduce using rule 138 (r_while_end -> .)
    REGRESA         reduce using rule 138 (r_while_end -> .)
    SI              reduce using rule 138 (r_while_end -> .)
    DESDE           reduce using rule 138 (r_while_end -> .)
    MIENTRAS        reduce using rule 138 (r_while_end -> .)
    RBRACKET        reduce using rule 138 (r_while_end -> .)

    r_while_end                    shift and go to state 305

state 299

    (92) WHILE2 -> BLOQUE .

    ID              reduce using rule 92 (WHILE2 -> BLOQUE .)
    ESCRIBE         reduce using rule 92 (WHILE2 -> BLOQUE .)
    LEE             reduce using rule 92 (WHILE2 -> BLOQUE .)
    REGRESA         reduce using rule 92 (WHILE2 -> BLOQUE .)
    SI              reduce using rule 92 (WHILE2 -> BLOQUE .)
    DESDE           reduce using rule 92 (WHILE2 -> BLOQUE .)
    MIENTRAS        reduce using rule 92 (WHILE2 -> BLOQUE .)
    RBRACKET        reduce using rule 92 (WHILE2 -> BLOQUE .)


state 300

    (93) WHILE2 -> COND .

    ID              reduce using rule 93 (WHILE2 -> COND .)
    ESCRIBE         reduce using rule 93 (WHILE2 -> COND .)
    LEE             reduce using rule 93 (WHILE2 -> COND .)
    REGRESA         reduce using rule 93 (WHILE2 -> COND .)
    SI              reduce using rule 93 (WHILE2 -> COND .)
    DESDE           reduce using rule 93 (WHILE2 -> COND .)
    MIENTRAS        reduce using rule 93 (WHILE2 -> COND .)
    RBRACKET        reduce using rule 93 (WHILE2 -> COND .)


state 301

    (36) ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .

    EQUAL           reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    DET_ARR         reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    TRANS_ARR       reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    INV_ARR         reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    MULT            reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    DIV             reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    MOD             reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    PLUS            reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    MINUS           reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    MORE            reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    LESS            reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    COMPARE         reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    DIFFERENT       reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    MOREEQUAL       reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    LESSEQUAL       reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    AND             reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    OR              reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    COMA            reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    RPAREN          reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    RSTAPLE         reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    HACER           reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    DOTCOMA         reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)
    HASTA           reduce using rule 36 (ARRACC -> LSTAPLE r_check_dim EXPRESION r_create_quad ARRACC_AUX RSTAPLE r_close_arracc .)


state 302

    (38) ARRACC_AUX -> COMA r_add_dim EXPRESION . r_create_quad ARRACC_AUX
    (117) r_create_quad -> .

    COMA            reduce using rule 117 (r_create_quad -> .)
    RSTAPLE         reduce using rule 117 (r_create_quad -> .)

    r_create_quad                  shift and go to state 306

state 303

    (89) IF_AUX -> SINO r_else_start . BLOQUE
    (26) BLOQUE -> . LBRACKET ESTATUTOS RBRACKET

    LBRACKET        shift and go to state 89

    BLOQUE                         shift and go to state 307

state 304

    (96) FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .

    ID              reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    ESCRIBE         reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    LEE             reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    REGRESA         reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    SI              reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    DESDE           reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    MIENTRAS        reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)
    RBRACKET        reduce using rule 96 (FOR -> DESDE ASIGNACION r_set_for HASTA EXPRESION r_for_gen HACER FOR2 r_for_end .)


state 305

    (91) WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .

    ID              reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    ESCRIBE         reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    LEE             reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    REGRESA         reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    SI              reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    DESDE           reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    MIENTRAS        reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)
    RBRACKET        reduce using rule 91 (WHILE -> MIENTRAS r_set_while LPAREN EXPRESION r_check_int RPAREN WHILE_AUX WHILE2 r_while_end .)


state 306

    (38) ARRACC_AUX -> COMA r_add_dim EXPRESION r_create_quad . ARRACC_AUX
    (38) ARRACC_AUX -> . COMA r_add_dim EXPRESION r_create_quad ARRACC_AUX
    (39) ARRACC_AUX -> . empty
    (1) empty -> .

    COMA            shift and go to state 260
    RSTAPLE         reduce using rule 1 (empty -> .)

    ARRACC_AUX                     shift and go to state 308
    empty                          shift and go to state 261

state 307

    (89) IF_AUX -> SINO r_else_start BLOQUE .

    ID              reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    ESCRIBE         reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    LEE             reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    REGRESA         reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    SI              reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    DESDE           reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    MIENTRAS        reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)
    RBRACKET        reduce using rule 89 (IF_AUX -> SINO r_else_start BLOQUE .)


state 308

    (38) ARRACC_AUX -> COMA r_add_dim EXPRESION r_create_quad ARRACC_AUX .

    RSTAPLE         reduce using rule 38 (ARRACC_AUX -> COMA r_add_dim EXPRESION r_create_quad ARRACC_AUX .)

